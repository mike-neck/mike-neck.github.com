<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-07-09T13:50:31+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaFXをヘッドレスブラウザーとして使うための基本テク #javafx]]></title>
    <link href="http://mike-neck.github.io/blog/2013/07/02/one-of-techniques-to-use-javafx-as-headless-browser/"/>
    <updated>2013-07-02T10:28:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/07/02/one-of-techniques-to-use-javafx-as-headless-browser</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>JavaFXをヘッドレスブラウザーとして使おうとして、</p>

<p>いろいろとWebのリダイレクトにハマりまくっています。</p>

<p>で、今回はJavaFXをJavaFXのスレッド以外のスレッドから扱うTipsを集めました。</p>

<h2>Goal</h2>

<h4>期待していいこと</h4>

<ul>
<li>JavaFXの操作をJavaFXの外からする方法</li>
</ul>


<h4>期待してはいけないこと</h4>

<ul>
<li>GUIプログラミングの云々かんぬん</li>
</ul>


<h2>Basics</h2>

<p>JavaFXのアプリケーションのサンプル的な起動方法は次のとおりです。</p>

<p>```java SampleApplication.java
import javafx.application.Application;
import javafx.stage.Stage;
// この中のmainメソッドからアプリケーションを起動しちゃう
public class SampleApplication extends Application {</p>

<pre><code>public static void main(String... args) {
    Application.launch(SampleApplication.class);
}
@Override
public void start(Stage stage) throws Exception {
    // do something.
}
</code></pre>

<p>}
```</p>

<p>さて、この方法を採用している限りにおいては、</p>

<p>JavaFXのスレッドがどうのこうのでハマることはありません。</p>

<p>今回のテーマはJavaFXアプリケーションの外と内をわけることにあります。</p>

<p>JavaFXアプリケーションはバックグラウンドで実行します。</p>

<p>そのためには<code>java.util.concurrent.ExecutorService</code>を用います。</p>

<p>```java ApplicationLauncher.java
import javafx.application.Application;
import javafx.application.Platform;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
// 先ほどのSampleApplicationを起動します。
public class ApplicationLauncher {</p>

<pre><code>private static final ExecutorService SERVICE =
        Executors.newFixedThreadPool(1);
public static void main(String... args) {
    // launch application
    SERVICE.submit(new Runnable(){
        @Override
        public void run() {
            Application.launch(SampleApplication.class);
        }
    });
    // do something
    // shutdown application
    Platform.exit();
    SERVICE.shutdown();
}
</code></pre>

<p>}
```</p>

<h2><code>Platform#RunLater(java.lang.Runnable)</code></h2>

<p>JavaFX上でのみ動作するオブジェクトへの操作は<code>Platform#runLater(java.lang.Runnable)</code>を</p>

<p>通じて行います。</p>

<p>```java ControllerStimulation.java
import javafx.application.Platform;
public class ControllerStimulation {</p>

<pre><code>// JavaFXのcontrollerクラスのインスタンス
private SampleController controller;
// Platform#runLater(Runnable)を通じてcontrollerクラスへの操作を行う。
public void simulateClickButton () {
    Platform.runLater(new SimulateClickButton());
}
// 実際にcontrollerクラスを操作するRunnable
private class SimulateClickButton implements Runnable {
    @Override
    public void run () {
        controller.clickButton(null);
    }
}
</code></pre>

<p>}
```</p>

<h2>戻り値を利用したい場合</h2>

<p>御存知の通り、<code>java.lang.Runnable#run()</code>は値を返しませんので、</p>

<p>値の受け渡しには<code>java.util.concurrent.BlockingQueue&lt;T&gt;</code>を使うことになります。</p>

<p><code>Platform#runLater</code>が<code>java.util.concurrent.Callable&lt;T&gt;</code>を引数にとって、</p>

<p><code>java.util.concurrent.Future&lt;T&gt;</code>を返してくれるといいんですけどね…</p>

<p>```java JavascriptExecution.java
import javafx.application.Platform;
import javafx.scene.web.WebEngine;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
public class JavascriptExecution {</p>

<pre><code>// controllerクラスのインスタンス
private SampleController controller;
public String callJavascript(String javascript) {
    final BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;&gt;();
    Platform.runLater(new CallJavascript(queue, javascript));
    try {
        String result = queue.take();
        return result;
    } catch(InterruptedException e) {
        throw new RuntimeException(e);
    }
}
private class CallJavascript implements Runnable {
    private final BlockingQueue&lt;String&gt; queue;
    private final String script;
    CallJavascript(final BlockingQueue&lt;String&gt; queue, String script) {
        this.queue = queue;
        this.script = script;
    }
    @Override
    public void run() {
        WebEngine engine = controller.getEngine();
        String result = (String) engine.executeScript(script);
        try {
            queue.put(result);
        } catch(InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre>

<p>}
```</p>

<p>実際はJavascriptなどでエラーがあると、<code>netscape.javascript.JSException</code>がthrowされるので、</p>

<p><code>Platform#runLater(java.lang.Runnable)</code>で<code>java.lang.RuntimeException</code>を検知して、</p>

<p>Applicatoinを終了させるような仕組みを組み込んでおくことが望まれるのですが、</p>

<p>それはここでの話を逸脱するし、誰得な気がするので、</p>

<p>やめておく…</p>

<p>以下、実際に僕が書いているコード</p>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRQVYweDh2QU1LVk0" target="_blank"><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRQVYweDh2QU1LVk0" style="width : 450px;"></a></p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFXをheadless browserとして使うためのJSObjectの扱い方 - 1]]></title>
    <link href="http://mike-neck.github.io/blog/2013/07/01/using-javafx-as-headless-browser/"/>
    <updated>2013-07-01T13:03:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/07/01/using-javafx-as-headless-browser</id>
    <content type="html"><![CDATA[<p>こんにちわ。</p>

<p>みけです。</p>

<p>JavaFXでjavascriptのテスティングフレームワークを作ろうと思ってから、</p>

<p>早1年半。</p>

<p>全然成果があがっていません。</p>

<p>今日は、そんな自分のための俺得なエントリー。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRbkltQVpjMUkzNE0" style="width : 450px;"/></p>

<h2>Goal</h2>

<h4>期待していいこと</h4>

<ul>
<li>JSObjectでのarrayの取り扱い</li>
</ul>


<h4>期待できないこと</h4>

<ul>
<li>JavaFXのスレッドの同期方法</li>
<li>JSObjectでのobjectの取り扱い</li>
</ul>


<h2>JSObjectの扱い方 &ndash; array編</h2>

<p><code>JSObject#getSlot(int)</code>を使ってarrayの要素を取得します。</p>

<p>```java
final String script = &ldquo;(function(){return [&lsquo;a&rsquo;, 2, &lsquo;c&rsquo;, 4, &lsquo;e&rsquo;];})()&rdquo;;
final BlockingQueue<JSObject> queue = new LinkedBlockingQueue&lt;>();
Platform.runLater(() &ndash;> {</p>

<pre><code>queue.put((JSObject) webEngine.executeScript(script));
</code></pre>

<p>});
JSObject array = queue.take();
for (int i = 0; i &lt; 5; i++) {</p>

<pre><code>System.out.println(i + " -&gt; " + array.getSlot(i));
</code></pre>

<p>}
```</p>

<p>結果は次のようになります。</p>

<p><code>
0 -&gt; a
1 -&gt; 2
2 -&gt; c
3 -&gt; 4
4 -&gt; e
</code></p>

<p>ちなみに要素のindexより多い数を<code>JSObject#getSLot(int)</code>の引数に渡すと、</p>

<p><code>String</code>の<code>undefined</code>が返ってきます。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一回渋谷javaに行ってきた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/30/first-shibuya-java/"/>
    <updated>2013-06-30T15:05:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/30/first-shibuya-java</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/40140">第一回渋谷java</a>というのに行って来ました。</p>

<p>javaの勉強会としては比較的若い人の集まった勉強会だったと思います。</p>

<hr />

<p>自己紹介で「好きなEclipseのショートカットは？」とか聞かれたので、</p>

<p>相変わらずのことで「Eclipse氏ね」と答えて来ました。</p>

<p>後、Eclipseの代替するエディターがvimだったので、</p>

<p>いや、IntelliJ IDEAですからとも自己紹介しておきました。</p>

<hr />

<p>一応タイトルはネタっぽいですが、</p>

<p>真面目な話をして来ました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/23694003" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<hr />

<p>他の参加者のブログがいくつかあるようです。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/jflute/20130629/1372519117">新たなるJavaの風景、渋谷javaがスタート！</a></li>
<li><a href="http://blog.k11i.biz/2013/06/java.html">第１回 #渋谷Java でトークしてきました</a></li>
<li><a href="http://hotchemi.hateblo.jp/entry/2013/06/29/230427">第1回渋谷Javaに行ってきた</a></li>
</ul>


<p>あと、いくつかスライドがアップロードされています。</p>

<p>JavaとOSS &ndash; ユーザーサイドから語ってみる</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/23660334" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/commonplace0807/java-23660334" title="渋谷Java第一回" target="_blank">渋谷Java第一回</a> </strong> from <strong><a href="http://www.slideshare.net/commonplace0807" target="_blank">commonplace0807</a></strong> </div></p>

<hr />

<p>今回は初回ということでLTだけでしたが、ハンズオンなども実施していくとのことです。</p>

<p>Eclipse強制されるのでなければ、行こうかなと思います。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8 lambda式を使ってみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/27/java8-lambdashi-woshi-tutemita/"/>
    <updated>2013-06-27T22:24:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/27/java8-lambdashi-woshi-tutemita</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>Java8初心者勉強会というのを開催してみました。</p>

<p>参加者2人でした。</p>

<p>Java8はだれも興味ないんだなと思いました。</p>

<h2>Java8のラムダ式</h2>

<p>特にもうこれといって目新しいこともありません。</p>

<p>メソッドが一つだけのインターフェースを記述するときに、</p>

<p>非常に記述が楽になるというものです。</p>

<p>例えば次のようなクラスがあるとします。</p>

<p>```java Item.jara
public class Item {</p>

<pre><code>final String name;
final int price;
public Item(String name, int price) {
    this.name = name;
    this.price = price;
}
public String getName() {
    return name;
}
public int getPrice() {
    return price;
}
</code></pre>

<p>}
```</p>

<p>上記の<code>Item</code>クラスを<code>price</code>の昇順、<code>name</code>の昇順でソートするコードは以下のようになります。</p>

<p>```java
List<Item> items = getItemList();
items.sort((left, right) &ndash;> {</p>

<pre><code>int priceOrder = left.getPrice() - right.getPrice();
int nameOrder = left.getName().
        compareTo(right.getNmae());
return priceOrder != 0? priceOrder : nameOrder;
</code></pre>

<p>});
```</p>

<p>ところで、<code>Item</code>クラスの<code>price</code>だとか<code>name</code>だとかについて、</p>

<p>それをソートするという操作は別に外のクラスが実装しても構わないけど、</p>

<p><code>Item</code>クラスが持っている方が何かと便利です。</p>

<p>したがって、オーダーするにあたって、<code>Item</code>クラスに次のようなメソッドを</p>

<p>持たせるようにします。</p>

<p>```java Item.java
public class Item {</p>

<pre><code>final String name;
final int price;
// 途中省略
public int comparePriceAscNameAsc (Item that) {
    int priceOrder = this.price - that.price;
    return priceOrder != 0 priceOrder :
            this.name.compareTo(that.name);
}
</code></pre>

<p>}
```</p>

<p>先ほどのソートをするコードのラムダ式部分は非常に簡単化されます。</p>

<p><code>java
items.sort((left, right) -&gt; left.comparePriceAscNameAsc(right));
</code></p>

<p>ところで、呼び出されるメソッドはこのケースの場合わかりきっているので、</p>

<blockquote><p>TODO : この記述は適当に書いているのでドキュメントを読み直します</p></blockquote>

<p>Method Referenceに変更することが可能です。</p>

<p><code>java
items.sort(Item::comparePriceAscNameAsc)
</code></p>

<p>という感じで、ラムダ式っぽい記述はなくなりました。</p>

<p>ちなみにMethod and Constructor Referenceは<a href="http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/C.html">Lambdaの仕様の一部</a>です。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to publish artifacts to maven central repository via gradle maven-publish plugin (version 1.6)]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/21/how-to-publish-artifacts-with-gradle-maven-publish-plugin-version-1-dot-6/"/>
    <updated>2013-06-21T14:04:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/21/how-to-publish-artifacts-with-gradle-maven-publish-plugin-version-1-dot-6</id>
    <content type="html"><![CDATA[<p><img src="http://www.gradle.org/forum-assets/images/gradle_logo.gif"/></p>

<p>Gradle <strong>maven-publish plugin</strong> provides the easier way to publish artifacts than the old <strong>maven plugin</strong>.</p>

<p>This post introduces you the way to publish artifacts with <strong>maven-publish plugin</strong>.</p>

<p><strong>Please Note that</strong> maven-publish plugin is incubating feature. Its DSL may change later.</p>

<h2>Goal</h2>

<p>After reading this post, you can upload your artifacts to maven central repository via <strong>maven-publish plugin</strong>.</p>

<h2>Basics and Example</h2>

<p>To publish artifacts you should do these things.</p>

<ol>
<li>to declare applying <strong>maven-publish plugin</strong>.</li>
<li>to tell gradle which files should be published.</li>
<li>to tell gradle where to upload artifacts.</li>
</ol>


<p>Now let&rsquo;s see sample build script.</p>

<p>```groovy build.gradle
// declaration of plugins (1)
[&lsquo;java&rsquo;, &lsquo;maven-publish&rsquo;].each {</p>

<pre><code>apply plugin : it
</code></pre>

<p>}
group = &lsquo;com.yourdomain&rsquo;
version = &lsquo;1.0&rsquo;
repositories {</p>

<pre><code>mavenCentral ()
</code></pre>

<p>}
dependencies {</p>

<pre><code>compile 'org.apache.commons:commons-lang3:3.1'
testCompile 'junit:junit:4.11'
</code></pre>

<p>}
publishing {</p>

<pre><code>publications {
    myPublication(MavenPublication) {
        // telling gradle to publish project's jar archive (2)
        from components.java
        // telling gradle to publish README file (2)
        artifact ('README.txt') {
            classifier = 'README'
            extension  = 'txt'
        }
    }
}
// telling gradle to publish artifact to local directory (3)
repositories {
    maven {
        url "file:/${project.projectDir}/artifacts"
    }
}
</code></pre>

<p>}
```</p>

<p>With this script you can publish your artifact via this command.</p>

<p><code>
$ gradle publish
</code></p>

<p>Then you will find some file is generated at <code>artifact</code> directory.</p>

<p>These files are …</p>

<ul>
<li>sample-project.jar</li>
<li>sample-project.jar.md5</li>
<li>sample-project.jar.sha1</li>
<li>sample-project.pom</li>
<li>sample-project.pom.md5</li>
<li>sample-project.pom.sha1</li>
<li>sample-project-README.txt</li>
<li>sample-project-README.txt.md5</li>
<li>sample-project-README.txt.sha1</li>
</ul>


<h2>Conventions</h2>

<p><strong>maven-publish plugin</strong> has some conventions.</p>

<ul>
<li>base archive name is project name.</li>
<li><code>classifier</code> is given after the project name.</li>
<li><code>extension</code> is given after the project name and <code>classifier</code>.</li>
<li><code>classifier</code> and <code>extension</code> should be unique in all artifacts in a publication.</li>
</ul>


<h2>Publishing javadoc and source code as jar</h2>

<h3>javadoc</h3>

<p>Following shows the way to publish javadoc as jar.</p>

<ol>
<li>call javadoc task.</li>
<li>create a task of zipping javadoc and call it.</li>
<li>give th zipping task to <code>artifact</code> method in publication container.</li>
</ol>


<p>```groovy build.gradle
// (2)
task javadocJar (type: Jar, dependsOn: javadoc) { // (1)</p>

<pre><code>classifier = 'javadoc'
from javadoc.destinationDir
</code></pre>

<p>}
publishing {</p>

<pre><code>publications {
    myPublication(MavenPublication) {
        artifact (javadocJar) { // (3)
            classifier = 'javadoc'
        }
    }
}
</code></pre>

<p>}
```</p>

<h3>source codes</h3>

<p>Following shows the way to publish source as jar.</p>

<ol>
<li>create a task of zipping sources as jar.</li>
<li>give the zipping task to <code>artifact</code> method in publication container.</li>
</ol>


<p>```groovy build.gradle
// (1)
task sourceJar (type : Jar) {</p>

<pre><code>classifier = 'sources'
from sourceSets.main.allSource
</code></pre>

<p>}
publishing {</p>

<pre><code>publications {
    myPublication(MavenPublication) {
        artifact (sourceJar) { // (2)
            classifier = 'sources'
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>Modifying POM</h2>

<h3>requirements</h3>

<p><strong>maven-publish plugin</strong> generates POM, but it lacks some elements required by Sonatype OSS repository. Folowing shows list of elements to be added.</p>

<ul>
<li><code>&lt;name&gt;</code> &ndash; the name of project</li>
<li><code>&lt;description&gt;</code> &ndash; the description for the project</li>
<li><code>&lt;url&gt;</code> &ndash; project&rsquo;s url</li>
<li><code>&lt;scm&gt;&lt;url&gt;</code> &ndash; repository url.</li>
<li><code>&lt;scm&gt;&lt;connection&gt;</code> &ndash; repository url for scm tool. for example using git &ndash; github, it becomes <code>scm:git:git://github.com/your-name/project-name.git</code></li>
<li><code>&lt;scm&gt;&lt;developerConnection&gt;</code> &ndash; repository url for scm tool via ssh. for example using git &ndash; github, it becomes <code>scm:git:ssh:git@github.com:your-name/project-name.git</code></li>
<li><code>&lt;licenses&gt;&lt;license&gt;&lt;name&gt;</code> &ndash; license name (i.e. <code>The Apache Software License, Version 2.0</code> etc…). In the case of the project being licensed under multiple license, <code>licenses</code> elements can have multiple <code>&lt;license&gt;</code> elements.</li>
<li><code>&lt;licenses&gt;&lt;license&gt;&lt;url&gt;</code> &ndash; license url (e.x. if the project is licensed under Apache version 2, it becomes <code>http://www.apache.org/license/LICENSE-2.0.txt</code>)</li>
<li><code>&lt;licenses&gt;&lt;license&gt;&lt;distribution&gt;</code> &ndash; <code>repo</code></li>
<li><code>&lt;developers&gt;&lt;developer&gt;&lt;id&gt;</code> &ndash; developer&rsquo;s id. If there are more than one developers, you can write <code>&lt;developer&gt;</code> elements more than one times.</li>
<li><code>&lt;developers&gt;&lt;developer&gt;&lt;name&gt;</code> &ndash; developer&rsquo;s name.</li>
<li><code>&lt;developers&gt;&lt;developer&gt;&lt;email&gt;</code> &ndash; developer&rsquo;s email.</li>
</ul>


<h3>build script</h3>

<p>To add these elements to POM, you can acces pom file via <code>pom</code> object&rsquo;s <code>withXml</code> method in <code>MavenPublication</code> container.</p>

<p>```groovy build.gradle
publishing {</p>

<pre><code>publications {
    myPublication (MavenPublication) {
        from components.java
        pom.withXml {
            asNode().children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST
                name 'project-name'
                description 'description for project'
                url projectUrl
                scm {
                    url scmUrl
                    connection connectionUrl
                    developerConnection developerConnectionUrl
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'your id or nick name'
                        name 'Your Name'
                        email 'your@mail.address'
                    }
                }
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>Signing Jar</h2>

<p>To keep quality of maven central repo, signing files is required.</p>

<p>These files should be signed.</p>

<ul>
<li>main jar (file name is <code>project-name.jar.asc</code>)</li>
<li>javadoc jar (file name is <code>project-name-javadoc.jar.asc</code>)</li>
<li>sources jar (file name is <code>project-name-sources.jar.asc</code>)</li>
<li>pom file (file name is <code>project-name.pom.asc</code>, on this signature this post will mention later)</li>
</ul>


<p>To sign archives is available via <strong>signing plugin</strong>.</p>

<p>```groovy build.gradle
// adding &lsquo;signing&rsquo; plugin
apply plugin: &lsquo;signing&rsquo;
// summarize artifacts
artifacts {</p>

<pre><code>archives jar
archives sourceJar
archives javadocJar
</code></pre>

<p>}
// sign all artifacts
task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {</p>

<pre><code>sign configurations.archives
</code></pre>

<p>}
// call signJar task before publish task
task preparePublish(dependsOn: signJar)
// extract signature file and give them proper name
def getSignatureFiles = {</p>

<pre><code>def allFiles = project.tasks.signJars.signatureFiles.collect { it }
def signedSources = allFiles.find { it.name.contains('-sources') }
def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
return [
        [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
        [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
        [archive: signedJar,     classifier: null,      extension: 'jar.asc']
]
</code></pre>

<p>}
publishing {</p>

<pre><code>publications {
    signatures (MavenPublication) {
        // give signature files to rtifact method
        getSignatureFiles().each {signature -&gt;
            artifact (signature.archive) {
                classifier = signature.classifier
                extension  = signature.extension
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>Signing POM</h2>

<p>Before running <code>publish</code> task, there are no POM file, so calling signing POM task will fail. To avoid this, whether calling POM task or not is defined dynamicly. And writing POM is available <code>writeTo(File)</code> method via <code>XmlProviderContainer</code> (i.e. on the <code>Closure</code> block of <code>pom.withXml</code>)</p>

<p>```groovy build.gradle
ext {</p>

<pre><code>pomFilePath = "${project.projectDir}/tmp/pom.xml"
pomFile = file(pomFilePath)
</code></pre>

<p>}
configurations {</p>

<pre><code>pom
</code></pre>

<p>}
artifacts {</p>

<pre><code>archives jar
archives sourceJar
archives javadocJar
if (pomFile.exists()) {
    pom pomFile
}
</code></pre>

<p>}
task signPom(type: Sign) {</p>

<pre><code>sign configurations.pom
</code></pre>

<p>}
def getPomSignature = {</p>

<pre><code>return project.tasks.signPom.signatureFiles.collect{it}[0]
</code></pre>

<p>}
if (project.ext.pomFile.exists()) {</p>

<pre><code>task preparePublication (dependsOn : [signJars, signPom])
</code></pre>

<p>} else {</p>

<pre><code>task preparePublication (dependsOn : signJars)
</code></pre>

<p>}
publishing {</p>

<pre><code>publications {
    jar(MavenPublication) {
        // publishing main jars
        pom.withXml {
            // add required elements
            // here writing pom file
            if (!project.ext.pomFile.exists()) {
                writeTo (project.ext.pomFile)
            }
        }
    }
    gpgJars(MavenPublication) {
        // publishing signature of jars
    }
    // dynamic publication definition
    // pom file does exist signature of pom file is published
    if (project.ext.pomFile.exists()) {
        gpgPom(MavenPublication) {
            artifact (getPomSignature()) {
                classifier = null
                extension  = 'pom.asc'
            }
        }
    }
}
repositories {
    maven {
        if (project.ext.pomFile.exists()) {
            url sonatypeUrl
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        } else {
            url fileDirectory
        }
    }
}
</code></pre>

<p>}
```</p>

<p>and execute gradle tasks as follows</p>

<p><code>
$ gradle clean pP publish
$ gradle clean pP publish
</code></p>

<p>You should execute gradle publish task twice.</p>

<ol>
<li>The first execution is generating pom file and publishing som artifacts to machine&rsquo;s directory.</li>
<li>The second execution is publishing pom signature to Sonatype OSS repository.</li>
</ol>


<h4>Please note…</h4>

<p><code>publish</code> task will execute publication tasks according to the alphabetiacl order of publishing task name. And each publication task will generate POM file. So please take care of publication name. The recomending name for publications is …</p>

<ul>
<li>gpgJars &ndash; publish signatures of jar files.</li>
<li>gpgPom &ndash; publish signature of POM.</li>
<li>jar &ndash; publish all jars and POM.</li>
</ul>


<h2>Credential</h2>

<p>You may know an account of Sonatype OSS is required to upload artifact into maven central repo. Here shows settings of sonatype account in <strong>maven-publish plugin</strong>.</p>

<p>```groovy build.gradle
publishing {</p>

<pre><code>repositories {
    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    credentials {
        username = sonatypeUsername
        password = sonatypePassword
    }
}
</code></pre>

<p>}
```</p>

<h2>Conclusion</h2>

<p>Taking these things in account, here is a perfect example script for publishing artifacts to maven central repo with <strong>maven-publish plugin</strong>.</p>

<p>```groovy build.gradle
[&lsquo;java&rsquo;, &lsquo;siging&rsquo;, &lsquo;maven-publish&rsquo;].each {</p>

<pre><code>apply plguin: it
</code></pre>

<p>}
// project information
group = &lsquo;com.yourdomain&rsquo;
version = &lsquo;1.0&rsquo;
// dependency management as you like
repositories {</p>

<pre><code>mavenCentral ()
</code></pre>

<p>}
dependencies {</p>

<pre><code>compile 'org.apache.commons:commons-lang3:3.1'
testCompile 'junit:junit:4.11'
</code></pre>

<p>}
// javadoc.jar generation
task javadocJar (type: Jar, dependsOn: javadoc) { // (1)</p>

<pre><code>classifier = 'javadoc'
from javadoc.destinationDir
</code></pre>

<p>}
// sources.jar generation
task sourceJar (type : Jar) {</p>

<pre><code>classifier = 'sources'
from sourceSets.main.allSource
</code></pre>

<p>}
// pom file name
ext {</p>

<pre><code>pomFilePath = "${project.projectDir}/tmp/pom.xml"
pomFile = file(pomFilePath)
</code></pre>

<p>}
// add configuration for pom signing
configurations {</p>

<pre><code>pom
</code></pre>

<p>}
// summarize artifacts
artifacts {</p>

<pre><code>archives jar
archives sourceJar
archives javadocJar
if (pomFile.exists()) {
    pom pomFile
}
</code></pre>

<p>}
// sign all artifacts
task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {</p>

<pre><code>sign configurations.archives
</code></pre>

<p>}
// sign pom
task signPom(type: Sign) {</p>

<pre><code>sign configurations.pom
</code></pre>

<p>}
// defining which tasks should be called
if (project.ext.pomFile.exists()) {</p>

<pre><code>task preparePublication (dependsOn : [signJars, signPom])
</code></pre>

<p>} else {</p>

<pre><code>task preparePublication (dependsOn : signJars)
</code></pre>

<p>}
// extract signatures and add classifier and extension to them
def getSignatureFiles = {</p>

<pre><code>def allFiles = project.tasks.signJars.signatureFiles.collect { it }
def signedSources = allFiles.find { it.name.contains('-sources') }
def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
return [
        [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
        [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
        [archive: signedJar,     classifier: null,      extension: 'jar.asc']
]
</code></pre>

<p>}
// extract pom signature
def getPomSignature = {</p>

<pre><code>return project.tasks.signPom.signatureFiles.collect{it}[0]
</code></pre>

<p>}
publishing {</p>

<pre><code>publicaitons {
    gpgJars(MavenPublication) {
        getSignatureFiles().each {signature -&gt;
            artifact (signature.archive) {
                classifier = signature.classifier
                extension  = signature.extension
            }
        }
    }
    if (project.ext.pomFile.exists()) {
        gpgPom(MavenPublication) {
            artifact (getPomSignature()) {
                classifier = null
                extension  = 'pom.asc'
            }
        }
    }
    jar(MavenPublication) {
        from components.java
        pom.withXml {
            asNode().children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST
                name 'project-name'
                description 'description for project'
                url projectUrl
                scm {
                    url scmUrl
                    connection connectionUrl
                    developerConnection developerConnectionUrl
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'your id or nick name'
                        name 'Your Name'
                        email 'your@mail.address'
                    }
                }
            }
        }
    }
}
repositories {
        if (project.ext.pomFile.exists()) {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        } else {
            url fileDirectory
        }
}
</code></pre>

<p>}
```</p>

<p>and execute gradle tasks as follows</p>

<p><code>
$ gradle clean pP publish
$ gradle clean pP publish
</code></p>

<p>… Eh? <strong>maven plugin</strong> is easier than this way? <strong>You, right!</strong></p>

<p>But this plugin will become more smart, I believe.</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/mike_neck">@mike_neck</a> You&#39;re doing cool stuff with &#39;maven-publish&#39;: latest gradle nightly has ability to set GAV of publication, too. Docs soon.</p>&mdash; Daz DeBoer (@dazdeboer) <a href="https://twitter.com/dazdeboer/statuses/347938407252635648">June 21, 2013</a></blockquote>


<script async src="http://mike-neck.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
</feed>
