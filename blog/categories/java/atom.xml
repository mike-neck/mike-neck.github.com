<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-05-29T00:37:23+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AndroidがJavaだと思っている人のためのGroovy講座 - 1]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/27/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo/"/>
    <updated>2013-05-27T12:29:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/27/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo</id>
    <content type="html"><![CDATA[<p>タイトルが偉そうなこと書いていますが、</p>

<p>大したことは書きません。</p>

<p>みけです。</p>

<h1>Android Studioが出てきてgradleとは何ぞと思っている方がいると思います</h1>

<p>gradleはgroovyで記述できるビルドシステムです。</p>

<p>antの自由なところと、mavenの依存性管理を組み合わせたイケてるところが売りです。</p>

<p>さて、この記事では…</p>

<h1>gradleのことはほとんど書きません</h1>

<p>Android開発者でgradleとは何やねん？って思っている方には</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00C7AMKTU" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>こちらに詳細が書かれていますので、読んでみて下さい。</p>

<p>で、この記事は何を書いているの？というわけで、</p>

<h1>簡単なgroovyの文法の説明を書きます</h1>

<p>これを覚えると、gradleの記述で少し楽をできるかもしれません。</p>

<p>でも、groovyのことを完璧に説明しているかというと、そうでもないので、</p>

<p>詳しくは次の本を買って読んで下さい。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774147273" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>では、以下、本題</p>

<h2>メソッドの引数部分の括弧は省略できる</h2>

<p>多分gradleを初めて見た人で何やねんこれと思う記述はこういうやつだと思います。</p>

<p><code>groovy build.gradle
task myTask
</code></p>

<p>この<code>task</code>というのは、<code>AbstractProject</code>という抽象クラスで定義されている<code>public Task task(Object task)</code>というメソッドです。このメソッドはタスクをプロジェクトに登録するメソッドです。</p>

<p>したがって、上記の例では<code>task</code>メソッドによって<code>myTask.toString()</code>で得られる名前(<code>myTask</code>)のタスクが作成されます。</p>

<p>gradleの中で同様な記述がたくさんあると思います。</p>

<p>例えば</p>

<p>```groovy build.gradle
repositories {</p>

<pre><code>// some repository configuration
</code></pre>

<p>}
dependencies {</p>

<pre><code>// some dependency configuration
</code></pre>

<p>}
```</p>

<p>これら<code>repositories</code>や、<code>dependencies</code>も、実はみんなメソッドです。</p>

<h3>裏をとってみる</h3>

<p>では、こっから先はちょっと混みいった話</p>

<p>gradleのprojectの元になるクラスは<code>org.gradle.api.internal.project.AbstractProject</code>クラスです。</p>

<p>このクラスの中を少し見てみましょう。</p>

<p>```java AbstractProject.java
public abstract class AbstractProject</p>

<pre><code>    extends AbstractPluginAware
    implements ProjectInternal, DynamicObjectAware {
// some codes

public void repositories(Closure configureClosure) {
    ConfigureUtil.configure(configureClosure, getRepositories());
}

public void dependencies(Closure configureClosure) {
    ConfigureUtil.configure(configureClosure, getDependencies());
}

// some codes

public Task task(String task) {
    return taskContainer.create(task);
}

public Task task(Object task) {
    return taskContainer.create(task.toString());
}

// some codes
</code></pre>

<p>}
```</p>

<p>はい、<code>dependencies</code>や<code>repositories</code>、<code>task</code>といったキーワードはすべてメソッドですね。</p>

<h2>結論：groovyではメソッドの引数部分の括弧を省略できる</h2>

<p>…ん、gradleのことほとんど書かないと言ったな、あれは嘘だ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaではじめてSocketプログラムを書いてみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita/"/>
    <updated>2013-05-25T21:13:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p>jjugのメーリングリストにconcurrentに関する質問が着ていたので、</p>

<p>答えようと思ってみたんですが、</p>

<p>Socketを使ったプログラムで、</p>

<p><strong>そういえば僕、Socketを使ったプログラム書いたこと無いな</strong></p>

<p>と思い至り、書いてみることにしました。</p>

<h2>SocketServerのほう</h2>

<p><code>java.net.ServerSocket</code>を使って書くようです。</p>

<p>```java SimpleServer.java
package org.mikeneck.socket;</p>

<p>import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;</p>

<p>/<em>*
 * @author mike_neck
 </em>/
public class SimpleServer implements Runnable {</p>

<pre><code>private final ServerSocket serverSocket;

public SimpleServer(int port) throws IOException {
    serverSocket = new ServerSocket(port);
}

@Override
public void run() {
    while(true) {
        try (Socket socket = serverSocket.accept();
             BufferedReader reader = new BufferedReader(
                 new InputStreamReader(socket.getInputStream()));
             PrintStream writer = new PrintStream(socket.getOutputStream())
        ) {
            String line = reader.readLine();
            writer.println(line);
            if (line.equals("BYE")) {
                break;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>SocketClientのほう</h2>

<p>クライアントアプリケーションの方は<code>java.net.Socket</code>を用いるようです。</p>

<p>```java SimpleClient.java
package org.mikeneck.multithreads;</p>

<p>import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;</p>

<p>/<em>*
 * @author mike_neck
 </em>/
public class SimpleClient implements AutoCloseable {</p>

<pre><code>private final Socket socket;

private DataOutputStream output;

private BufferedReader input;

public SimpleClient(String hostname, int port) throws IOException {
    socket = new Socket(hostname, port);
}

public SimpleClient open () throws IOException {
    output = new DataOutputStream(socket.getOutputStream());
    input = new BufferedReader(
        new InputStreamReader(socket.getInputStream()));
    return this;
}

public String sendMessage(String message) throws IOException {
    output.writeBytes(message + '\n');
    String line;
    if ((line = input.readLine()) != null) {
        return line;
    } else {
        return "";
    }
}

public void bye () throws IOException {
    output.writeBytes("BYE\n");
}

@Override
public void close() throws Exception {
    if (!socket.isClosed()) {
        socket.close();
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<h2>SocketServerでの疑問</h2>

<p>と、まあ簡単なプログラムを書いたのですが、</p>

<p>二回メッセージを送る場合はどうなるのかとか、疑問が残りますね。</p>

<p>で、テストを書くわけですが…</p>

<p>案の定落ちました。</p>

<p>```java SendManyMessages.java
// import とか packageとか省略
public static class SendManyMessages {</p>

<pre><code>private static final ExecutorService SERVICE = Executors.newFixedThreadPool(1);

private static final int PORT = 14541;

private static final String LOCALHOST = "localhost";

@Rule
public TestName testName = new TestName();

@BeforeClass
public static void start () throws IOException {
    SERVICE.execute(new SimpleServer(PORT));
}

@AfterClass
public static void end () throws IOException {
    new SimpleClient(LOCALHOST, PORT).open().bye();
}

@ThisTestWillFail
@Test
public void send2times () throws IOException {
    SimpleClient client = new SimpleClient(LOCALHOST, PORT).open();

    assertThat(client.sendMessage("hello"), is("hello"));
    assertThat(client.sendMessage("good-bye"), is("good-bye"));
}
</code></pre>

<p>}
```</p>

<p>```
java.net.SocketException: Broken pipe</p>

<pre><code>at java.net.SocketOutputStream.socketWrite0(Native Method)
at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109)
at java.net.SocketOutputStream.write(SocketOutputStream.java:132)
at java.io.DataOutputStream.writeBytes(DataOutputStream.java:276)
at org.mikeneck.multithreads.SimpleClient.sendMessage(SimpleClient.java:31)
at org.mikeneck.multithreads.SendManyMessages.send2times(SendManyMessages.java:37)
</code></pre>

<p>```</p>

<p>うん、まあ、今回は別になんか状態を持つようなサーバーを作りたいわけではないし、</p>

<p>そういうサーバーを作りたい場合は、まあ、そういう工夫をすればいいということだけ覚えておこう。</p>

<p>なお、他に書いたテストもありますが、</p>

<p>面倒なので、gistにあげておきました。</p>

<p><a href="https://gist.github.com/mike-neck/5649095">こちらをどうぞ</a></p>

<p><script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
</feed>
