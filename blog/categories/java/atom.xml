<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-08-20T18:18:23+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JJUG LT大会で話した内容の要点]]></title>
    <link href="http://mike-neck.github.io/blog/2013/08/19/jjug-ltda-hui-dehua-sitanei-rong-falseyao-dian/"/>
    <updated>2013-08-19T21:27:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/08/19/jjug-ltda-hui-dehua-sitanei-rong-falseyao-dian</id>
    <content type="html"><![CDATA[<p><img src="http://googledrive.com/host/0B4hhdHWLP7RRUDdMU0xjS3NKTG8" style="width : 400px;"/></p>

<p>こんにちわ、みけです。</p>

<p>昨日(2013/08/19)に開催されたJJUGのLT大会でLTをしてきました。</p>

<p>LTの内容ですが、</p>

<p>ネタLTとしては大成功(?)でしたが、</p>

<p>まあJavaのLTとしては疑問符が残るものを発表しました。</p>

<p>とりあえず、JavaFXの部分だけ抽出して書きたいと思います。</p>

<h2>要望・仕様</h2>

<p>ウケ狙いをしたLTの「冒険者の広場』のページについて、次のような要望・仕様になっています。</p>

<ul>
<li>定期的にWebの情報を取得したい</li>
<li>Web APIが公開されていない</li>
<li>リンク先のURLがJavascriptでのクリックにバインドされた関数に記載されている</li>
</ul>


<h2>スクレイピングツールの候補</h2>

<p>Javaで利用できるスクレイピングツールおよびブラウザーは次のものが主に挙げられます</p>

<ul>
<li>NekoHTML/Jsoup</li>
<li>HtmlUnit</li>
<li>Selenium</li>
<li>JavaFXのWebEngine</li>
</ul>


<h3>NekoHtml</h3>

<p>Java1.3以降から使えるHTMLパーサーです。</p>

<p>古くてかつ最近は更新が遅いようです。</p>

<p>最新のHTMLをパースするのには向いていません。</p>

<p>パースするだけなのでJavascriptの実行はできません。</p>

<p>したがって、採用しませんでした。</p>

<h3>Jsoup</h3>

<p>HTML5のタグにも対応したHTMLパーサーです。</p>

<p>要素の取得などは非常に便利なのですが、</p>

<p>これもHTMLをパースするだけでJavascriptの実行はできません。</p>

<p>したがって、採用しませんでした。</p>

<h3>HtmlUnit</h3>

<p>NekoHtmlをHTMLパーサーとして利用したヘッドレスブラウザーです。</p>

<p>Javascriptの実行にRhinoを使っています。</p>

<p>僕自信の目的にはこれで十分な機能だったのですが、</p>

<p>残念ながら『冒険者の広場』を表示しようとしたら、</p>

<p>Javascriptエラーが発生したので、</p>

<p>採用しませんでした。</p>

<h3>Selenium</h3>

<p>言わずと知れたFireFoxの自動実行ツールです。</p>

<p>ブラウザの操作を覚えさせることも可能なため、</p>

<p>比較的スクリプトを作るのが楽です。</p>

<p>しかし、個人的にはブラウザーがポコポコ立ち上がるのが</p>

<p>好きでないので採用しませんでした。</p>

<h3>JavaFXのWebEngine</h3>

<p>レンダリングエンジンにWebKitを採用したブラウザーです。</p>

<p>Javascriptの実行にRhinoが使われています。</p>

<p>JavaFXのアプリケーション側からJavascriptの実行も指示することができます。</p>

<p>好みであれば画面を立ち上げることなしに実行できます。</p>

<p>特に文句をつけるところもないので採用しました。</p>

<h2>JavaFXをヘッドレスブラウザーとして使う時のやり方</h2>

<h3><code>Application</code>を継承したクラス</h3>

<p>JavaFXのアプリケーションですので、<code>Application</code>クラスを継承したクラスを作成します。</p>

<p>```java DqxWebDriver.java
public class DqxWebDriver extends Application {</p>

<pre><code>private static WebEngine engine;
private static final String URL = "…";
@Override
public void start(Stage stage) {
    engine = new WebEngine();
    engine.load(URL);
}
</code></pre>

<p>}
```</p>

<p>ここでのポイントは2つです。</p>

<ul>
<li><code>start</code>メソッドの中で<code>WebEngine</code>のインスタンスを生成すること</li>
<li>特に画面を表示する必要がないので、<code>stage.show()</code>を実行しないこと</li>
</ul>


<h3>JavaFXの起動と終了</h3>

<p><code>Application.launch(Class&lt;? extends Application&gt;)</code>を実行すればいいのですが、</p>

<p>これを実行するとJavaFXアプリケーションを実行している間は</p>

<p>何もできなくなるため、別のスレッドで実行する必要があります。</p>

<p>```java Bazaar.java
ExecutorService service = Executors.newFixedThreadPool(1);
service.submit(new Runnable(){</p>

<pre><code>@Override
public void run() {
    Application.launch(DqxWebDriver.class);
}
</code></pre>

<p>});
// Do some operation
Platform.exit();
service.shutdown();
```</p>

<p>JavaFXの終了には<code>Platform.exit()</code>を実行します。</p>

<p>これによりJavaアプリケーション自体が起動したままになるのを防ぐことができます。</p>

<h3>Javascriptの実行</h3>

<p><code>WebEngine</code>の<code>executScript(String)</code>を実行します。</p>

<p>```java DqxWebDriver.java
private static WebEngine engine;
public static void executeScript(</p>

<pre><code>    final String script,
    final BlockingQueue&lt;Object&gt; queue) {
Platform.runLater(new Runnable(){
    Object result = engine.executScript();
    queue.put(result);
});
</code></pre>

<p>}
```</p>

<p><code>WebEngine</code>の操作はJavaFXのApplication Threadから実行しなければなりません。</p>

<p>そのために、<code>Platform.runLater(Runnable)</code>を介して実行する必要があります。</p>

<p>引数は<code>Runnable</code>のために、戻り値を利用することができません。</p>

<p>そのために、<code>BlockingQueue&lt;T&gt;</code>を使っています。</p>

<p><code>WebEngine#executeScript(String)</code>の戻り値をここでは<code>Object</code>として利用していますが、</p>

<p>戻り値は実際には次のようにマッピングされます。</p>

<table style="border-collapse : collapse;">
<tr><th style="border : solid 1px #039; margin : 2px;">Javascriptでの型</th><th style="border : solid 1px #039; margin : 2px;">Javaでの型</th></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">boolean</td><td style="border : solid 1px #039; margin : 2px;">Boolean</td></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">number(整数値)</td><td style="border : solid 1px #039; margin : 2px;">Integer</td></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">number(少数値)</td><td style="border : solid 1px #039; margin : 2px;">Double</td></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">string</td><td style="border : solid 1px #039; margin : 2px;">String</td></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">object</td><td style="border : solid 1px #039; margin : 2px;">netscape.javascript.JSObject</td></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">function</td><td style="border : solid 1px #039; margin : 2px;">netscape.javascript.JSObject</td></tr>
<tr><td style="border : solid 1px #039; margin : 2px;">null</td><td style="border : solid 1px #039; margin : 2px;">null</td></tr>
</table>


<p>Javascriptでの配列は<code>object</code>ですので、JSObjectにマッピングされます。</p>

<p><code>JSObject</code>のあ使い方ですが、<code>getMember(String)</code>と<code>getSlot(int)</code>を用いて値にアクセスします。</p>

<h4>getMemberメソッド</h4>

<p><code>{hoge : "hoge", foo : 10}</code>というオブジェクトの場合、</p>

<p>次のように<code>getMember(String)</code>メソッドを使用して値を取り出します。</p>

<p><code>java
String hoge = (String)object.getMember("hoge");
int foo = (int)object.getMember("foo");
</code></p>

<h4>getSlotメソッド</h4>

<p><code>[1,2,3,4,5]</code>という配列の場合、</p>

<p>次のように<code>getSlot(int)</code>メソッドを用いて値を取り出します。</p>

<p><code>java
int one = (int)object.getSlot(0);
int two = (int)object.getSlot(1);
int five = (int)object.getSlot(4);
</code></p>

<h3>WebEngineの同期</h3>

<p>先ほど書いたように、WebEngineへの操作は別スレッドで実行することになりますが、</p>

<p>さらにJavaFX ApplicationスレッドとWebEngineは異なるスレッドで実行されています。</p>

<p>したがって、WebEngineの動作に合わせてアプリケーションの実行をしたいシーンが発生すると思います。</p>

<p>その場合、<code>getLoadWorker</code>メソッドで<code>Worker</code>を取得して、<code>getState</code>にて</p>

<p>WebEngineの状態を確認する必要があります。</p>

<p>```java DqxWebDriver.java
private static WebEngine engine;
public static Worker.State getEngineState() {</p>

<pre><code>final BlockingQueue&lt;Worker.State&gt; queue = new BlockingQueue&lt;&gt;();
Platform.runLater(new Runnable(){
    @Override
    public void run() {
        queue.put(engine.getLoadWorker().getState());
    }
});
</code></pre>

<p>}
```</p>

<p>この結果が<code>Worker.State.RUNNING</code>の間は、</p>

<p>Javascriptの実行などをしているため、</p>

<p>戻り値を利用するなどのアプリケーション操作はできません。</p>

<p>したがって、<code>Thread.sleep(long)</code>等で停止しておくとよいでしょう。</p>

<p>```java DqxWebDriver.java
public static void waitForEngine() {</p>

<pre><code>Worker.State state = Worker.State.RUNNING;
while(state.equals(Worker.State.RUNNING)) {
    Thread.sleep(100l);
    state = getEngineState();
}
</code></pre>

<p>}
```</p>

<h2>おわり</h2>

<p>以上が昨日全くもって話しえなかったことです。</p>

<p>スレッド周りが非常に面倒な感じがしますが、</p>

<p>慣れればあとはJavascriptを好きに実行できるので、</p>

<p>WebアプリでのJavascriptのテストなどで活用できたりします。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFXをヘッドレスブラウザーとして使うための基本テク #javafx]]></title>
    <link href="http://mike-neck.github.io/blog/2013/07/02/one-of-techniques-to-use-javafx-as-headless-browser/"/>
    <updated>2013-07-02T10:28:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/07/02/one-of-techniques-to-use-javafx-as-headless-browser</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>JavaFXをヘッドレスブラウザーとして使おうとして、</p>

<p>いろいろとWebのリダイレクトにハマりまくっています。</p>

<p>で、今回はJavaFXをJavaFXのスレッド以外のスレッドから扱うTipsを集めました。</p>

<h2>Goal</h2>

<h4>期待していいこと</h4>

<ul>
<li>JavaFXの操作をJavaFXの外からする方法</li>
</ul>


<h4>期待してはいけないこと</h4>

<ul>
<li>GUIプログラミングの云々かんぬん</li>
</ul>


<h2>Basics</h2>

<p>JavaFXのアプリケーションのサンプル的な起動方法は次のとおりです。</p>

<p>```java SampleApplication.java
import javafx.application.Application;
import javafx.stage.Stage;
// この中のmainメソッドからアプリケーションを起動しちゃう
public class SampleApplication extends Application {</p>

<pre><code>public static void main(String... args) {
    Application.launch(SampleApplication.class);
}
@Override
public void start(Stage stage) throws Exception {
    // do something.
}
</code></pre>

<p>}
```</p>

<p>さて、この方法を採用している限りにおいては、</p>

<p>JavaFXのスレッドがどうのこうのでハマることはありません。</p>

<p>今回のテーマはJavaFXアプリケーションの外と内をわけることにあります。</p>

<p>JavaFXアプリケーションはバックグラウンドで実行します。</p>

<p>そのためには<code>java.util.concurrent.ExecutorService</code>を用います。</p>

<p>```java ApplicationLauncher.java
import javafx.application.Application;
import javafx.application.Platform;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
// 先ほどのSampleApplicationを起動します。
public class ApplicationLauncher {</p>

<pre><code>private static final ExecutorService SERVICE =
        Executors.newFixedThreadPool(1);
public static void main(String... args) {
    // launch application
    SERVICE.submit(new Runnable(){
        @Override
        public void run() {
            Application.launch(SampleApplication.class);
        }
    });
    // do something
    // shutdown application
    Platform.exit();
    SERVICE.shutdown();
}
</code></pre>

<p>}
```</p>

<h2><code>Platform#RunLater(java.lang.Runnable)</code></h2>

<p>JavaFX上でのみ動作するオブジェクトへの操作は<code>Platform#runLater(java.lang.Runnable)</code>を</p>

<p>通じて行います。</p>

<p>```java ControllerStimulation.java
import javafx.application.Platform;
public class ControllerStimulation {</p>

<pre><code>// JavaFXのcontrollerクラスのインスタンス
private SampleController controller;
// Platform#runLater(Runnable)を通じてcontrollerクラスへの操作を行う。
public void simulateClickButton () {
    Platform.runLater(new SimulateClickButton());
}
// 実際にcontrollerクラスを操作するRunnable
private class SimulateClickButton implements Runnable {
    @Override
    public void run () {
        controller.clickButton(null);
    }
}
</code></pre>

<p>}
```</p>

<h2>戻り値を利用したい場合</h2>

<p>御存知の通り、<code>java.lang.Runnable#run()</code>は値を返しませんので、</p>

<p>値の受け渡しには<code>java.util.concurrent.BlockingQueue&lt;T&gt;</code>を使うことになります。</p>

<p><code>Platform#runLater</code>が<code>java.util.concurrent.Callable&lt;T&gt;</code>を引数にとって、</p>

<p><code>java.util.concurrent.Future&lt;T&gt;</code>を返してくれるといいんですけどね…</p>

<p>```java JavascriptExecution.java
import javafx.application.Platform;
import javafx.scene.web.WebEngine;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
public class JavascriptExecution {</p>

<pre><code>// controllerクラスのインスタンス
private SampleController controller;
public String callJavascript(String javascript) {
    final BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;&gt;();
    Platform.runLater(new CallJavascript(queue, javascript));
    try {
        String result = queue.take();
        return result;
    } catch(InterruptedException e) {
        throw new RuntimeException(e);
    }
}
private class CallJavascript implements Runnable {
    private final BlockingQueue&lt;String&gt; queue;
    private final String script;
    CallJavascript(final BlockingQueue&lt;String&gt; queue, String script) {
        this.queue = queue;
        this.script = script;
    }
    @Override
    public void run() {
        WebEngine engine = controller.getEngine();
        String result = (String) engine.executeScript(script);
        try {
            queue.put(result);
        } catch(InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre>

<p>}
```</p>

<p>実際はJavascriptなどでエラーがあると、<code>netscape.javascript.JSException</code>がthrowされるので、</p>

<p><code>Platform#runLater(java.lang.Runnable)</code>で<code>java.lang.RuntimeException</code>を検知して、</p>

<p>Applicatoinを終了させるような仕組みを組み込んでおくことが望まれるのですが、</p>

<p>それはここでの話を逸脱するし、誰得な気がするので、</p>

<p>やめておく…</p>

<p>以下、実際に僕が書いているコード</p>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRQVYweDh2QU1LVk0" target="_blank"><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRQVYweDh2QU1LVk0" style="width : 450px;"></a></p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaFXをheadless browserとして使うためのJSObjectの扱い方 - 1]]></title>
    <link href="http://mike-neck.github.io/blog/2013/07/01/using-javafx-as-headless-browser/"/>
    <updated>2013-07-01T13:03:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/07/01/using-javafx-as-headless-browser</id>
    <content type="html"><![CDATA[<p>こんにちわ。</p>

<p>みけです。</p>

<p>JavaFXでjavascriptのテスティングフレームワークを作ろうと思ってから、</p>

<p>早1年半。</p>

<p>全然成果があがっていません。</p>

<p>今日は、そんな自分のための俺得なエントリー。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRbkltQVpjMUkzNE0" style="width : 450px;"/></p>

<h2>Goal</h2>

<h4>期待していいこと</h4>

<ul>
<li>JSObjectでのarrayの取り扱い</li>
</ul>


<h4>期待できないこと</h4>

<ul>
<li>JavaFXのスレッドの同期方法</li>
<li>JSObjectでのobjectの取り扱い</li>
</ul>


<h2>JSObjectの扱い方 &ndash; array編</h2>

<p><code>JSObject#getSlot(int)</code>を使ってarrayの要素を取得します。</p>

<p>```java
final String script = &ldquo;(function(){return [&lsquo;a&rsquo;, 2, &lsquo;c&rsquo;, 4, &lsquo;e&rsquo;];})()&rdquo;;
final BlockingQueue<JSObject> queue = new LinkedBlockingQueue&lt;>();
Platform.runLater(() &ndash;> {</p>

<pre><code>queue.put((JSObject) webEngine.executeScript(script));
</code></pre>

<p>});
JSObject array = queue.take();
for (int i = 0; i &lt; 5; i++) {</p>

<pre><code>System.out.println(i + " -&gt; " + array.getSlot(i));
</code></pre>

<p>}
```</p>

<p>結果は次のようになります。</p>

<p><code>
0 -&gt; a
1 -&gt; 2
2 -&gt; c
3 -&gt; 4
4 -&gt; e
</code></p>

<p>ちなみに要素のindexより多い数を<code>JSObject#getSLot(int)</code>の引数に渡すと、</p>

<p><code>String</code>の<code>undefined</code>が返ってきます。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一回渋谷javaに行ってきた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/30/first-shibuya-java/"/>
    <updated>2013-06-30T15:05:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/30/first-shibuya-java</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/40140">第一回渋谷java</a>というのに行って来ました。</p>

<p>javaの勉強会としては比較的若い人の集まった勉強会だったと思います。</p>

<hr />

<p>自己紹介で「好きなEclipseのショートカットは？」とか聞かれたので、</p>

<p>相変わらずのことで「Eclipse氏ね」と答えて来ました。</p>

<p>後、Eclipseの代替するエディターがvimだったので、</p>

<p>いや、IntelliJ IDEAですからとも自己紹介しておきました。</p>

<hr />

<p>一応タイトルはネタっぽいですが、</p>

<p>真面目な話をして来ました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/23694003" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<hr />

<p>他の参加者のブログがいくつかあるようです。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/jflute/20130629/1372519117">新たなるJavaの風景、渋谷javaがスタート！</a></li>
<li><a href="http://blog.k11i.biz/2013/06/java.html">第１回 #渋谷Java でトークしてきました</a></li>
<li><a href="http://hotchemi.hateblo.jp/entry/2013/06/29/230427">第1回渋谷Javaに行ってきた</a></li>
</ul>


<p>あと、いくつかスライドがアップロードされています。</p>

<p>JavaとOSS &ndash; ユーザーサイドから語ってみる</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/23660334" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/commonplace0807/java-23660334" title="渋谷Java第一回" target="_blank">渋谷Java第一回</a> </strong> from <strong><a href="http://www.slideshare.net/commonplace0807" target="_blank">commonplace0807</a></strong> </div></p>

<hr />

<p>今回は初回ということでLTだけでしたが、ハンズオンなども実施していくとのことです。</p>

<p>Eclipse強制されるのでなければ、行こうかなと思います。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8 lambda式を使ってみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/27/java8-lambdashi-woshi-tutemita/"/>
    <updated>2013-06-27T22:24:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/27/java8-lambdashi-woshi-tutemita</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>Java8初心者勉強会というのを開催してみました。</p>

<p>参加者2人でした。</p>

<p>Java8はだれも興味ないんだなと思いました。</p>

<h2>Java8のラムダ式</h2>

<p>特にもうこれといって目新しいこともありません。</p>

<p>メソッドが一つだけのインターフェースを記述するときに、</p>

<p>非常に記述が楽になるというものです。</p>

<p>例えば次のようなクラスがあるとします。</p>

<p>```java Item.jara
public class Item {</p>

<pre><code>final String name;
final int price;
public Item(String name, int price) {
    this.name = name;
    this.price = price;
}
public String getName() {
    return name;
}
public int getPrice() {
    return price;
}
</code></pre>

<p>}
```</p>

<p>上記の<code>Item</code>クラスを<code>price</code>の昇順、<code>name</code>の昇順でソートするコードは以下のようになります。</p>

<p>```java
List<Item> items = getItemList();
items.sort((left, right) &ndash;> {</p>

<pre><code>int priceOrder = left.getPrice() - right.getPrice();
int nameOrder = left.getName().
        compareTo(right.getNmae());
return priceOrder != 0? priceOrder : nameOrder;
</code></pre>

<p>});
```</p>

<p>ところで、<code>Item</code>クラスの<code>price</code>だとか<code>name</code>だとかについて、</p>

<p>それをソートするという操作は別に外のクラスが実装しても構わないけど、</p>

<p><code>Item</code>クラスが持っている方が何かと便利です。</p>

<p>したがって、オーダーするにあたって、<code>Item</code>クラスに次のようなメソッドを</p>

<p>持たせるようにします。</p>

<p>```java Item.java
public class Item {</p>

<pre><code>final String name;
final int price;
// 途中省略
public int comparePriceAscNameAsc (Item that) {
    int priceOrder = this.price - that.price;
    return priceOrder != 0 priceOrder :
            this.name.compareTo(that.name);
}
</code></pre>

<p>}
```</p>

<p>先ほどのソートをするコードのラムダ式部分は非常に簡単化されます。</p>

<p><code>java
items.sort((left, right) -&gt; left.comparePriceAscNameAsc(right));
</code></p>

<p>ところで、呼び出されるメソッドはこのケースの場合わかりきっているので、</p>

<blockquote><p>TODO : この記述は適当に書いているのでドキュメントを読み直します</p></blockquote>

<p>Method Referenceに変更することが可能です。</p>

<p><code>java
items.sort(Item::comparePriceAscNameAsc)
</code></p>

<p>という感じで、ラムダ式っぽい記述はなくなりました。</p>

<p>ちなみにMethod and Constructor Referenceは<a href="http://cr.openjdk.java.net/~dlsmith/jsr335-0.6.1/C.html">Lambdaの仕様の一部</a>です。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
</feed>
