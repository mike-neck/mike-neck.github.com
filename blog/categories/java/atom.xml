<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-05-25T22:49:55+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaではじめてSocketプログラムを書いてみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita/"/>
    <updated>2013-05-25T21:13:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p>jjugのメーリングリストにconcurrentに関する質問が着ていたので、</p>

<p>答えようと思ってみたんですが、</p>

<p>Socketを使ったプログラムで、</p>

<p><strong>そういえば僕、Socketを使ったプログラム書いたこと無いな</strong></p>

<p>と思い至り、書いてみることにしました。</p>

<h2>SocketServerのほう</h2>

<p><code>java.net.ServerSocket</code>を使って書くようです。</p>

<p>```java SimpleServer.java
package org.mikeneck.socket;</p>

<p>import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;</p>

<p>/<em>*
 * @author mike_neck
 </em>/
public class SimpleServer implements Runnable {</p>

<pre><code>private final ServerSocket serverSocket;

public SimpleServer(int port) throws IOException {
    serverSocket = new ServerSocket(port);
}

@Override
public void run() {
    while(true) {
        try (Socket socket = serverSocket.accept();
             BufferedReader reader = new BufferedReader(
                 new InputStreamReader(socket.getInputStream()));
             PrintStream writer = new PrintStream(socket.getOutputStream())
        ) {
            String line = reader.readLine();
            writer.println(line);
            if (line.equals("BYE")) {
                break;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>}
```</p>

<h2>SocketClientのほう</h2>

<p>クライアントアプリケーションの方は<code>java.net.Socket</code>を用いるようです。</p>

<p>```java SimpleClient.java
package org.mikeneck.multithreads;</p>

<p>import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;</p>

<p>/<em>*
 * @author mike_neck
 </em>/
public class SimpleClient implements AutoCloseable {</p>

<pre><code>private final Socket socket;

private DataOutputStream output;

private BufferedReader input;

public SimpleClient(String hostname, int port) throws IOException {
    socket = new Socket(hostname, port);
}

public SimpleClient open () throws IOException {
    output = new DataOutputStream(socket.getOutputStream());
    input = new BufferedReader(
        new InputStreamReader(socket.getInputStream()));
    return this;
}

public String sendMessage(String message) throws IOException {
    output.writeBytes(message + '\n');
    String line;
    if ((line = input.readLine()) != null) {
        return line;
    } else {
        return "";
    }
}

public void bye () throws IOException {
    output.writeBytes("BYE\n");
}

@Override
public void close() throws Exception {
    if (!socket.isClosed()) {
        socket.close();
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<h2>SocketServerでの疑問</h2>

<p>と、まあ簡単なプログラムを書いたのですが、</p>

<p>二回メッセージを送る場合はどうなるのかとか、疑問が残りますね。</p>

<p>で、テストを書くわけですが…</p>

<p>案の定落ちました。</p>

<p>```java SendManyMessages.java
// import とか packageとか省略
public static class SendManyMessages {</p>

<pre><code>private static final ExecutorService SERVICE = Executors.newFixedThreadPool(1);

private static final int PORT = 14541;

private static final String LOCALHOST = "localhost";

@Rule
public TestName testName = new TestName();

@BeforeClass
public static void start () throws IOException {
    SERVICE.execute(new SimpleServer(PORT));
}

@AfterClass
public static void end () throws IOException {
    new SimpleClient(LOCALHOST, PORT).open().bye();
}

@ThisTestWillFail
@Test
public void send2times () throws IOException {
    SimpleClient client = new SimpleClient(LOCALHOST, PORT).open();

    assertThat(client.sendMessage("hello"), is("hello"));
    assertThat(client.sendMessage("good-bye"), is("good-bye"));
}
</code></pre>

<p>}
```</p>

<p>```
java.net.SocketException: Broken pipe</p>

<pre><code>at java.net.SocketOutputStream.socketWrite0(Native Method)
at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109)
at java.net.SocketOutputStream.write(SocketOutputStream.java:132)
at java.io.DataOutputStream.writeBytes(DataOutputStream.java:276)
at org.mikeneck.multithreads.SimpleClient.sendMessage(SimpleClient.java:31)
at org.mikeneck.multithreads.SendManyMessages.send2times(SimpleSocketTest.java:37)
</code></pre>

<p>```</p>

<p>うん、まあ、今回は別になんか状態を持つようなサーバーを作りたいわけではないし、</p>

<p>そういうサーバーを作りたい場合は、まあ、そういう工夫をすればいいということだけ覚えておこう。</p>

<p>なお、他に書いたテストもありますが、</p>

<p>面倒なので、gistにあげておきました。</p>

<p><a href="https://gist.github.com/mike-neck/5649095">こちらをどうぞ</a></p>
]]></content>
  </entry>
  
</feed>
