<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: groovy | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-05-26T22:12:43+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gradleとJUnitのEnclosedの話]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/25/an-falseding-xian-nihamatutetaren-gaitagradletojunitfalseenclosedfalsehua/"/>
    <updated>2013-05-25T23:19:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/25/an-falseding-xian-nihamatutetaren-gaitagradletojunitfalseenclosedfalsehua</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p><a href="http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita/">先ほど書いたエントリー</a>でテストをgradleで走らせたのですが、</p>

<blockquote class="twitter-tweet" lang="ja"><p>gradleでテストした時に謎のclassMethodとかいうテストが勝手に挟み込まれて、落ちて困っている</p>&mdash; もちださんさん (@mike_neck) <a href="https://twitter.com/mike_neck/status/338275875294441472">2013年5月25日</a></blockquote>


<script async src="http://mike-neck.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>という状態が発生してました。</p>

<p>具体的には、</p>

<p>```java
package org.mikeneck.multithreads;</p>

<p>import org.junit.*;
import org.junit.experimental.runners.Enclosed;
import org.junit.rules.TestName;
import org.junit.runner.RunWith;</p>

<p>import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;</p>

<p>import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;</p>

<p>/<em>*
 * @author mike
 </em>/
@RunWith(Enclosed.class)
public class SimpleSocketTest {</p>

<pre><code>public static class SingleClient {

    private static final ExecutorService SERVICE = Executors.newFixedThreadPool(1);

    private static final int PORT = 12521;

    private static final String LOCALHOST = "localhost";

    private SimpleClient client;

    @Rule
    public TestName testName = new TestName();

    @BeforeClass
    public static void start () throws IOException {
        SERVICE.execute(new SimpleServer(PORT));
    }

    @Before
    public void setup () throws IOException {
        client = new SimpleClient(LOCALHOST, PORT);
    }

    @After
    public void tearDown () throws Exception {
        System.out.println(testName.getMethodName() + " is closing");
        client.close();
    }

    @AfterClass
    public static void end () throws IOException {
        new SimpleClient(LOCALHOST, PORT).open().bye();
    }

    @Test
    public void socketProcessing () throws IOException {
        client.open();
        String message = client.sendMessage("Hello");
        System.out.println("Message from Server [" + message + "]");
        assertThat(message, is("Hello"));
        System.out.println("Assertion ends.");
    }
}
</code></pre>

<p>}
```</p>

<p>というテストに対して、</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRaS15VXNZRTNVWUU" style="width : 424px; height : 262px;" /></p>

<p>という感じで、謎の<code>classMethod</code>というテストが追加されていて、</p>

<p>実行されてテストが落ちてしまうようです。</p>

<h2>先駆者はいた</h2>

<p>とりあえず、<code>gradle</code>、<code>Enclosed</code>、<code>Junit</code>でググっていたところ、</p>

<p>次の二つのエントリーを発見しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/irof/20120430/p1">GradleでEnclosedのテストが二回実行されるんだ</a></li>
<li><a href="http://d.hatena.ne.jp/shuji_w6e/20120808/1344386399">GradleでEnclosedテストが2回実行されることの対策</a></li>
</ul>


<p>というわけで、<code>gradle</code>と<code>Enclosed</code>の相性がわるいっぽい…</p>

<h2>gradleでEnclosedなテストをする時の対策</h2>

<p>というわけで、<a href="https://twitter.com/shuji_w6e">@shuji_w6e</a>さんのページによると</p>

<p><strong>テストの実行時に除外クラスを指定すること。</strong></p>

<p>だそうです。</p>

<p>```groovy build.gradle
apply plugin : &lsquo;groovy&rsquo;
apply plugin : &lsquo;idea&rsquo;</p>

<p>group = &lsquo;org.mikeneck.multithreads&rsquo;
version = &lsquo;1.0&rsquo;</p>

<p>def compatibility = 1.7</p>

<p>sourceCompatibility = compatibility
targetCompatibility = compatibility</p>

<p>repositories {</p>

<pre><code>mavenCentral ()
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile 'org.codehaus.groovy:groovy-all:2.1.3'
testCompile ('junit:junit:4.11') {
    exclude module : 'hamcrest-core'
    exclude module : 'hamcrest'
}
testCompile 'org.hamcrest:hamcrest-library:1.+'
</code></pre>

<p>}</p>

<p>test {</p>

<pre><code>exclude '**/*$*'
</code></pre>

<p>}
```</p>

<p>とりあえず、テストクラスを除外してみました。</p>

<h2>結果</h2>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRczBZcy04U2tNMms" style="width : 424px; height : 252px;"" /></p>

<p>という感じで、テストが通りました。</p>

<p><script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gradle1.6からgroovyのconfigurationはdeprecatedになっています]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/22/gradle1-dot-6karagroovyfalseconfigurationhadeprecatedninatuteimasu/"/>
    <updated>2013-05-22T20:08:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/22/gradle1-dot-6karagroovyfalseconfigurationhadeprecatedninatuteimasu</id>
    <content type="html"><![CDATA[<h2>gradle1.6からgroovyのconfigurationは非推奨になっています</h2>

<p>まあ今さらですが、さきほどbuild.gradleを書いた時に、</p>

<p>```
$ gradle idea
The groovy configuration has been deprecated and is scheduled to be removed in Gradle 2.0. Typically, usages of &lsquo;groovy&rsquo; can simply be replaced with &lsquo;compile&rsquo;. In some cases, it may be necessary to additionally configure the &lsquo;groovyClasspath&rsquo; property of GroovyCompile and Groovydoc tasks.
:ideaModule
Download <a href="http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.pom">http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.pom</a>
Download <a href="http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3-sources.jar">http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3-sources.jar</a>
Download <a href="http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.jar">http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.jar</a>
:ideaProject
:ideaWorkspace
:idea</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 11.174 secs
$
```</p>

<p>と表示されたので、「うぉっ」と思ってドキュメントを読んでみました。</p>

<p><a href="http://www.gradle.org/docs/current/release-notes#groovy-configuration-is-deprecated">groovy configuration is deprecated</a></p>

<p>じゃあ、今後どうするのかというと、</p>

<h1>compile configurationにgroovyのartifactを指定する</h1>

<p>ということです。</p>

<p>つまり、これまでは</p>

<p>```groovy build.gradle
dependencies {</p>

<pre><code>groovy : 'org.codehaus:groovy:groovy-all:2.1.3'
</code></pre>

<p>}
```</p>

<p>と書いていましたが、</p>

<p>```groovy build.gradle
dependencies {</p>

<pre><code>compile : 'org.codehaus.groovy:groovy-all:2.1.3'
</code></pre>

<p>}
```</p>

<p>と書けばよいようです。</p>

<table>
<tbody>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B009X5KIFK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=3864900492" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1617291307" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</tbody>
</table>



]]></content>
  </entry>
  
</feed>
