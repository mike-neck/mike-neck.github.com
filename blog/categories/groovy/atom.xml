<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: groovy | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-06-09T10:35:25+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovyでpegdownをさわってみる]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/08/groovydepegdownwosawatutemiru/"/>
    <updated>2013-06-08T05:25:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/08/groovydepegdownwosawatutemiru</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p><img src="http://mike-neck.github.io//groovy.codehaus.org/images/groovy-logo-medium.png" style="width : 450px;"/></p>

<p>前回に引き続き、Javaのmarkdownパーサーを試してみます。</p>

<p>で、今回は</p>

<h1><a href="https://github.com/sirthias/pegdown">pegdown</a></h1>

<p>を試してみました。</p>

<p>サンプルコードは前回とほとんど変わりません。</p>

<p>```groovy pegdown-sample.groovy
@Grab(&lsquo;org.pegdown:pegdown:1.2.1&rsquo;)</p>

<p>def processor = new org.pegdown.PegDownProcessor()</p>

<p>def original = $/</p>

<h2>This is Top Header</h2>

<h1>This is second Header</h1>

<h3>This is topic</h3>

<h4>Lists Item</h4>

<p>${(1..3).collect {&ldquo;+ item${it}&rdquo;}.join(&lsquo;\n&rsquo;)}</p>

<p>and</p>

<p>${(1..3).collect {&ldquo;1. item${it}&rdquo;}.join(&lsquo;\n&rsquo;)}</p>

<h4>Links</h4>

<ul>
<li><a href="http://mike-neck.github.io/">mike-neck&rsquo;s site</a></li>
<li><a href="http://mikeneckdq.blog.fc2.com/">mike-neck&rsquo;s dq site</a></li>
<li><img src="http://groovy.codehaus.org/images/groovy-logo-medium.png" alt="groovy image" /></li>
</ul>


<h4>Html Tags</h4>

<p><img src='http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00' style='width : 400px;'></p>

<h4>Codes</h4>

<p>function <code>lists:reverse/1</code> returns a List.</p>

<p>tag <code>&lt;em&gt;</code> means emphasis</p>

<p><code>groovy
def string = 'This is groovy code.'
</code></p>

<h4>emphasis</h4>

<p><em>em?</em></p>

<p><strong>bold?</strong></p>

<h4>Blockquotes</h4>

<blockquote><p>This is a blockquotes
from here.</p></blockquote>

<p>/$</p>

<p>processor.markdownToHtml(original)
```</p>

<p>実行結果はこんな感じ。</p>

<p>```html</p>

<h2>This is Top Header</h2>


<h1>This is second Header</h1>


<h3>This is topic</h3>


<h4>Lists Item</h4>


<ul>
  <li>item1</li>
  <li>item2</li>
  <li>item3</li>
</ul>


<p>and</p>


<ol>
  <li>item1</li>
  <li>item2</li>
  <li>item3</li>
</ol>


<h4>Links</h4>


<ul>
  <li><a href="http://mike-neck.github.io/">mike-neck's site</a></li>
  <li><a href="http://mikeneckdq.blog.fc2.com/">mike-neck's dq site</a></li>
  <li><img src="http://groovy.codehaus.org/images/groovy-logo-medium.png"  alt="groovy image"/></li>
</ul>


<h4>Html Tags</h4>


<p><img src='http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00' style='width : 400px;'></p>


<h4>Codes</h4>


<p>function <code>lists:reverse/1</code> returns a List.</p>


<p>tag <code>&lt;em&gt;</code> means emphasis</p>


<p><code>groovy
def string = &#39;This is groovy code.&#39;
</code></p>


<h4>emphasis</h4>


<p><em>em?</em></p>


<p><strong>bold?</strong></p>


<h4>Blockquotes</h4>


<blockquote><p>This is a blockquotes from here.</p>
</blockquote>


<p>```</p>

<h2>markdownjとの比較</h2>

<p>markdownjではこんな不具合が有りました。</p>

<ul>
<li><code>===</code>がレンダーされない</li>
<li>上の行にテキストがある状態で'&mdash;&ndash;&lsquo;がタグ<code>&lt;tr/&gt;</code>にレンダーされる</li>
<li>当然ながら、GitHubっぽいコードスニペットはレンダーできない</li>
</ul>


<p>一方、これらのうち、</p>

<ul>
<li><code>===</code>がレンダーされない</li>
<li>上の行にテキストがある状態で'&mdash;&ndash;&lsquo;がタグ<code>&lt;tr/&gt;</code>にレンダーされる</li>
</ul>


<p>はgepdownでは解消されているようです。</p>

<p>残念ながら、</p>

<ul>
<li>当然ながら、GitHubっぽいコードスニペットはレンダーできない</li>
</ul>


<p>というのはあります。</p>

<p>というわけで、pegdownの方が、良さげな感じがします。</p>

<p><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovyでmarkdownjをさわってみる]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/07/groovydemarkdownjwosawatutemiru/"/>
    <updated>2013-06-07T21:10:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/07/groovydemarkdownjwosawatutemiru</id>
    <content type="html"><![CDATA[<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcURrSlZiNXlNVVk" style="width : 450px;"/></p>

<p>こんにちわ、みけです。</p>

<p>このブログはOCTOPRESSで作っていますが、</p>

<p>どうしてもやりたい処理があったら、</p>

<p>rubyを勉強しないとアババな感じなので、</p>

<p>Javaでも同じようなものを作ってみたいと思っています。</p>

<h1>OCTOPRESSっぽいツールに必要そうな機能</h1>

<p>はこんな感じかなと思っています。</p>

<ul>
<li>タスクを指定して実行する</li>
<li>git連携</li>
<li>previewできる</li>
<li>マークダウンをHTMLに変換する</li>
</ul>


<p>これらのうち、最初のタスクを指定して実行するはGradleでやればよさそうです。</p>

<p>git連携はJGitを使えばできそうです。</p>

<p>previewはJettyだか、nettyだか、glassfishを使えばできそうです。</p>

<p>で、最後の</p>

<h1>JavaでマークダウンをHTMLに変換する</h1>

<p>はわからないので、</p>

<p>ちょっと試して見ることにしました。</p>

<p>まず、筆頭にくる <strong>markdownj</strong> を試してみることにしました</p>

<p>```groovy markdown-sample.groovy
@Grab(&lsquo;com.madgag:markdownj-core:0.4.1&rsquo;)</p>

<p>import com.petebevin.markdown.*</p>

<p>def proc = new MarkdownProcessor()</p>

<p>def original = $/</p>

<h2>This is Top Header</h2>

<h1>This is second Header</h1>

<h3>This is topic</h3>

<h4>Lists Item</h4>

<p>${(1..3).collect {&ldquo;+ item${it}&rdquo;}.join(&lsquo;\n&rsquo;)}</p>

<p>and</p>

<p>${(1..3).collect {&ldquo;1. item${it}&rdquo;}.join(&lsquo;\n&rsquo;)}</p>

<h4>Links</h4>

<ul>
<li><a href="http://mike-neck.github.io/">mike-neck&rsquo;s site</a></li>
<li><a href="http://mikeneckdq.blog.fc2.com/">mike-neck&rsquo;s dq site</a></li>
</ul>


<h4>Html Tags</h4>

<p><img src='http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00' style='width : 400px;'></p>

<h4>Codes</h4>

<p>function <code>lists:reverse/1</code> returns a List.</p>

<p>tag <code>&lt;em&gt;</code> means emphasis</p>

<h4>emphasis</h4>

<p><em>em?</em></p>

<p><strong>bold?</strong></p>

<h4>Blockquotes</h4>

<blockquote><p>This is a blockquotes
from here.</p></blockquote>

<p>/$</p>

<p>proc.markdown(original)
```</p>

<p>これの結果は次のようになります。</p>

<p>```html</p>

<p>This is Top Header
<hr /></p>




<p>This is second Header
===</p>




<h3>This is topic</h3>




<h4>Lists Item</h4>




<ul>
<li>item1</li>
<li>item2</li>
<li>item3</li>
</ul>




<p>and</p>




<ol>
<li>item1</li>
<li>item2</li>
<li>item3</li>
</ol>




<h4>Links</h4>




<ul>
<li><a href="http://mike-neck.github.io/">mike-neck's site</a></li>
<li><a href="http://mikeneckdq.blog.fc2.com/">mike-neck's dq site</a></li>
</ul>




<h4>Html Tags</h4>




<p><img src='http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00' style='width : 400px;'></p>




<h4>Codes</h4>




<p>function <code>lists:reverse/1</code> returns a List.</p>




<p>tag <code>&lt;em&gt;</code> means emphasis</p>




<h4>emphasis</h4>




<p><em>em?</em></p>




<p><strong>bold?</strong></p>




<h4>Blockquotes</h4>




<blockquote>
  <p>This is a blockquotes
  from here.</p>
</blockquote>


<p>```</p>

<p>今のところ、残念な点は</p>

<ul>
<li><code>===</code>がレンダーされない</li>
<li>上の行にテキストがある状態で'&mdash;&ndash;&lsquo;がタグ<code>&lt;tr/&gt;</code>にレンダーされる</li>
<li>当然ながら、GitHubっぽいコードスニペットはレンダーできない</li>
</ul>


<p>ちょっと残念なので、</p>

<p>他のマークダウンパーサーも試してみようと思います。</p>

<p><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEAのJetGradleの使い方]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/06/intellij-ideafalsejetgradlefalseshi-ifang/"/>
    <updated>2013-06-06T02:55:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/06/intellij-ideafalsejetgradlefalseshi-ifang</id>
    <content type="html"><![CDATA[<p><a href="http://www.jetbrains.com/idea/features/javascript.html" style="display:block; background:#0d3a9e url(http://www.jetbrains.com/idea/opensource/img/all/banners/idea468x60_blue.gif) no-repeat 0 7px; border:solid 1px #0d3a9e; margin:0;padding:0;text-decoration:none;text-indent:0;letter-spacing:-0.001em; width:466px; height:58px" alt="Java IDE with advanced HTML/CSS/JS editor for hardcore web-developers" title="Java IDE with advanced HTML/CSS/JS editor for hardcore web-developers"><span style="margin: 5px 0 0 61px;padding: 0;float: left;font-size: 12px;cursor:pointer;  background-image:none;border:0;color: #acc4f9; font-family: trebuchet ms,arial,sans-serif;font-weight: normal;text-align:left;">Can’t live without</span><span style="margin:0 0 0 205px;padding:18px 0 2px 0; line-height:13px;font-size:11px;cursor:pointer;  background-image:none;border:0;display:block; width:255px; color: #acc4f9; font-family: trebuchet ms,arial,sans-serif;font-weight: normal;text-align:left;">Smart Java and Groovy IDE<br/> with powerfull refactoring and code assistance.</span></a></p>

<p>こんにちわ、みけです。</p>

<p>いや、もう表題の件に関しては、</p>

<p>いろんなブログで既出なんですけど、
(と思ってググったら、あまりなかった(´・ω・｀))</p>

<p>僕もよくわかってなかったので、</p>

<p>使ってみたときのメモを書いとくことにしました。</p>

<h2>JetGradleってそもそも何よ？</h2>

<p>IntelliJ IDEAに最初からバンドルされているgradleのサポートプラグインです。</p>

<p>では使い方を見て行きましょう。</p>

<h3>(1)JetGradleタブを開きます。</h3>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00" style="width : 420px;" /></p>

<p>画面右下の方にちょこんとある、<strong>JetGradle</strong>タブをクリックして開きます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRMEw3b0I1OEo0azA" style="width : 420px;"/></p>

<h3>(2) Addアンカーをクリックして、build.gradleファイルを割り当てます。</h3>

<p>ダイアログが出るので、今のプロジェクトのgradleファイルを割り当てます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRS0xDejBZWmo4ekk" style="width : 280px;" /></p>

<p>build.gradleファイルを選択するとこんなかんじになります。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRS1FjS0VhU3BKMTQ" style="width : 420px;" /></p>

<h3>(3) Taskタブをクリックします。</h3>

<p>残念ながらこの段階ではタスク一覧が表示されません。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRN0xMWnpkNVFOS1E" style="width : 420px;" /></p>

<h3>(4) 更新ボタンをクリックします。</h3>

<p>先ほどのタブの左上の方にある更新ボタンをクリックします。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRZ051S3NqcEJXQkU" style="width : 420px;" /></p>

<p>するとIntelliJがgradle┏( ^o^)┓ﾄﾞｺﾄﾞｺﾄﾞｺﾄﾞｺ┗( ^o^)┛ﾄﾞｺﾄﾞｺﾄﾞｺﾄﾞｺと聞いてきます。
(AA はテキトー)</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcWI4dXkwTENHam8" style="width : 420px;" /></p>

<p>右下の方にある、<code>Gradle settings</code>アンカーをクリックします。</p>

<h3>(5) GRADLE_HOMEを設定します。</h3>

<p>こんなダイアログが表示されます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRVHpuOTl5S09XUFk" style="width : 280px;"/></p>

<p>僕はgradleのインストールをgvmでやっているので、</p>

<p>どこに<code>GRADLE_HOME</code>があるのかよくわからんので、
(覚えろよjk)</p>

<p>とりあえず、ターミナルで確認します。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcVgtcU5JMmo3NlU" style="width : 280px;" /></p>

<p><code>GRADLE_HOME</code>の値をコピペします。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdFV5cDB0d2IyUzA" style="width : 280px;" /></p>

<p>OKボタンをクリックすると、IntelliJがgradleファイルの読み込みを始めます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRY19neTRiY2Njd2M" style="width : 450px;" /></p>

<p>読み込みが完了すると、タスク一覧が表示されます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcU9JTnpHanlHNGM" style="width : 450px;" /></p>

<h3>(6)JetGradleからタスクを実行してみる</h3>

<p>とりあえず、テストを実行してみたいと思います。</p>

<p>タスク一覧から実行したいタスクを選択します。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRbGNhODNIOWFBd1U" style="width : 450px;" /></p>

<p>ここでは<code>test</code>タスクを実行したいので、</p>

<p><code>test</code>タスクを選択しています。</p>

<p>選択したタスクを長押し(Windowsの場合は右クリック)して、</p>

<p>実行する方法(デバッグとかrunとか)を選択します。</p>

<p>ここではRunを選択します。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRUFhIa2RhVDF0QlE" style="width : 450px;" /></p>

<p>テストが実行されました。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRT0JoWjlKZXRyRWM" style="width : 450px;" /></p>

<p>これで、一々IDEからターミナルに移動して</p>

<p><code>
$ gradle test
</code></p>

<p>とか打たなくてもいいですね。</p>

<h3>(7)JetGradleの成果物はどこにあるの？</h3>

<p>これ、疑問に思ったので、</p>

<p>あえてテストをこけさせてみました。
(こうすることでテストレポートの位置を示してくれる)</p>

<p>わざと落ちるテストを書いて、</p>

<p>Recent Taskからtestをじっこうします。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRTGJOeEtoWDJBODQ" style="width : 450px;"/></p>

<p>はい、落ちました。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRTnBXcndheThEV1k" style="width : 450px;" /></p>

<p>で、テストレポートの場所を見ると、</p>

<p>ターミナルからテストを実行した時と変わらない場所に出力されていることがわかります。</p>

<p>以上、結論</p>

<h3>JetGradle便利すなー</h3>

<p><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows(7)環境でgvmをインストールする]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/02/windows-7-huan-jing-dervmwoinsutorusuru/"/>
    <updated>2013-06-02T15:28:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/02/windows-7-huan-jing-dervmwoinsutorusuru</id>
    <content type="html"><![CDATA[<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRZV9ueElsQUlYLVU" style="width : 500px"/></p>

<p>こんにちわ、みけです。</p>

<p>Windowsでのgroovyの環境構築といえば、</p>

<p>zipを落としてきて、解凍して、パスを通してといった作業をしなければならないのですが、</p>

<p>最近それが結構面倒くさいなと感じて、</p>

<p>Windowsから疎遠になっていました。</p>

<p>gvmをインストールすればいいんですが、</p>

<p>gvmのインストールコマンド</p>

<p><code>
curl -s get.gvmtool.net | bash
</code></p>

<p>はい、Windowsではできませんね。</p>

<h4>cygwin</h4>

<p>WindowsでGNUな環境を構築するといえば、cygwinですが、</p>

<p>僕は自分が認める(他人はどうだかよく知らん)情弱なので、</p>

<p>cygwin環境の構築に挫折した人です。</p>

<p>で、cygwinでgvmインストールできるよと言われても、</p>

<p>その元になるcygwinが構築できないので、</p>

<p>Windowsでgvm使えないじゃんと思っていました。</p>

<h4>mingw</h4>

<p>Windowsにはいっているmsysgitをいじっていて、</p>

<p>mingwなら構築できそうだと気づいたので、</p>

<p>やってみたら意外とできたので、</p>

<p>その作業メモを書いておきます。</p>

<p>ちなみに、参考にしたページはこちらです。</p>

<ul>
<li><a href="http://tanakh.jp/posts/2013-05-23-windows-setup.html">最近のWindowsの開発環境のセットアップ &ndash; 純粋関数空間</a></li>
</ul>


<h2>(1)Chocolateyのインストール</h2>

<p>Windowsのパッケージ管理ツールです。</p>

<p><a href="http://chocolatey.org/">http://chocolatey.org/</a>に書いてある</p>

<p>スクリプトをコピペしてインストールします。</p>

<h2>(2)mingwのインストール</h2>

<p>次のコマンドでインストール出来ます。</p>

<p><code>
C:\&gt; cinst mingw
</code></p>

<p>なお、インストールの際に</p>

<ul>
<li>C++ Compiler</li>
<li>MSYS Basic System</li>
<li>MinGW Developer Toolkit</li>
</ul>


<p>も選択しておいたほうがいいのかなと思って、選択しています。
(よくわかってない…)</p>

<h2>(3)msys-unzipのインストール</h2>

<p>ここからはmingwでの作業になります。</p>

<p>なお、先ほどのリンクでも紹介されている<a href="http://chocolatey.org/packages/ConEmu/12.4.17.1">ConEmu</a>で、Taskの設定で</p>

<p><code>
C:¥MinGW¥msys¥1.0¥bin¥bash.exe --login -i
</code></p>

<p>で、mingwを起動できるようにして、</p>

<p>そのコンソールから使っています。</p>

<p><code>
mingw-get install msys-unzip
</code></p>

<p>これでインストール出来ます。</p>

<h2>(4)gvmのインストール</h2>

<p>ここまでくれば</p>

<p><code>
curl -s get.gvmtool.net | bash
</code></p>

<p>を実行することができます。</p>

<p>これで、gvmでらくらくgroovyを扱えますね。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRMXctLWN4TmNQdkU" style="width : 408px; height : 280px;"></p>

<p><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidがJavaだと思っている人のためのGroovy講座 - 2]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/30/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo-2/"/>
    <updated>2013-05-30T10:48:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/30/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo-2</id>
    <content type="html"><![CDATA[<p>こんいちわ。みけです。</p>

<p>またも、タイトルが仰々しくてすみません。</p>

<p>本当に大したこと書かないです。</p>

<p>で、相変わらずAndroidまたもや出て来ません。</p>

<p>gradleも出て来ません。</p>

<p>でも、Android Studioの登場や、gradle-android-pluginで</p>

<p>gradleに興味を持たれた方には読んで貰いたいと思います。</p>

<p>以下、本題。</p>

<h2><code>Closure&lt;V&gt;</code>とはなんぞや</h2>

<p>Closureについて僕がなんか言うと、</p>

<p>皆が混乱するので(それだけ僕もちゃんと説明できるほど理解していない…orz)</p>

<p>とりあえず<a href="http://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3">WikipediaのClosure</a>でも読んで下さい。</p>

<p>Javaでいえば、<code>Callable&lt;V&gt;</code>みたいなものです。</p>

<p>で、<code>Callable&lt;V&gt;</code>に比べて便利なのが</p>

<p>```java</p>

<pre><code>Callable&lt;String&gt; callable = new Callable&lt;String&gt;() {
    @Override
    public String call() {
        // some codes
        return result.toString();
    }
};
</code></pre>

<p>```</p>

<p>みたいに書かなくてよいあたりです。</p>

<p>ちなみに<code>Callable&lt;T&gt;</code>と異なるところもあります。</p>

<p>それは、おいおい、説明します。</p>

<h1>そろそろ<code>Closure&lt;V&gt;</code>のサンプル見せてくれよ</h1>

<p>というわけで、適当にサンプルをみつくろってみました。</p>

<h4>単純な値を返すだけのClosure</h4>

<p>```groovy
def closure = {</p>

<pre><code>'Hello, Closure!'
</code></pre>

<p>}</p>

<p>assert closure() == &lsquo;Hello, Closure!&rsquo;
```</p>

<p>そうそう、<strong>groovyでは<code>return</code>を省略することができます</strong>。</p>

<p>その場合、最後に評価された式の値が<code>return</code>されます。</p>

<p>上記のClosureではClosureの最終式<code>'Hello, Closure!'</code>が評価され、</p>

<p>その値<code>'Hello, Closure!'</code>が返されます。</p>

<h4>引数をとるClosure</h4>

<p>```groovy
def hello = {name &ndash;></p>

<pre><code>'Hello, ' + name
</code></pre>

<p>}</p>

<p>assert &lsquo;Hello, mike&rsquo; == hello(&lsquo;mike&rsquo;)
assert &lsquo;Hello, null&rsquo; == hello()
```</p>

<p><code>Closure&lt;V&gt;</code>と<code>Callable&lt;V&gt;</code>との決定的な違いが、
(大した違いではないが)</p>

<p>引数を与えることができる点です。</p>

<p>これを<code>Callable&lt;V&gt;</code>でやろうとすると次のようになります。</p>

<p>```java
public class HelloTest {</p>

<pre><code>public class Hello implements Callable&lt;String&gt; {

    private final String name;

    public Hello(String name) {
        this.name = name;
    }

    @Override
    public String call() throws Exception {
        return "Hello, " + name;
    }
}

@Test
public void testHello () throws Exception {
    assertThat(new Hello("mike").call(), is("Hello, mike"));
    assertThat(new Hello(null).call(), is("Hello, null"));
}
</code></pre>

<p>}
```</p>

<h4>Closureを返すClosure</h4>

<p>```groovy
def counter = {int offset &ndash;></p>

<pre><code>return {
    offset++
}
</code></pre>

<p>}</p>

<p>def closure = counter(0)</p>

<p>(0..100).each {</p>

<pre><code>assert it == closure()
</code></pre>

<p>}
```</p>

<p>初期値の0からカウントするカウンターのようなクロージャーが返ってきます。</p>

<p>型としては<code>Closure&lt;Closure&lt;Integer&gt;&gt;</code>といったところでしょうか…</p>

<p>で、これをみると一つ気持ち悪いところがありますね。</p>

<p><strong>元の値ってどうなってしまうの？</strong></p>

<p>```groovy
def closure = {String hello &ndash;></p>

<pre><code>return {String name -&gt;
    hello += name
}    
</code></pre>

<p>}</p>

<p>def original = &lsquo;Hello, &rsquo;
def message = closure(original)</p>

<p>assert message(&lsquo;mike&rsquo;) == &lsquo;Hello, mike&rsquo;
assert message(&lsquo;!&rsquo;) == &lsquo;Hello, mike!&rsquo;
assert original == &lsquo;Hello, &rsquo;
```</p>

<p>というように、元の値は壊れませんが、</p>

<p>返されるClosureが元々持っていた値は壊れていきます。</p>

<p>ところで、イテレーターとして<code>Closure&lt;V&gt;</code>を使うときに出てくる</p>

<h4><code>it</code>ってなんやねん？</h4>

<p>gradleのプラグイン宣言などで、ときどきこんな記述が出てきますね</p>

<p>```groovy
[&lsquo;java&rsquo;, &lsquo;groovy&rsquo;].each {</p>

<pre><code>apply plugin : it
</code></pre>

<p>}
```</p>

<p>で、この<code>it</code>ですが、コレクションの一つ一つの要素です。</p>

<p>あ、そんなこと言われなくても知ってたって(´・ω・｀)</p>

<p>まあ、そんなことは言わずに、すこし試してみましょう。</p>

<p>```groovy
(1..4).each {</p>

<pre><code>println "it is ${it}."
</code></pre>

<p>}
```</p>

<p>実行結果はこんな感じです。</p>

<p><code>
it is 1.
it is 2.
it is 3.
it is 4.
</code></p>

<p>これって、でもどういうふうに呼ばれているの？</p>

<p>groovyの<code>DefaultGroovyMethods</code>クラスを介して呼ばれています。</p>

<h5>自分でも<code>it</code>でアクセスできるイテレーター作ってみたい</h5>

<p>というわけで、<code>Closure&lt;V&gt;</code>を引数にとるメソッドを書いてみました。</p>

<p><code>it</code>で要素にアクセスできて、ちょっと嬉しいですね。</p>

<p>```groovy
Integer.metaClass.define {</p>

<pre><code>collect = {Closure closure -&gt;
    return new IntRange(0, delegate).collect {
        closure(it)
    }
}
</code></pre>

<p>}</p>

<p>assert 2.collect {</p>

<pre><code>it * 2
</code></pre>

<p>} == [0, 2, 4]
```</p>

<p>というわけで、<code>it</code>は一つ一つの要素であることが事象として理解していただけたと思います。</p>

<p>で、<code>it</code>っていつ割り当てられるの？ということで、ソースをざっと見ていたんですが、</p>

<p>見つかりませんでした(´・ω・｀)</p>

<p>なお調べている過程で僕も初めて知ったのですが、</p>

<p><code>Closure&lt;V&gt;</code>は抽象クラスで、</p>

<p>コンパイル時に実際のクラスが生成されているようです。</p>

<p>まだまだ僕も勉強が足りませんね…</p>

<p>で、このへんが気になりだすと、もっと気になるのが…</p>

<h4>Closureのスコープってどうなのよ</h4>

<p>```groovy
def outside = &lsquo;This is outside&rsquo;
def doSomething = {println &lsquo;do something&rsquo;}
def closure = {</p>

<pre><code>def inside = 'This is inside'
doSomething()
println outside
println inside
</code></pre>

<p>}</p>

<p>closure()</p>

<p>doSomething()
println outside
println inside
```</p>

<p>これを実効すると次のような結果が得られます。</p>

<p>```
do something
This is outside
This is inside
do something
This is outside
Exception thrown
5 31, 2013 8:25:06 午後 org.codehaus.groovy.runtime.StackTraceUtils sanitize
WARNING: Sanitizing stacktrace:
groovy.lang.MissingPropertyException: No such property: inside for class: ConsoleScript83</p>

<pre><code>at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:50)
at org.codehaus.groovy.runtime.callsite.PogoGetPropertySite.getProperty(PogoGetPropertySite.java:49)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGroovyObjectGetProperty(AbstractCallSite.java:231)
at ConsoleScript83.run(ConsoleScript83:14)
</code></pre>

<p>```</p>

<p><code>Closure&lt;V&gt;</code>の<code>closure</code>の中からは、</p>

<p>フィールド<code>outside</code>を参照することや、<code>doSomething</code>を実行することはできますが、</p>

<p>スクリプト本体からは<code>closure</code>内部の<code>inside</code>にアクセスすることはできません。</p>

<p>まあ、大体ご想像されていたとおりだと思います。</p>

<h4>実は<code>Callable&lt;V&gt;</code>だった<code>Closure&lt;V&gt;</code></h4>

<p>さて、ここまでは<code>Callable&lt;V&gt;</code>との対比で<code>Closure&lt;V&gt;</code>を見て来ましたが、</p>

<p><code>Closure&lt;V&gt;</code>は実は<code>Callable&lt;V&gt;</code>を実装した抽象クラスです。</p>

<p>まず、<code>Closure&lt;V&gt;</code>のクラスファイルを見てみましょう。</p>

<p>```java Closure.java
public abstract class Closure<V> extends GroovyObjectSupport implements Cloneable, Runnable, GroovyCallable<V>, Serializable {</p>

<pre><code>// some codes
</code></pre>

<p>}
```</p>

<p><code>Closure&lt;V&gt;</code>はインターフェース<code>GroovyCallable&lt;V&gt;</code>を実装しています。</p>

<p>で、この<code>GroovyCallable&lt;V&gt;</code>ってなんやねんというと…</p>

<p><code>java GroovyCallable.java
public interface GroovyCallable&lt;V&gt; extends Callable&lt;V&gt; { }
</code></p>

<p>ってことで、<code>Callable&lt;V&gt;</code>を継承しているインターフェースになります。</p>

<p>まとめると<code>Closure&lt;V&gt;</code>は<code>Callable&lt;V&gt;</code>の実装クラスということになります。</p>

<p>では試してみましょう。</p>

<p>```groovy
import java.util.concurrent.*</p>

<p>def service = Executors.newFixedThreadPool(3)</p>

<p>def callable = {int sec &ndash;></p>

<pre><code>return {
    println "${new Date().format('yyyy/MM/dd hh:mm:ss')} : Sleeping ${sec} seconds..."
    Thread.sleep(sec * 1000)
    "${new Date().format('yyyy/MM/dd hh:mm:ss')} : This is ${sec}" as String
}
</code></pre>

<p>}</p>

<p>assert service.invokeAll((10..1).collect {</p>

<pre><code>callable(it) as Callable&lt;String&gt;
</code></pre>

<p>}).each {</p>

<pre><code>println it.get()
</code></pre>

<p>}.size() == 10
```</p>

<p>この実行結果は次のようになります。</p>

<p><code>
2013/05/31 02:13:56 : Sleeping 10 seconds...
2013/05/31 02:13:56 : Sleeping 8 seconds...
2013/05/31 02:13:56 : Sleeping 9 seconds...
2013/05/31 02:14:04 : Sleeping 7 seconds...
2013/05/31 02:14:05 : Sleeping 6 seconds...
2013/05/31 02:14:06 : Sleeping 5 seconds...
2013/05/31 02:14:11 : Sleeping 4 seconds...
2013/05/31 02:14:11 : Sleeping 2 seconds...
2013/05/31 02:14:11 : Sleeping 3 seconds...
2013/05/31 02:14:13 : Sleeping 1 seconds...
2013/05/31 02:14:06 : This is 10
2013/05/31 02:14:05 : This is 9
2013/05/31 02:14:04 : This is 8
2013/05/31 02:14:11 : This is 7
2013/05/31 02:14:11 : This is 6
2013/05/31 02:14:11 : This is 5
2013/05/31 02:14:15 : This is 4
2013/05/31 02:14:14 : This is 3
2013/05/31 02:14:13 : This is 2
2013/05/31 02:14:14 : This is 1
</code></p>

<p>全然、問題なく<code>Callable&lt;V&gt;</code>として動いているのが確認できると思います。</p>

<p>で、別にここまではなんだjavaじゃん、というわけですが、</p>

<p>ここからがほぼ本題です。</p>

<h4>delegate</h4>

<p>delegateがgroovyの<code>Closure&lt;V&gt;</code>の柔軟性をもたらしていることに疑いはありません。</p>

<p>まずは使用例から…</p>

<h5><code>groovy.xml.MarkupBuilder</code></h5>

<p>```groovy
import groovy.xml.*</p>

<p>def w = new StringWriter()
def doc = new MarkupBuilder(w)</p>

<p>def border = &lsquo;border : solid 1px #ccc;&rsquo;
def background = &lsquo;background-color : rgba(239, 239, 255, 0.7);&rsquo;
def padding = &lsquo;padding : 5px;&rsquo;
def radius = &lsquo;border-radius : 5px;&rsquo;</p>

<p>doc.html(lang : &lsquo;ja&rsquo;) {</p>

<pre><code>head {
    title 'test page'
}
body {
    h3 'Hello Groovy!'
    p (style : "${border}${background}${padding}${radius}",
            'This document is made by groovy.')
}
</code></pre>

<p>}</p>

<p>println w.toString()
```</p>

<p>これを実効すると、次のようなhtmlファイルができます。</p>

<p>```html
<html lang='ja'>
  <head></p>

<pre><code>&lt;title&gt;test page&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;h3&gt;Hello Groovy!&lt;/h3&gt;
&lt;p style='border : solid 1px #ccc;background-color : rgba(239, 239, 255, 0.7);padding : 5px;border-radius : 5px;'&gt;This document is made by groovy.&lt;/p&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p><code>MarkupBuilder</code>というクラスは<code>groovy.util.BuilderSupport</code>クラスを継承していて、</p>

<p>存在しないようなメソッドを実行する際に、</p>

<p><code>java
protected Object doInvokeMethod(String methodName, Object name, Object args)
</code></p>

<p>を介して実行します。</p>

<p>そして、このメソッドが内部で<code>Node</code>を作っていきます。</p>

<p>そういうわけで、上記のコードの11行目の<code>html</code>メソッドが実行されて、</p>

<p><code>"html"</code>というノードが作成されるのはわかるかと思います。</p>

<p>問題は<code>html</code>というメソッドが引数として受け入れた<code>Closure&lt;V&gt;</code>が</p>

<p><code>head</code>というメソッドや<code>body</code>メソッドを実行しています。</p>

<p>さきほどの<code>Closure</code>のスコープに戻るとこの場合、</p>

<p><code>head</code>や<code>body</code>というメソッドはないので、</p>

<p>ここで<code>MissingMethodException</code>が発生しそうですが、</p>

<p>発生しません。</p>

<p>何故でしょうか？</p>

<p><strong>これの謎を解く鍵がdelegateです。</strong></p>

<h5><code>Closure#setDelegate</code>と<code>Closure#setResolveStrategy</code></h5>

<p><code>Closure&lt;V&gt;</code>には変数名やメソッド名をどのオブジェクトから参照するのかを決定することができます。</p>

<p>そのオブジェクトへの参照がdelegateになります。</p>

<p>では、delegateをわざとらしいほど強調したスクリプトを見てみます。</p>

<p>```groovy
setProperty &lsquo;x&rsquo;, 1000
setProperty &lsquo;y&rsquo;, 500
setProperty &lsquo;exec&rsquo;, {println &ldquo;x : ${x}, y : ${y}&rdquo;}</p>

<p>def map = [x : 10, y : 5, exec : {println &ldquo;x = ${x}, y = ${y}&rdquo;}]
def closure = {</p>

<pre><code>println "x -&gt; ${x}"
println "y -&gt; ${y}"
print 'delegate exec -&gt; '
exec.call()
print 'owner exec -&gt; '
exec()
</code></pre>

<p>}
closure.delegate = map
closure.resolveStrategy = Closure.DELEGATE_FIRST
closure()
```</p>

<p>では、実行してみましょう。</p>

<p><code>
x -&gt; 10
y -&gt; 5
delegate exec -&gt; x = 1000, y = 500
owner exec -&gt; x : 1000, y : 500
</code></p>

<p>面白い結果が返ってきました。</p>

<p><code>closure</code>内部で<code>x</code>と<code>y</code>の値は<code>map</code>から取得されたものになっています。</p>

<p>一方、<code>exec</code>に関しては二つの結果が出てきています。</p>

<p>これは、15行目と16行目で行われている<code>closure</code>のdelegateの設定によって説明出来ます。</p>

<p><code>closure</code>がフィールド名を解決する仕組みは下記のようになっています。</p>

<ul>
<li><code>Closure.DELEGATE_FIRST</code>でdelegateされたオブジェクトから順番に解決していく</li>
<li>delegateされたオブジェクト<code>map</code>から変数を解決する</li>
</ul>


<p>ここから、7行目、8行目の<code>x</code>と<code>y</code>は<code>map</code>由来のものであることがわかります。</p>

<p>また10行目と12行目の<code>exec</code>が異なる結果となっているのは、</p>

<p>10行目の<code>exec</code>はフィールド名としてまず解決された後に、</p>

<p><code>Closure&lt;V&gt;</code>が実行されています。</p>

<p>一方、12行目の<code>exec</code>ではメソッドとして(<code>map</code>(クラスは<code>java.util.Map</code>)にはメソッド<code>exec</code>がない)</p>

<p>名前解決をします。そのため<code>closure</code>の<code>OWNER</code>であるスクリプトの方の<code>exec</code>が参照されます。</p>

<p>また、10行目と12行目の<code>exec</code>が参照する<code>x</code>と<code>y</code>が1行目と2行目で設定されている<code>x</code>と<code>y</code>なのは</p>

<p>次の理由からです。</p>

<ul>
<li><code>map.exec</code>のdelegateが設定されてない</li>
<li><code>exec</code>のdelegateが設定されていない</li>
</ul>


<h5><code>MarkupBuilder</code>再び</h5>

<p>さきほどの<code>MarkupBuilder</code>に戻ります。</p>

<p><code>MarkupBuilder#doInvokeMethod(String, Object, Object)</code>メソッドでは</p>

<p>どのような処理がされているのかというと…</p>

<p>```java MarkupBuilder.java
// this is partial codes
protected Object doInvokeMethod(String methodName, Object name, Object args) {</p>

<pre><code>Object node = null;
Closure closure = null;

// creating node and attach it to variable node.
// getting closure from arg and attach it to variable closure.
if (closure != null) {
    // stack operation
    setClosureDelegate(closure, node);
    closure.call();
    // stack operation
}
// node create completion and return it
</code></pre>

<p>}
protected void setClosureDelegate(Closure closure, Object node) {</p>

<pre><code>closure.setDelegate(this);
</code></pre>

<p>}
```</p>

<p>9行目で<code>setClosureDelegate</code>メソッドを呼び出し、</p>

<p>15行目からの<code>setClosureDelegate</code>では、</p>

<p><code>closure</code>のdelegateに<code>this</code>(つまり<code>MarkupBuilder</code>のインスタンス)を割り当てています。</p>

<p>その結果10行目の<code>closure.call()</code>では、</p>

<p>メソッドおよびフィールドの名前解決が<code>MarkupBuilder</code>のインスタンスから行われるます。</p>

<p>その結果、<code>MarkupBuilder</code>の例で<code>head</code>とか<code>body</code>といったメソッドが、</p>

<p><code>MarkupBuilder</code>のインスタンスに対して呼び出されるということになります。</p>

<p>さて、翻って</p>

<h1>gradleのtaskメソッド…</h1>

<p>でも、<code>Closure&lt;V&gt;</code>が使われていますね。</p>

<p>```groovy build.gradle
task myTask {</p>

<pre><code>description = 'this is myTask'.
println 'this is not task, but configuration.'
doLast {
    println 'finished myTask'
}
</code></pre>

<p>}
```</p>

<p>gradleのandroidサポートが本格的になってからgradleを始めた人の中には</p>

<p>上記のようなgradleの<code>Project</code>クラスのメソッド<code>task(Object, Closure)</code>の</p>

<p><code>Closure</code>部分をタスクだと思っている人がかなりの割合でいると思いますが、</p>

<p>この<code>Closure</code>部分は<strong>タスクではなく、設定です</strong>。</p>

<p>こう書いた場合にタスクはgradleコマンドを書いた時に必ず実行されると</p>

<p>言っていると、元からgroovyをやっている人とは話がかみあわなくなるので、</p>

<p>気をつけて下さい。</p>

<p>では、ちょっとソースコードを覗いてみます。</p>

<p>```java AbstractProject.java
// this is partial codes
public Task task(String task, Closure configureClosure) {</p>

<pre><code>return taskContainer.create(task).configure(configureClosure);
</code></pre>

<p>}
```</p>

<p><code>AbstractProject#task(String, Closure)</code>では、まず<code>Task</code>が作成された後に、</p>

<p><code>Task#configure(Closure)</code>が呼び出されます。</p>

<p>```java AbstractTask.java
// this is partial codes
public Task configure(Closure closure) {</p>

<pre><code>return ConfigureUtil.configure(closure, this, false);
</code></pre>

<p>}
```</p>

<p><code>Task#configure(Closure)</code>では<code>ConfigureUtil#configure(Closure, Task, boolean)</code>が呼び出されます。</p>

<p>```java ConfigureUtil.java
// this is partial codes
public static <T> T configure(Closure configureClosure,</p>

<pre><code>    T delegate,
    boolean configureableAware) {
return configure(configureClosure,
        delegate,
        Closure.DELEGATE_FIRST,
        configureableAware);
</code></pre>

<p>}
private static <T> T configure(Closure configureClosure,</p>

<pre><code>    T delegate,
    int resolveStrategy,
    boolean configureableAware) {
ClosureBackedAction&lt;T&gt; action = new ClosureBackedAction&lt;T&gt;(
        configureClosure,
        resolveStrategy,
        configureableAware); 
action.execute(delegate);
return delegate;
</code></pre>

<p>}
```</p>

<p>ここから、<code>org.gradle.api.internal.ClosureBackedAction&lt;T&gt;</code>により、</p>

<p><code>Closure</code>が実行されます。</p>

<p>```java ClosureBackedAction.java
// this is partial codes
public ClosureBackedAction(Closure closure,</p>

<pre><code>    int resolveStrategy,
    boolean configureableAware) {
this.closure = closure;
this.configureableAware = configureableAware;
this.resolveStrategy = resolveStrategy;
</code></pre>

<p>}
public void execute(T delegate) {</p>

<pre><code>// check closure is not null
// checking cinfgureableAware is false
Closure copy = (Closure) closure.clone();
copy.setResolveStrategy(resolveStrategy);
copy.setDelegate(delegate);
if (copy.getMaximumNumberOfParameters() == 0) {
    copy.call();
} else {
    copy.call(delegate);
}
</code></pre>

<p>}
```</p>

<p>12〜14行目でdelegateの設定、16行目or17行目で<code>Closure</code>の実行がなされていますね。</p>

<p>で、<code>Closure</code>のdelegateにはタスクが設定されています。</p>

<p>したがって、少し前で説明した通り、</p>

<p><code>Closure</code>の実行において変数名の解決は<code>Task</code>のインスタンスから順番に解決されていきます。</p>

<p>で、これが最終的にタスクの設定になるわけです。</p>

<p>(結構たらい回しにされていてイライライする方がいらっしゃるかもしれませんが、まあ、テスタビリティを上げるためにこうなっています。)</p>

<p>というわけで、<strong>まとめ</strong></p>

<h2><code>Closure&lt;V&gt;</code>の仕組みがわかると<a href="http://www.gradle.org/docs/current/dsl/">Gradle DSL</a>の理解が容易になります。</h2>

<p>冒頭でgradleの話しませんって言ったな、あれは、嘘だ。</p>

<p><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
</feed>
