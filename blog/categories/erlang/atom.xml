<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-07-09T13:50:31+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlangのlistsモジュールを試してみる - 第3回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/23/erlangfalselistsmoziyuruwoshi-sitemiru-di-3hui/"/>
    <updated>2013-05-23T13:01:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/23/erlangfalselistsmoziyuruwoshi-sitemiru-di-3hui</id>
    <content type="html"><![CDATA[<p>Erlangのlistsモジュールを試してみるの第三回は次のコマンドの結果について試していきます。</p>

<p>```erlang
lists:sublist(</p>

<pre><code>lists:sort(
    lists:map(
        fun({F, A}) -&gt;
            atom_to_list(F) ++
            "/" ++
            integer_to_list(A)
        end,
        lists:module_info(exports))),
33,
16).
</code></pre>

<p>```</p>

<p>結果</p>

<p><code>
[
  "merge/1",
  "merge/2",
  "merge/3",
  "merge3/3",
  "min/1",
  "module_info/0",
  "module_info/1",
  "nth/2",
  "nthtail/2",
  "partition/2",
  "prefix/2",
  "reverse/1",
  "reverse/2",
  "rkeymerge/3",
  "rmerge/2",
  "rmerge/3"
]
</code></p>

<table>
<tbody>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4274067149" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873114659" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1449309968" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00B634R04" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00AZOT4MG" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1933988789" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</tbody>
</table>


<h3>merge/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge(ListOfLists) &ndash;> List1</h4>

<h4>Types</h4>

<ul>
<li>ListOfLists = [List]</li>
<li>List = List1 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns the sorted list formed by merging all the sub-lists of ListOfLists. All sub-lists must be sorted prior to evaluating this function. When two elements compare equal, the element from the sub-list with the lowest position in ListOfLists is picked before the other element.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge-1">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リスト内のリストをソートしてマージしたリストを返します。なお、リスト内のリストは事前にソートされている必要があります。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:merge([
1&gt; [0,2,4],     
1&gt; [3,6,9],     
1&gt; [1,5,7]]).   
[0,1,2,3,4,5,6,7,9]
</code></p>

<p>複数のリストがマージされて新しいリストが返されます。</p>

<h3>merge/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge(List1, List2) &ndash;> List3</h4>

<h4>Types</h4>

<ul>
<li>List1 = [X]</li>
<li>List2 = [Y]</li>
<li>List3 = [(X | Y)]</li>
<li>X = Y = term()</li>
</ul>


<p>Returns the sorted list formed by merging List1 and List2. Both List1 and List2 must be sorted prior to evaluating this function. When two elements compare equal, the element from List1 is picked before the element from List2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>二つのリストをソートしてマージした新しいリストを返します。二つのリストは事前にソートされている必要があります。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:merge([1,3,4,6],[0,2,5,7]).
[0,1,2,3,4,5,6,7]
</code></p>

<p>二つのリストがマージされた新しいリストが返されます。</p>

<h3>merge/3</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge(Fun, List1, List2) &ndash;> List3</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A, B) &ndash;> boolean())</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>List3 = [(A | B)]</li>
<li>A = B = term()</li>
</ul>


<p>Returns the sorted list formed by merging List1 and List2. Both List1 and List2 must be sorted according to the <a href="http://www.erlang.org/doc/man/lists.html#ordering_function">ordering function</a> <code>Fun</code> prior to evaluating this function. <code>Fun(A, B)</code> should return <code>true</code> if <code>A</code> compares less than or equal to <code>B</code> in the ordering, <code>false</code> otherwise. When two elements compare equal, the element from List1 is picked before the element from List2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge-3">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>List1</code>と<code>List2</code>をソートしてマージした新しいリストを返します。引数のリストは事前にソートされている必要があります。<code>Fun(A, B)</code>はソートオーダーに関して<code>A</code>が先に来るべきである場合は<code>true</code>を、そうでない場合は<code>false</code>を返します。同じ値の要素がある場合は、<code>List1</code>のものが<code>List2</code>のものに優先されます。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:merge(fun(A, B) -&gt; A &gt; B end,[6,4,3,1],[7,5,2,0]).
[7,6,5,4,3,2,1,0]
2&gt; lists:merge(fun({A,_}, {B,_}) -&gt; A =&lt; B end,            
2&gt; [{1,a},{3,a},{4,a},{5,a}],                  
2&gt; [{0,b},{2,b},{4,b},{6,b}]).                 
[{0,b},{1,a},{2,b},{3,a},{4,a},{4,b},{5,a},{6,b}]
</code></p>

<p>最初の例では、降順にソートする関数で評価してリストをマージして新しいリストを返します。</p>

<p>後者の例では、昇順ソートです。同一の値の場合に<code>List1</code>から要素が取得されています。</p>

<h3>merge3/3</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge3(List1, List2, List3) &ndash;> List4</h4>

<h4>Types</h4>

<ul>
<li>List1 = [X]</li>
<li>List2 = [Y]</li>
<li>List3 = [Z]</li>
<li>List4 = [(X | Y | Z)]</li>
<li>X = Y = Z = term()</li>
</ul>


<p>Returns the sorted list formed by merging List1, List2 and List3. All of List1, List2 and List3 must be sorted prior to evaluating this function. When two elements compare equal, the element from List1, if there is such an element, is picked before the other element, otherwise the element from List2 is picked before the element from List3.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge3-3">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>三つのリストをソートしてマージした新しいリストを返します。引数のリストは事前にソートされている必要があります。もし同じ値の要素があった場合は<code>List1</code>、<code>List2</code>、<code>List3</code>の順番で優先されます。</p>

<h4>Example</h4>

<p><code>
50&gt; lists:merge3(
50&gt;   [2, 5, 8],
50&gt;   [1, 4, 9],
50&gt;   [3, 6, 7]).
[1,2,3,4,5,6,7,8,9]
</code></p>

<h3>min/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>min(List) &ndash;> Min</h4>

<h4>Types</h4>

<ul>
<li>List = [T, …]</li>
<li>Min = T</li>
<li>T = term()</li>
</ul>


<p>Returns the first element of List that compares less than or equal to all other elements of List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#min-1">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リスト中、最初に現れた最も小さい要素を返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:min([5, 3, 1, 4, 5]).
1
2&gt; lists:min([h, b, n, t, l]).
b
3&gt; lists:min([0,0.0]).
0
4&gt; lists:min([0.0,0]).
0.0
5&gt; lists:min(['A', 123, a, 123.0]).
123
</code></p>

<p>最初の例では引数のリストの最小整数1が返されます。</p>

<p>次の例では引数のリストの最小のatom<code>b</code>が返されます。</p>

<p>三番目と四番目の例では整数と浮動小数点数の0を比較して最初に現れた要素が返されます。</p>

<p>最後の例では整数と浮動小数点数とatomを比較しています。最初に現れた最小の要素(整数)が返されます。</p>

<h3>module_info/0</h3>

<h4>Erlang Document</h4>

<blockquote><h4>module_info</h4>

<p>The module_info/0 function in each module returns a list of {Key,Value} tuples with information about the module. Currently, the list contain tuples with the following Keys: attributes, compile, exports, and imports. The order and number of tuples may change without prior notice.</p>

<h5>warning</h5>

<p>The {imports,Value} tuple may be removed in a future release because Value is always an empty list. Do not write code that depends on it being present.</p>

<p><a href="http://erlang.org/doc/reference_manual/modules.html#id74571">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>これはlistsモジュールでなく、すべてのモジュールに共通する関数ですな。
モジュールに関する情報を<code>{Key, Value}</code>のタプルリストで返します。現在のところ、</p>

<ul>
<li>attributes</li>
<li>compile</li>
<li>exports</li>
<li>imports</li>
</ul>


<p>といったキーです。なお、<code>{imports, Value}</code>タプルは常に空のリストしか返さないため、今後なくなる予定です。これに基づいたコードを記述しないで下さい。</p>

<h4>Example</h4>

<p>```erlang
1> lists:module_info().
[{exports,[{append,2},</p>

<pre><code>       {append,1},
       {subtract,2},
       {nth,2},
       {nthtail,2},
       {prefix,2},
       {suffix,2},
       {last,1},
       {seq,2},
       {seq,3},
       {sum,1},
       {duplicate,2},
       {min,1},
       {max,1},
       {sublist,3},
       {sublist,2},
       {zip,2},
       {unzip,1},
       {zip3,3},
       {unzip3,1},
       {zipwith,3},
       {zipwith3,4},
       {merge,1},
       {merge3,3},
       {rmerge3,...},
       {...}|...]},
</code></pre>

<p> {imports,[]},
 {attributes,[{vsn,[257948301539042745638557295194154171573]}]},
 {compile,[{options,[{outdir,&ldquo;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../ebin&rdquo;},</p>

<pre><code>                 {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../include"},
                 {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../../kernel/include"},
                 warnings_as_errors,debug_info]},
       {version,"4.9"},
       {time,{2013,2,25,19,27,47}},
       {source,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/lists.erl"}]}]
</code></pre>

<p>```</p>

<p>たくさん出てきた…</p>

<h3>module_info/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>module_info</h4>

<p>The call module_info(Key), where key is an atom, returns a single piece of information about the module.</p>

<p><a href="http://erlang.org/doc/reference_manual/modules.html#id74571">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>module_info</code>関数から<code>Key</code>を指定して取り出します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:module_info(attributes).
[{vsn,[257948301539042745638557295194154171573]}]
</code></p>

<p><code>lists:module_info/0</code>の結果の一部が返ってきます。</p>

<h3>nth/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>nth(N, List) &ndash;> Elem</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 1</li>
<li>List = [T, &hellip;]</li>
<li>Elem = T</li>
<li>T = term()</li>
</ul>


<p>Returns the Nth element of List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#nth-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>N</code>番目の要素を返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:nth(3,[a,2,c,4,e,5]).
c
</code></p>

<p>3番目の要素<code>c</code>が返されます。</p>

<h3>nthtail/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>nthtail(N, List) &ndash;> Tail</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 0</li>
<li>List = [T, &hellip;]</li>
<li>Elem = T</li>
<li>T = term()</li>
</ul>


<p>Returns the Nth tail of List, that is, the sublist of List starting at N+1 and continuing up to the end of the list.</p>

<p><a href="http://erlang.org/doc/man/lists.html#nthtail-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>N+1</code>番から後ろの要素で作られるサブリストを返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:nthtail(3,[a,2,c,4,e,5]).
[4,e,5]
</code></p>

<p>4番目から後ろの要素で構成されるリストが返されます。</p>

<h3>partition/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>partition(Pred, List) &ndash;> {Satisfying, NotSatisfying}</h4>

<h4>Types</h4>

<ul>
<li>Pred = fun((Elem :: T) &ndash;> boolean())</li>
<li>List = Satisfying = NotSatisfying = [T]</li>
<li>T = term()</li>
</ul>


<p>Partitions List into two lists, where the first list contains all elements for which Pred(Elem) returns true, and the second list contains all elements for which Pred(Elem) returns false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#partition-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>条件と分割対象リストを引数に取り、二つの新しいリストに分割します。最初のリストには条件を満たすものを、次のリストには条件を満たさないものを返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:partition(fun(X) -&gt; X rem 2 =:= 0 end, [0,1,2,3,4,5,6,7]).
{[0,2,4,6],[1,3,5,7]}
</code></p>

<p>偶数かどうか判定する条件とリストを与えています。
先頭のリストには条件を満たすもの(偶数)のリスト、後ろ側のリストには条件を満たさないもの(奇数)のリストが返されます。</p>

<h3>prefix/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>prefix(List1, List2) &ndash;> boolean()</h4>

<h4>Types</h4>

<ul>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns true if List1 is a prefix of List2, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#prefix-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>List1</code>が<code>List2</code>の先頭部分である場合に<code>true</code>を、異なる場合には<code>false</code>を返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:prefix([1,2,3,4], [1,2,3,4,5,6,7]).
true
2&gt; lists:prefix([a,b,c,d], [a,z,b,y,c,x]).
false
3&gt; lists:prefix("co", "coexistence").
true
</code></p>

<p>最初の例では、第一引数が第二引数の先頭部分と一致するので<code>true</code>が返されます。</p>

<p>次の例では、第一引数が第二引数の先頭部分と異なるので<code>false</code>が返されます。</p>

<p>最後の例では<code>"co"</code>は<code>"coexistence"</code>の最初の文字列部分と同じなので、<code>true</code>が返されます。</p>

<h3>reverse/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>reverse(List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a list with the elements in List1 in reverse order.</p>

<p><a href="http://erlang.org/doc/man/lists.html#reverse-1">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リストを逆順にして返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:reverse([9,8,7,6,5]).
[5,6,7,8,9]
</code></p>

<p>リストの順番が逆になって返されています。</p>

<h3>reverse/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>reverse(List1, Tail) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>List1 = [T]</li>
<li>Tail = term()</li>
<li>List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a list with the elements in List1 in reverse order, with the tail Tail appended.</p>

<p><a href="http://erlang.org/doc/man/lists.html#reverse-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リストを逆順にした上で、第二引数を追加した新しいリストを返します。</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:reverse([5,4,3,2,1],[0]).
[1,2,3,4,5,0]
2&gt; lists:reverse([5,4,3,2,1],[a,b,c]).
[1,2,3,4,5,a,b,c]
3&gt; lists:reverse([5,4,3,2,1],0).
[1,2,3,4,5|0]
</code></p>

<p>最初の例、および二番目の例では最初のリストが逆順になされた上で、次のリストが連結された新しいリストが返ってきます。</p>

<p>最後の例では、結果がリストでなくなります。</p>

<p>公式ドキュメントが間違っているっぽいですね…</p>

<h3>rkeymerge/3</h3>

<h4>Erlang Document</h4>

<p>なかった＼(^o^)／</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:rkeymerge(2,          
1&gt;   [{a, 4}, {a, 3}, {a, 1}],
1&gt;   [{b, 5}, {b, 2}, {b, 0}]).
[{b,5},{a,4},{a,3},{b,2},{a,1},{b,0}]
2&gt; lists:rkeymerge(2,
2&gt;   [{a, 1}, {a, 3}, {a, 4}],
2&gt;   [{b, 0}, {b, 2}, {b, 5}]).
[{a,1},{a,3},{a,4},{b,0},{b,2},{b,5}]
3&gt; lists:rkeymerge(2,          
3&gt;   [{a, 4}, {a, 3}, {a, 2}, {a, 1}],
3&gt;   [{b, 5}, {b, 2}, {b, 0}]).       
[{b,5},{a,4},{a,3},{b,2},{a,2},{a,1},{b,0}]
</code></p>

<p><code>lists:keymerge/3</code>のreverse版のようです。</p>

<ul>
<li>引数のリストは逆順にソートされている必要があります。</li>
<li>同一のキーを持つ場合、第二引数のリストの要素が優先されます。</li>
</ul>


<p>最初の例では、タプルの２番目の値をキーに逆順ソートされたリストが返されます。</p>

<p>次の例では、逆順にソートされていないため、マージがうまくなされていません。</p>

<p>最後の例では、同じキーがある場合の挙動を確認しています。</p>

<p>同じキー値をもつ要素(ここでは、<code>{a,2}</code>と<code>{b,2}</code>)がありますが、</p>

<p><code>{b, 2}</code>の方が優先されているのがわかります。</p>

<h3>rmerge/2</h3>

<h4>Erlang Document</h4>

<p>なかった＼(^o^)／</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:rmerge([4,2,0],[5,3,1]).
[5,4,3,2,1,0]
2&gt; lists:rmerge([0,2,4],[1,3,5]).
[1,3,5,0,2,4]
</code></p>

<p><code>merge/2</code>のリバースバージョン。</p>

<p>最初の例では逆順ソートされたリストを引数として渡して、</p>

<p>逆順でマージされた新しいリストが返されます。</p>

<p>次の例では事前に逆順マージされていないため、</p>

<p>求める結果(逆順にマージされたリスト)が返ってきません。</p>

<h3>rmerge/3</h3>

<h4>Erlang Document</h4>

<p>なかった＼(^o^)／</p>

<h4>Example</h4>

<p><code>erlang
1&gt; lists:merge(fun({_, A}, {_, B}) -&gt; A &gt;= B end,
1&gt;     [{a,9},{a,5},{a,1}],
1&gt;     [{b,7},{b,5},{b,3}]).
[{a,9},{b,7},{a,5},{b,5},{b,3},{a,1}]
2&gt; lists:merge(fun({_, A}, {_, B}) -&gt; A &gt; B end,
2&gt;     [{a,9},{a,5},{a,1}],                     
2&gt;     [{b,7},{b,5},{b,3}]).                    
[{a,9},{b,7},{b,5},{a,5},{b,3},{a,1}]
</code></p>

<p><code>merge/3</code>関数のリバースバージョン。</p>

<p>引数は先頭から</p>

<ul>
<li>Fun = fun((A, B) &ndash;> boolean())</li>
<li>List1 = [T]</li>
<li>List2 = [T]</li>
</ul>


<p>です。</p>

<p>なお、</p>

<ul>
<li>Funには結果として先にくるものに対してtrueが返すような関数を渡します。</li>
<li>List1、List2ともにFunにて事前にソートされている必要があります。</li>
<li>T = term()</li>
</ul>


<p>となっています。</p>

<p>また、同値なものがあった場合は、Funの実装に従います。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのlistsモジュールを試してみる - 第2回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/14/erlangfalselistsmoziyuruwoshi-sitemiru-di-2hui/"/>
    <updated>2013-05-14T14:01:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/14/erlangfalselistsmoziyuruwoshi-sitemiru-di-2hui</id>
    <content type="html"><![CDATA[<p>Erlangのlistsモジュールを試してみるの第二回は次のコマンドの結果について試していきます。</p>

<p>```erlang
lists:sublist(</p>

<pre><code>lists:sort(
    lists:map(
        fun({F, A}) -&gt;
            atom_to_list(F) ++
            "/" ++
            integer_to_list(A)
        end,
        lists:module_info(exports))),
17,
16).
</code></pre>

<p>```</p>

<p>結果</p>

<p><code>
[
  "keydelete/3",
  "keyfind/3",
  "keymap/3",
  "keymember/3",
  "keymerge/3",
  "keyreplace/4",
  "keysearch/3",
  "keysort/2",
  "keystore/4",
  "keytake/3",
  "last/1",
  "map/2",
  "mapfoldl/3",
  "mapfoldr/3",
  "max/1",
  "member/2"
]
</code></p>

<p>です。</p>

<h3>keydelete/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keydelete(Key, N, TupleList1) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a copy of TupleList1 where the first occurrence of a tuple whose Nth element compares equal to Key is deleted, if there is such a tuple.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keydelete-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>引数に与えられたタプルのリストのコピーを返します。ただし、リスト中のタプルで、タプルのN番目の要素が引数Keyと同じ値のもので最も先頭に近いものは取り除かれます。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keydelete(jim, 1,
1&gt; [
1&gt;     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
1&gt;     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},
1&gt;     {simon, 36, typist}, {dag, 34, student}, {jack, 21, programmer},
1&gt;     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}
1&gt; ]).
[{mike,32,programmer},
 {tim,40,scientist},
 {bob,36,officer},
 {lod,22,dentist},
 {iwan,27,evangelist},
 {simon,36,typist},
 {dag,34,student},
 {jack,21,programmer},
 {john,21,engineer},
 {mike,27,scientist},
 {jim,24,officer}]
2&gt; lists:keydelete(madscientist, 3,
2&gt; [
2&gt;     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
2&gt;     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},
2&gt;     {simon, 36, typist}, {dag, 34, student}, {jack, 21, programmer},
2&gt;     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}
2&gt; ]).
[{mike,32,programmer},
 {jim,22,engineer},
 {tim,40,scientist},
 {bob,36,officer},
 {lod,22,dentist},
 {iwan,27,evangelist},
 {simon,36,typist},
 {dag,34,student},
 {jack,21,programmer},
 {john,21,engineer},
 {mike,27,scientist},
 {jim,24,officer}]
3&gt; lists:keydelete(madscientist, 4,                                      
3&gt; [                                                                     
3&gt;     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
3&gt;     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},   
3&gt;     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}   
3&gt; ]).
[{mike,32,programmer},
 {jim,22,engineer},
 {tim,40,scientist},
 {bob,36,officer},
 {lod,22,dentist},
 {iwan,27,evangelist},
 {john,21,engineer},
 {mike,27,scientist},
 {jim,24,officer}]
</code></p>

<p>まず最初の例では、リストの中で一番最初に出てくるキーの位置<code>1</code>番目の値が<code>jim</code>であるタプルを削除したリストが返されます。元のリストで9番目のタプルも同様の条件ですが、こちらは削除されません。</p>

<p>次の例ではリストで一致しない条件で実行しています。返されるリストは何も削除されていません。</p>

<p>最後の例ではリストのタプルの要素数より多い番号を指定して削除を実施します。もちろん、返されるリストは何も削除されていません。</p>

<h3>keyfind/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keyfind(Key, N, TupleList) &ndash;> Tuple | false</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Searches the list of tuples TupleList for a tuple whose Nth element compares equal to Key. Returns Tuple if such a tuple is found, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keyfind-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルのリストから指定位置の要素について<code>Key</code>に一致する最初のタプルを返します。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keyfind(36, 2,
1&gt; [
1&gt;     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
1&gt;     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},
1&gt;     {simon, 36, typist}, {dag, 34, student}, {jack, 21, programmer},
1&gt;     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}
1&gt; ]).
{bob,36,officer}
2&gt; lists:keyfind(jim, 1,
2&gt; [
2&gt;     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
2&gt;     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},
2&gt;     {simon, 36, typist}, {dag, 34, student}, {jack, 21, programmer},
2&gt;     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}
2&gt; ]).
{jim,22,engineer}
3&gt; lists:keyfind(madscientist, 3,
3&gt; [
3&gt;     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
3&gt;     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},
3&gt;     {simon, 36, typist}, {dag, 34, student}, {jack, 21, programmer},
3&gt;     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}
3&gt; ]).
false
</code></p>

<p>最初の例ではタプルの二番目の値が<code>36</code>のものを探して、返します。</p>

<p>次の例ではタプルの最初の値が<code>jim</code>のものを探して返しますが、9番目に現れるものは返されません。</p>

<p>最後の例では一致するものがない条件で検索を行いますが、存在しないため<code>false</code>が返ってきます。</p>

<h3>keymap/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keymap(Fun, N, TupleList1) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((Term1 :: term()) &ndash;> Term2 :: term())</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a list of tuples where, for each tuple in TupleList1, the Nth element Term1 of the tuple has been replaced with the result of calling Fun(Term1).</p>

<p><a href="http://erlang.org/doc/man/lists.html#keymap-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルに対して指定した位置の要素に、引数で渡した関数を実行した結果が入れられた、新しいタプルのリストが返されます。</p>

<h4>Example</h4>

<p>```
1> IsProgrammer = fun(X) &ndash;> X =:= programmer end.</p>

<h1>Fun&lt;erl_eval.6.17052888></h1>

<p>2> lists:keymap(IsProgrammer, 3,
2> [
2>     {mike, 32, programmer}, {jim, 22, engineer}, {tim, 40, scientist},
2>     {bob, 36, officer}, {lod, 22, dentist}, {iwan, 27, evangelist},
2>     {simon, 36, typist}, {dag, 34, student}, {jack, 21, programmer},
2>     {john, 21, engineer}, {mike, 27, scientist}, {jim, 24, officer}
2> ]).
[{mike,32,true},
 {jim,22,false},
 {tim,40,false},
 {bob,36,false},
 {lod,22,false},
 {iwan,27,false},
 {simon,36,false},
 {dag,34,false},
 {jack,21,true},
 {john,21,false},
 {mike,27,false},
 {jim,24,false}]
```</p>

<p>この例ではタプルの3番目の要素がprogrammerならtrueに変換し、そうでなければfalseに変換した新しいタプルのリストを返します。</p>

<h3>keymember/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keymember(Key, N, TupleList) &ndash;> boolean()</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns true if there is a tuple in TupleList whose Nth element compares equal to Key, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keymember-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>指定位置に<code>Key</code>を含むタプルがリスト中にあれば<code>true</code>、なければ<code>false</code>が返ってきます。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keymember(bob, 1,
1&gt; [{mike,32,programmer},
1&gt;  {jim,22,engineer},
1&gt;  {tim,40,scientist},
1&gt;  {bob,36,officer},
1&gt;  {lod,22,dentist},
1&gt;  {iwan,27,evangelist},
1&gt;  {simon,36,typist},
1&gt;  {dag,34,student},
1&gt;  {jack,21,programmer},
1&gt;  {john,21,engineer},
1&gt;  {mike,27,scientist},
1&gt;  {jim,24,officer}   
1&gt; ]).
true
2&gt; lists:keymember(madscientist, 3,
2&gt; [
2&gt;  {mike,32,programmer},
2&gt;  {jim,22,engineer},
2&gt;  {tim,40,scientist},
2&gt;  {bob,36,officer},
2&gt;  {lod,22,dentist},
2&gt;  {iwan,27,evangelist},
2&gt;  {simon,36,typist},
2&gt;  {dag,34,student},
2&gt;  {jack,21,programmer},
2&gt;  {john,21,engineer},
2&gt;  {mike,27,scientist},
2&gt;  {jim,24,officer}
2&gt; ]).
false
</code></p>

<p>最初の例では、1番目の要素が<code>bob</code>であるタプルがリスト中に含まれていますので、<code>true</code>が返されます。</p>

<p>次の例では、3番目の要素が<code>madscientist</code>のタプルはリスト中に含まれていないので、<code>false</code>が返されます。</p>

<h3>keymerge/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keymerge(N, TupleList1, TupleList2) &ndash;> TupleList3</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = [T1]</li>
<li>TupleList2 = [T2]</li>
<li>TupleList3 = [(T1 | T2)]</li>
<li>T1 = T2 = Tuple</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns the sorted list formed by merging TupleList1 and TupleList2. The merge is performed on the Nth element of each tuple. Both TupleList1 and TupleList2 must be key-sorted prior to evaluating this function. When two tuples compare equal, the tuple from TupleList1 is picked before the tuple from TupleList2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keymerge-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>この関数は引数で与えられた二つのタプルリストをソートしてマージした状態で返します。ソートのキーは引数の<code>N</code>番目の要素になります。引数に与えられるタプルリストは事前にソートされていることが求められます。双方のタプルでキーの値が一致する場合、左側の引数のリストから取られたタプルが右のものに優先されます。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keymerge(1,  
1&gt;   [{a, 1}, {c, 1}, {d, 1}],
1&gt;   [{b, 2}, {d, 2}]).
[{a,1},{b,2},{c,1},{d,1},{d,2}]
2&gt; lists:keymerge(1,
2&gt;   [{x, 1}, {d, 1}, {e, 1}],
2&gt;   [{t, 2}, {a, 2}, {d, 2}]).
[{t,2},{a,2},{d,2},{x,1},{d,1},{e,1}]
</code></p>

<p>最初の例では、事前にソートされたタプルリストが引数として与えられ、マージされたリストが返されます。また、<code>[{d, 1}, {d, 2}]</code>のようにキーの値が一致するものは左側の引数に与えられたものが優先されています。</p>

<p>次の例では、事前にソートされていないタプルリストが引数として与えられていますが、返されるリストはマージされていない状態で返ってきます。</p>

<h3>keyreplace/4</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keyreplace(Key, N, TupleList1, NewTuple) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>NewTuple = Tuple</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a copy of TupleList1 where the first occurrence of a T tuple whose Nth element compares equal to Key is replaced with NewTuple, if there is such a tuple T.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keyreplace-4">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中で最も最初に現れた<code>N</code>番目の要素が<code>Key</code>であるタプルを引数で指定されたタプルに変更したリストを返します。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keyreplace(b, 1,
1&gt; [                     
1&gt;  {a, original},       
1&gt;  {b, original},       
1&gt;  {c, original},       
1&gt;  {d, original},       
1&gt;  {b, not_change}],
1&gt; {b, changed}).        
[{a,original},
 {b,changed},
 {c,original},
 {d,original},
 {b,not_change}]
2&gt; lists:keyreplace(x, 1,
2&gt; [
2&gt;  {a, original},
2&gt;  {b, original},
2&gt;  {c, original}],
2&gt; {x, not_appear}).
[{a,original},{b,original},{c,original}]
</code></p>

<p>最初の例では最も最初に現れる1番目の要素が<code>b</code>であるタプルが引数で与えられたタプルと交換されて返されます。最後に現れる同じ<code>Key</code>をもつタプルは変わっていません。</p>

<p>次の例では<code>Key</code>に一致するタプルが存在しないため、元のリストと同じ物が返ってきます。</p>

<h3>keysearch/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keysearch(Key, N, TupleList) &ndash;> {value, Tuple} | false</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Searches the list of tuples TupleList for a tuple whose Nth element compares equal to Key. Returns {value, Tuple} if such a tuple is found, otherwise false.</p>

<blockquote><p>This function is retained for backward compatibility. The function lists:keyfind/3 (introduced in R13A) is in most cases more convenient.</p></blockquote>

<p><a href="http://erlang.org/doc/man/lists.html#keysearch-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中で<code>N</code>番目の要素が<code>Key</code>である最初のタプルを探して、<code>{value, Tuple}</code>の形式で返します。見つからない場合は、<code>false</code>を返します。</p>

<p>なお、この関数は下位互換のために残っているものであり、R13Aより導入された<code>lists:keyfind/3</code>関数の方が便利です。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keysearch(c, 1,
1&gt; [
1&gt;   {a, 1},
1&gt;   {b, 1},
1&gt;   {c, 1},
1&gt;   {d, 1},
1&gt;   {c, 2}]).
{value,{c,1}}
2&gt; lists:keysearch(x, 1,
2&gt; [                    
2&gt;   {a, 1},            
2&gt;   {b, 1},            
2&gt;   {c, 1},            
2&gt;   {d, 1},            
2&gt;   {c, 2}]).          
false
</code></p>

<p>最初の例では1番目の要素が<code>c</code>であるタプルを探して<code>{value, {c, 1}}</code>のように返します。二番目に現れるものは返しません。</p>

<p>次の例では条件に該当するタプルがないために<code>false</code>が返ってきます。</p>

<h3>keysort/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keysort(N, TupleList1) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a list containing the sorted elements of the list TupleList1. Sorting is performed on the Nth element of the tuples. The sort is stable.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keysort-2">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>引数に渡されたタプルリストを<code>N</code>番目の要素でソートしたリストを返します。ソートは安定ソートです。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keysort(1,
1&gt; [
1&gt;   {x, 1},
1&gt;   {r, 1},
1&gt;   {t, 1},
1&gt;   {x, 2},
1&gt;   {c, 1},
1&gt;   {s, 1},
1&gt;   {r, 2},
1&gt;   {a, 1},
1&gt;   {x, 3}]).
[{a,1},{c,1},{r,1},{r,2},{s,1},{t,1},{x,1},{x,2},{x,3}]
</code></p>

<p>ソートされた結果が返ってきます。安定ソートのため、重複するキーに対しては元の順番が維持されます。</p>

<h3>keystore/4</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keystore(Key, N, TupleList1, NewTuple) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = [Tuple]</li>
<li>TupleList2 = [Tuple, &hellip;]</li>
<li>NewTuple = Tuple</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a copy of TupleList1 where the first occurrence of a tuple T whose Nth element compares equal to Key is replaced with NewTuple, if there is such a tuple T. If there is no such tuple T a copy of TupleList1 where [NewTuple] has been appended to the end is returned.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keystore-4">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中で一番最初に出てくる<code>N</code>番目の要素が<code>Key</code>であるタプルを、引数のタプルと交換したリストを返します。<code>Key</code>に一致するリストがない場合は、リストの最後に追加されて返されます。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keystore(b, 1,                                     
1&gt;   [{a, origin}, {b, origin}, {c, origin}, {b, not_store}],
1&gt;   {b, new_tuple}).
[{a,origin},{b,new_tuple},{c,origin},{b,not_store}]
2&gt; lists:keystore(x, 1,                                      
2&gt;   [{a, origin}, {b, origin}, {c, origin}, {b, not_store}],
2&gt;   {x, not_found}).                                        
[{a,origin},
 {b,origin},
 {c,origin},
 {b,not_store},
 {x,not_found}]
</code></p>

<p>最初の例では、1番目の要素が<code>b</code>であるタプルが、引数に与えられた新しいタプルに交換されたリストが返ってきます。</p>

<p>次の例では、該当するタプルが存在しないため、引数に与えられた新しいタプルがリストの最後に追加されて返ってきます。</p>

<h3>keytake/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keytake(Key, N, TupleList1) &ndash;> {value, Tuple, TupleList2} | false</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Searches the list of tuples TupleList1 for a tuple whose Nth element compares equal to Key. Returns {value, Tuple, TupleList2} if such a tuple is found, otherwise false. TupleList2 is a copy of TupleList1 where the first occurrence of Tuple has been removed.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keytake-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中から初めて現れる<code>N</code>番目の要素が<code>Key</code>であるタプルを取り出し、<code>{value, Tuple, TupleList2}</code>の形式で返します。戻されるタプルリストには条件に一致したタプルは含まれていません。一致するものがない場合は、<code>false</code>が返されます。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:keytake(b, 1,
1&gt; [{a, 1}, {b, 1}, {c, 1}, {b, 2}]).
{value,{b,1},[{a,1},{c,1},{b,2}]}
2&gt; lists:keytake(x, 1,               
2&gt; [{a, 1}, {b, 1}, {c, 1}, {b, 2}]).
false
</code></p>

<p>最初の例では一番最初に現れる1番目の要素が<code>b</code>のタプルが取り出され、後から現れるものは残ったリストとともに返されています。</p>

<p>次の例では、条件に一致するタプルがないため、<code>false</code>が返されます。</p>

<h3>last/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>last(List) &ndash;> Last</h4>

<h4>Types</h4>

<ul>
<li>List = [T, &hellip;]</li>
<li>Last = T</li>
<li>T = term()</li>
</ul>


<p>Returns the last element in List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#last-1">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>リストの最後の要素を返します。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:last([1,2,3,4,5]).
5
2&gt; lists:last([1]).
1
3&gt; lists:last([]).
** exception error: no function clause matching lists:last([]) (lists.erl, line 213)
</code></p>

<p>最初の例ではリストの最後の要素<code>5</code>が返されます。</p>

<p>次の例では長さ1のリストを引数として渡して、最後の要素=たったひとつの要素である<code>1</code>が返されます。</p>

<p>最後の例では長さ0のリストを引数として渡します。この場合は例外が発生します。</p>

<h3>map/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>map(Fun, List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A) &ndash;> B)</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>Takes a function from As to Bs, and a list of As and produces a list of Bs by applying the function to every element in the list. This function is used to obtain the return values. The evaluation order is implementation dependent.</p>

<p><a href="http://erlang.org/doc/man/lists.html#map-2">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>要素を返還する関数を引数に取ります。そしてリストの要素１つずつに関数を適用した結果が入ったリストが返されます。なお、実行順序は実装に依存しています。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:map(fun(X) -&gt; X rem 2 =:= 0 end, [1, 2, 3, 4, 5]).
[false,true,false,true,false]
</code></p>

<p>引数に偶数かどうか判定する関数を渡します。引数のリストは1から5までの整数ですので、<code>false</code>と<code>true</code>が繰り返されるリストが返ってきます。</p>

<h3>mapfoldl/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>mapfoldl(Fun, Acc0, List1) &ndash;> {List2, Acc1}</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A, AccIn) &ndash;> {B, AccOut})</li>
<li>Acc0 = Acc1 = AccIn = AccOut = term()</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>mapfoldl combines the operations of map/2 and foldl/3 into one pass.</p>

<p><a href="http://erlang.org/doc/man/lists.html#mapfoldl-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p><code>mapfoldl/3</code>関数は<code>map/2</code>関数と<code>foldl/3</code>関数を一つにまとめたような関数です。</p>

<h4>Example</h4>

<p>```
1> Multiply = fun ({R1, I1}, {R2, I2}) &ndash;>
1>     {R1 * R2 &ndash; I1 * I2, R1 * I2 + I1 * R2} end.</p>

<h1>Fun&lt;erl_eval.12.17052888></h1>

<p>2> lists:mapfoldl(fun(X, A) &ndash;> Res = Multiply(X, A), {Res, Res} end,
2>   {1, 0},
2> [{1, -1}, {-1, 1}, {-1, -1}, {1, -1}]).
{[{1,-1},{0,2},{2,-2},{0,-4}],{0,-4}}
```</p>

<p>複素数<code>{R, I}</code>に対して、掛け算をする関数<code>Multiply</code>を定義し、<code>lists:mapfoldl/3</code>で初期値<code>{1, 0}</code>から左から順繰りに掛け算をしていきます。返されたタプルの左要素には掛け算の経過が、タプルの右側の要素には最終的な掛け算の結果が返っています。</p>

<h3>mapfoldr/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>mapfoldr(Fun, Acc0, List1) &ndash;> {List2, Acc1}</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A, AccIn) &ndash;> {B, AccOut})</li>
<li>Acc0 = Acc1 = AccIn = AccOut = term()</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>mapfoldr combines the operations of map/2 and foldr/3 into one pass.</p>

<p><a href="http://erlang.org/doc/man/lists.html#mapfoldr-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p><code>mapfoldr</code>関数は<code>map/2</code>関数と<code>foldr/3</code>関数を組み合わせた関数です。</p>

<h4>Example</h4>

<p>```
1> Multiply = fun ({R1, I1}, {R2, I2}) &ndash;>
1>     {R1 * R2 &ndash; I1 * I2, R1 * I2 + I1 * R2} end.</p>

<h1>Fun&lt;erl_eval.12.17052888></h1>

<p>2> lists:mapfoldr(fun(X, A) &ndash;> Res = Multiply(X, A), {Res, Res} end,
2>   {1, 0},                                                      <br/>
2> [{1, -1}, {-1, 1}, {-1, -1}, {1, -1}]).                        <br/>
{[{0,-4},{2,-2},{-2,0},{1,-1}],{0,-4}}
```</p>

<p>先ほどと同じく複素数の計算をしています。返されたタプルの左側の順序が先ほどの<code>mapfoldl/3</code>関数と異なっていることがわかると思います。</p>

<h3>max/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>max(List) &ndash;> Max</h4>

<h4>Types</h4>

<ul>
<li>List = [T, &hellip;]</li>
<li>Max = T</li>
<li>T = term()</li>
</ul>


<p>Returns the first element of List that compares greater than or equal to all other elements of List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#max-1">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>他のすべての要素より大きい最初の要素を返します。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:max([0,-2,4,-6]).
4
</code></p>

<p>リストの中の最大値である<code>4</code>が返されます。</p>

<h3>member/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>member(Elem, List) &ndash;> boolean()</h4>

<h4>Types</h4>

<ul>
<li>Elem = T</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns true if Elem matches some element of List, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#member-2">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>指定した要素と一致する要素があれば<code>true</code>を、なければ<code>false</code>を返します。</p>

<h4>Example</h4>

<p><code>
1&gt; lists:member({a,1}, [{b,1},{c,1},{a,2},{d,1},{a,1}]).
true
2&gt; lists:member({a,1}, [{b,1},{c,1},{a,2},{d,1}]).      
false
</code></p>

<p>最初の例では指定した要素<code>{a,1}</code>に一致する要素がリストにあるため<code>true</code>が返ってきます。</p>

<p>次の例では指定した要素<code>{a,1}</code>に一致する要素がリストにないため<code>false</code>が返ってきます。</p>

<h2>次回</h2>

<p>次回は次の式の結果をやっていきます。</p>

<p>```erlang
lists:sublist(</p>

<pre><code>lists:sort(
    lists:map(
        fun({F, A}) -&gt;
            atom_to_list(F) ++
            "/" ++
            integer_to_list(A)
        end,
        lists:module_info(exports))),
17,
16).
</code></pre>

<p>```</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのlistsモジュールを試してみる - 第1回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/14/erlangfalselistsmoziyuruwoshi-sitemiru-di-1hui/"/>
    <updated>2013-05-14T03:15:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/14/erlangfalselistsmoziyuruwoshi-sitemiru-di-1hui</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p>Erlangのlistsモジュールを試してみるの第一回になります。</p>

<p>なお、最初の16個は</p>

<p>```erlang
lists:sublist(</p>

<pre><code>lists:sort(
    lists:map(
        fun({F, A}) -&gt;
            atom_to_list(F) ++
            "/" ++
            integer_to_list(A)
        end,
        lists:module_info(exports))),
1,
16).
</code></pre>

<p>```</p>

<p>の実行結果</p>

<p><code>
[
  "all/2",
  "any/2",
  "append/1",
  "append/2",
  "concat/1",
  "delete/2",
  "dropwhile/2",
  "duplicate/2",
  "filter/2",
  "flatlength/1",
  "flatmap/2",
  "flatten/1",
  "flatten/2",
  "foldl/3",
  "foldr/3",
  "foreach/2"
]
</code></p>

<p>です。</p>

<h3>all/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>all(Pred, List) &ndash;> boolean()</h4>

<h5>Types</h5>

<ul>
<li>Pred = fun((Elem :: T) &ndash;> boolean())</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns true if Pred(Elem) returns true for all elements Elem in List, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#all-2">参照元</a></p></blockquote>

<h4>解説</h4>

<ul>
<li>すべての要素が第一引数に与えられた関数で<code>true</code>になれば<code>true</code>を返します。</li>
<li>第一引数に与えられた関数で<code>false</code>になるものが一つでもあれば、<code>false</code>を返します。</li>
</ul>


<h4>実例</h4>

<p><code>
1&gt; lists:all(fun(X) -&gt; X rem 2 =:= 0 end, [0,2,4,6,8]).
true
2&gt; lists:all(fun(X) -&gt; X rem 2 =:= 0 end, [0,1,2,3,4]).
false
</code></p>

<p>偶数であることを判断する関数を第一引数に与えています。</p>

<p>最初の例では全部偶数である<code>[0, 2, 4, 8]</code>が与えられています。</p>

<p>その結果、<code>true</code>が返ってきます。</p>

<p>一方、二番目の例では単なる1間隔の順列<code>[1, 2, 3, 4]</code>が与えられています。</p>

<p>したがって、<code>false</code>が返ってきます。</p>

<h3>any/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>any(Pred, List) &ndash;> boolean()</h4>

<h5>Types</h5>

<ul>
<li>Pred = fun((Elem :: T) &ndash;> boolean())</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns true if Pred(Elem) returns true for at least one element Elem in List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#any-2">参照元</a></p></blockquote>

<h4>解説</h4>

<ul>
<li>リストの要素のうち、一つでも第一引数に渡した関数が<code>true</code>を返せば<code>true</code>が返ってきます。</li>
<li>リストの要素すべてで、第一引数の関数を満たさなければ<code>false</code>が返ってきます。</li>
</ul>


<h4>実例</h4>

<p><code>
1&gt; lists:any(fun(X) -&gt; is_integer(X) end,                                         1&gt;     [0.0, a, "hoge", 1, fun(X) -&gt; true end]).
true
2&gt; lists:any(fun(X) -&gt; is_integer(X) end,       
2&gt;     [0.0, a, "hoge", [1], fun(X) -&gt; true end]).
false
</code></p>

<p>整数であることを判断する関数を第一引数として与えています。</p>

<p>最初の例ではリストの4番目の要素<code>1</code>が整数ですので、この関数から<code>true</code>が返ってきます。したがって、実行結果は<code>true</code>となります。</p>

<p>２つ目の例では先ほどは整数だった<code>1</code>をリスト<code>[1]</code>に変更しています。そのため、関数が<code>true</code>を返すものがありません。したがって、実行結果は<code>false</code>になります。</p>

<h3>append/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>append(ListOfLists) &ndash;> List1</h4>

<h5>Types</h5>

<ul>
<li>ListOfLists = [List]</li>
<li>List = List1 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a list in which all the sub-lists of ListOfLists have been appended.</p>

<p><a href="http://erlang.org/doc/man/lists.html#append-1">参照元</a></p></blockquote>

<h4>解説</h4>

<p>リストの中に含まれる複数のリストを結合した新しいリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:append([[1], [2,3,4],[a,b,c]]).
[1,2,3,4,a,b,c]
2&gt; lists:append([[1],[2,[3,4],5],[a,b,c]]).
[1,2,[3,4],5,a,b,c]
</code></p>

<p>最初の例ではリストの中にある複数のリストが結合されて一つのリストにまとまります。</p>

<p>次の例ではリストの中にある複数のリストが結合されて一つのリストにまとまっていますが、リスト中のリスト中のリストは展開されません。</p>

<h3>append/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>append(List1, List2) &ndash;> List3</h4>

<h4>Types</h4>

<ul>
<li>List1 = List2 = List3 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a new list List3 which is made from the elements of List1 followed by the elements of List2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#append-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>リストを結合して新しいリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:append("ir", "of").
"irof"
</code></p>

<p>リスト<code>"ir"</code>とリスト<code>"of"</code>が結合されて、新しいリスト<code>"irof"</code>が返されます。</p>

<h3>concat/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>concat(Things) &ndash;> string()</h4>

<h4>Types</h4>

<ul>
<li>Things = [Thing]</li>
<li>Thing = atom() | integer() | float() | string()</li>
</ul>


<p>Concatenates the text representation of the elements of Things. The elements of Things can be atoms, integers, floats or strings.</p>

<p><a href="http://erlang.org/doc/man/lists.html#concat-1">参照元</a></p></blockquote>

<h4>解説</h4>

<p>リスト中の要素の文字列表現を結合する。要素はアトム、整数、浮動小数点数、文字列。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:concat([lists, ':', "concat", '/', 1]).
"lists:concat/1"
</code></p>

<p>アトム、アトム、文字列、アトム、整数を結合して文字列を出力しています。</p>

<h3>delete/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>delete(Elem, List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>Elem = T</li>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a copy of List1 where the first element matching Elem is deleted, if there is such an element.</p>

<p><a href="http://erlang.org/doc/man/lists.html#delete-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>リストから指定要素にマッチする最初の要素を削除したリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:delete(a, [q,a,w,s,e]).
[q,w,s,e]
2&gt; lists:delete(a, [f,o,o,b,a,r,b,a,z]).
[f,o,o,b,r,b,a,z]
3&gt; lists:delete(hoge, [foo, bar, baz]).
[foo,bar,baz]
</code></p>

<p>最初の例では、リストの中に指定した要素<code>a</code>があるため、それを削除したリストが返されます。</p>

<p>次の例では、リストの中に指定した要素<code>a</code>が２つありますが、最初の<code>a</code>が削除されたリストが返されます。</p>

<p>最後の例では、リストの中に指定した要素<code>hoge</code>と同じ要素がないため、元のリストと同じ内容のリストが返されます。</p>

<h3>dropwhile/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>dropwhile(Pred, List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>Pred = fun((Elem :: T) &ndash;> boolean())</li>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Drops elements Elem from List1 while Pred(Elem) returns true and returns the remaining list.</p>

<p><a href="http://erlang.org/doc/man/lists.html#dropwhile-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>引数として与えた関数<code>Pred(Elem)</code>が<code>true</code>を返す間、要素<code>Elem</code>をリストから削除して、残ったリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:dropwhile(fun(X) -&gt; X &lt; 5 end, [1,2,3,4,5,6,7]).
[5,6,7]
2&gt; lists:dropwhile(fun(X) -&gt; X &gt; 2 end,                       
2&gt;     [4,4,5,4,2,2,1,3,3,5]).
[2,2,1,3,3,5]
</code></p>

<p>最初の例では要素が<code>5</code>より小さい要素は除外され、<code>5</code>より大きいリストが返されます。</p>

<p>次の例では、要素が<code>2</code>より大きい間の要素は除外され、初めて<code>2</code>が出てきた後の要素が残ったリストが返されます。(返されたリストには関数が<code>true</code>を返すものが含まれます)</p>

<h3>duplicate/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>duplicate(N, Elem) &ndash;> List</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 0</li>
<li>Elem = T</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a list which contains N copies of the term Elem.</p>

<p><a href="http://erlang.org/doc/man/lists.html#duplicate-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>要素<code>Elem</code>を<code>N</code>回繰り返したリストが返されます。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:duplicate(5, irof).
[irof,irof,irof,irof,irof]
</code></p>

<p>要素<code>irof</code>が<code>5</code>回繰り返されたリストが返されます。</p>

<h3>filter/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>filter(Pred, List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>Pred = fun((Elem :: T) &ndash;> boolean())</li>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>List2 is a list of all elements Elem in List1 for which Pred(Elem) returns true.</p>

<p><a href="http://erlang.org/doc/man/lists.html#filter-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>リストの中から条件を満たす要素を取り出したリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:filter(fun(X) -&gt; X rem 3 =:= 0 end,
1&gt;     [1,2,3,4,5,6,7,8]).                  
[3,6]
</code></p>

<p>リストの中から<code>3</code>の剰余が<code>0</code>のものを取り出したリストを返します。</p>

<h3>flatlength/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>flatlength(DeepList) &ndash;> integer() >= 0</h4>

<h4>Types</h4>

<ul>
<li>DeepList = [term() | DeepList]</li>
</ul>


<p>Equivalent to <code>length(flatten(DeepList))</code>, but more efficient.</p>

<p><a href="http://erlang.org/doc/man/lists.html#flatlength-1">参照元</a></p></blockquote>

<h4>解説</h4>

<p>BIFの<code>length/1</code>関数と同様な関数ですが、より便利です。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:flatlength([[1,2,3],4,[[5,6],7]]).
7
2&gt; length([[1,2,3],4,[[5,6],7]]).
3
</code></p>

<p>内部にリストを含むリストに対して内部のリストの要素数を含む要素数を返します。最初の例では内部リストの要素の数を含めて<code>7</code>を返します。</p>

<p>一方、BIFの<code>length/1</code>では、内部リストを一つの要素として数えるため、<code>3</code>が返ってきます。</p>

<h3>flatmap/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>flatmap(Fun, List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A) &ndash;> [B])</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>Takes a function from As to lists of Bs, and a list of As (List1) and produces a list of Bs by applying the function to every element in List1 and appending the resulting lists.</p>

<p><a href="http://erlang.org/doc/man/lists.html#flatmap-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>第一引数には要素Aからリスト[B]を生成する関数を取ります。第二引数はリストです。そしてリスト[B]が結合されたリストが返されます。</p>

<h4>実例</h4>

<p>```
1> lists:flatmap(fun(X) &ndash;> [X * 2, X * 2 + 1] end,          <br/>
1>     [0,1,2,3]).
[0,1,2,3,4,5,6,7]
2> lists:flatmap(fun(X) &ndash;> X * X end, [1,2,3,4]).
** exception error: bad argument</p>

<pre><code> in operator  ++/2
    called as 16 ++ []
 in call from lists:flatmap/2 (lists.erl, line 1235)
 in call from lists:flatmap/2 (lists.erl, line 1235)
</code></pre>

<p>```</p>

<p>最初の例での第一引数の関数は、入力された要素を倍にした値と、倍にした値に1を加えた値の二つを要素としてもつリストを返します。これをリスト<code>[0, 1, 2, 3]</code>に対して実行し、最終的にそれらを結合したリスト<code>[0,1,2,3,4,5,6,7]</code>が返ってきます。</p>

<p>次の例では、第一引数の関数は入力された要素の二乗を返します。これをリスト<code>[1, 2, 3, 4]</code>に対して実行します。しかし第一引数が返す値はリストではないため、例外が発生して終了します。</p>

<h3>flatten/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>flatten(DeepList) &ndash;> List</h4>

<h4>Types</h4>

<ul>
<li>DeepList = [term() | DeepList]</li>
<li>List = [term()]</li>
</ul>


<p>Returns a flattened version of DeepList.</p>

<p><a href="http://erlang.org/doc/man/lists.html#flatten-1">参照元</a></p></blockquote>

<h4>解説</h4>

<p>内部にリストを持つリストのネストをなくしたリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:flatten([1,2,[3,4,[5],6],[[[7],8]],9]).
[1,2,3,4,5,6,7,8,9]
</code></p>

<p>内部にリストを持つリストから、ネストなしリストを返します。</p>

<h3>flatten/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>flatten(DeepList, Tail) &ndash;> List</h4>

<h4>Types</h4>

<ul>
<li>DeepList = [term() | DeepList]</li>
<li>Tail = List = [term()]</li>
</ul>


<p>Returns a flattened version of DeepList with the tail Tail appended.</p>

<p><a href="http://erlang.org/doc/man/lists.html#flatten-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>最初のネストがあるリストに<code>lists:flatten/1</code>を施して、第二引数のリストを追加したリストを返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:flatten(                         
1&gt;     [1,[2,3,[[4],5]],6], [7,8]).
[1,2,3,4,5,6,7,8]
2&gt; lists:flatten(                    
2&gt;     [1,[2,3,[[4],5]],6], [[7],8]).
[1,2,3,4,5,6,[7],8]
</code></p>

<p>最初の例では、ネストしたリストからネストを外し、第二引数のリストを追加したリストが返ってきます。</p>

<p>次の例でも、第一引数のネストしたリストのネストが外れ、第二引数のリストを追加したものが返ってきますが、第二引数のリストのネストは残ったままとなります。</p>

<h3>foldl/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>foldl(Fun, Acc0, List) &ndash;> Acc1</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((Elem :: T, AccIn) &ndash;> AccOut)</li>
<li>Acc0 = Acc1 = AccIn = AccOut = term()</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Calls Fun(Elem, AccIn) on successive elements A of List, starting with AccIn == Acc0. Fun/2 must return a new accumulator which is passed to the next call. The function returns the final value of the accumulator. Acc0 is returned if the list is empty.</p>

<p><a href="http://erlang.org/doc/man/lists.html#foldl-3">参照元</a></p></blockquote>

<h4>解説</h4>

<p>リストの左側から１つずつ要素を取り出し、第一引数の関数を連続で呼び出します。第一引数の関数は二つの引数を取り、次回の引数として使われる値を返します。第二引数には初期値を与えます。<code>lists:foldl</code>関数は最後の第一引数の関数の結果を返します。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:foldl(fun(X, Accum) -&gt; X + Accum end,
1&gt;     0, [1,2,3,4,5]).
15
2&gt; lists:foldl(fun(X, Accum) -&gt; [X * X | Accum] end,
2&gt;     [], [1,2,3,4,5]).                            
[25,16,9,4,1]
</code></p>

<p>最初の例では初期値0からリスト<code>[1,2,3,4,5]</code>を順番に足していき、最後の結果<code>15</code>を返します。</p>

<p>次の例では、初期値<code>[]</code>のリストにリスト<code>[1,2,3,4,5]</code>の要素の二乗を追加していき、最終的にリスト<code>[25,16,9,4,1]</code>を返します。</p>

<h3>foldr/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>foldr(Fun, Acc0, List) &ndash;> Acc1</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((Elem :: T, AccIn) &ndash;> AccOut)</li>
<li>Acc0 = Acc1 = AccIn = AccOut = term()</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Like <code>foldl/3</code>, but the list is traversed from right to left.</p>

<p><a href="http://erlang.org/doc/man/lists.html#foldr-3">参照元</a></p></blockquote>

<h4>解説</h4>

<p><code>lists:foldl/3</code>と同様に順次計算していきますが、<code>lists:foldr/3</code>では関数の引数をリストの右から左の順番で取っていきます。</p>

<h4>実例</h4>

<p><code>
1&gt; lists:foldr(fun(X, Accum) -&gt; X + Accum end,
1&gt;     0, [1,2,3,4,5]).
15
2&gt; lists:foldr(fun(X, Accum) -&gt; [{X, X * X}|Accum] end,
2&gt;     [], [1,2,3,4,5]).
[{1,1},{2,4},{3,9},{4,16},{5,25}]
</code></p>

<p>最初の例では、初期値<code>0</code>に対してリスト<code>[1,2,3,4,5]</code>の要素を右側から足していき、最後の結果<code>15</code>を返します。</p>

<p>次の例では、初期値<code>[]</code>に、リスト<code>[1,2,3,4,5]</code>の元の数とその二乗のペアを右側から追加していき、最後の結果<code>[{1,1}, {2,4}, {3,9}, {4,16}, {5,25}]</code>を返します。</p>

<h3>foreach/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>foreach(Fun, List) &ndash;> ok</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((Elem :: T) &ndash;> term())</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Calls Fun(Elem) for each element Elem in List. This function is used for its side effects and the evaluation order is defined to be the same as the order of the elements in the list.</p>

<p><a href="http://erlang.org/doc/man/lists.html#foreach-2">参照元</a></p></blockquote>

<h4>解説</h4>

<p>第一引数に与えられた関数をリストの要素すべてに適用します。この関数は副作用のある処理に用いられます。処理順はリストの順番に実行されます。</p>

<h4>実例</h4>

<p><code>
3&gt; lists:foreach(fun(X) -&gt;                                                
3&gt;     io:format("~p x ~p = ~p~n",
3&gt;         [X, X, X * X]) end,
3&gt;     [1,2,3,4,5]).
1 x 1 = 1
2 x 2 = 4
3 x 3 = 9
4 x 4 = 16
5 x 5 = 25
ok
</code></p>

<p>リストの要素を順番に標準出力に出力しています。</p>

<h2>次回</h2>

<p>次回は次の式の結果をやっていきます。</p>

<p>```erlang
lists:sublist(</p>

<pre><code>lists:sort(
    lists:map(
        fun({F, A}) -&gt;
            atom_to_list(F) ++
            "/" ++
            integer_to_list(A)
        end,
        lists:module_info(exports))),
17,
16).
</code></pre>

<p>```</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのリスト系モジュールを試してみる - 第0回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/11/erlangfalserisutoguan-shu-woshi-sitemiru/"/>
    <updated>2013-05-11T01:50:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/11/erlangfalserisutoguan-shu-woshi-sitemiru</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>Erlangの初心者・初級・初歩レベルの僕にとって、</p>

<p>まず色々とBIFだとか、基本的なモジュールを使いこなせるのが、</p>

<p>上達への近道かと思ったので、</p>

<p><code>lists</code>モジュールについて、</p>

<p>すべての関数を試してみようと思います。</p>

<h3>モジュール情報を表示する</h3>

<p>まず、モジュールの情報を表示するモジュールcのコマンドは</p>

<p><code>m(Module)</code>関数です。</p>

<p>早速<code>lists</code>モジュールに試して見る。</p>

<p>```
1> m(lists).
Module lists compiled: Date: February 25 2013, Time: 19.27
Compiler options:  [{outdir,&ldquo;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../ebin&rdquo;},</p>

<pre><code>                {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../include"},
                {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../../kernel/include"},
                warnings_as_errors,debug_info]
</code></pre>

<p>Object file: /opt/local/lib/erlang/lib/stdlib-1.19.1/ebin/lists.beam
Exports:
all/2                         nthtail/2
any/2                         partition/2
append/2                      prefix/2
append/1                      reverse/1
concat/1                      reverse/2
delete/2                      rkeymerge/3
dropwhile/2                   rmerge/2
duplicate/2                   rmerge/3
filter/2                      rmerge3/3
flatlength/1                  rukeymerge/3
flatmap/2                     rumerge/3
flatten/2                     rumerge/2
flatten/1                     rumerge3/3
foldl/3                       seq/2
foldr/3                       seq/3
foreach/2                     sort/2
keydelete/3                   sort/1
keyfind/3                     split/2
keymap/3                      splitwith/2
keymember/3                   sublist/3
keymerge/3                    sublist/2
keyreplace/4                  subtract/2
keysearch/3                   suffix/2
keysort/2                     sum/1
keystore/4                    takewhile/2
keytake/3                     ukeymerge/3
last/1                        ukeysort/2
map/2                         umerge/3
mapfoldl/3                    umerge/1
mapfoldr/3                    umerge/2
max/1                         umerge3/3
member/2                      unzip/1
merge/1                       unzip3/1
merge/2                       usort/2
merge/3                       usort/1
merge3/3                      zf/2
min/1                         zip/2
module_info/0                 zip3/3
module_info/1                 zipwith/3
nth/2                         zipwith3/4
ok</p>

<p>```</p>

<p>関数がたくさんあって、数えるの面倒いな…</p>

<h3>詳細なモジュール情報を表示する</h3>

<p><code>lists:module_info/0</code>関数でも同じようなものを調べられる。</p>

<p>```
2> lists:module_info().
[{exports,[{append,2},</p>

<pre><code>       {append,1},
       {subtract,2},
       {nth,2},
       {nthtail,2},
       {prefix,2},
       {suffix,2},
       {last,1},
       {seq,2},
       {seq,3},
       {sum,1},
       {duplicate,2},
       {min,1},
       {max,1},
       {sublist,3},
       {sublist,2},
       {zip,2},
       {unzip,1},
       {zip3,3},
       {unzip3,1},
       {zipwith,3},
       {zipwith3,4},
       {merge,1},
       {merge3,3},
       {rmerge3,...},
       {...}|...]},
</code></pre>

<p> {imports,[]},
 {attributes,[{vsn,[257948301539042745638557295194154171573]}]},
 {compile,[{options,[{outdir,&ldquo;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../ebin&rdquo;},</p>

<pre><code>                 {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../include"},
                 {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../../kernel/include"},
                 warnings_as_errors,debug_info]},
       {version,"4.9"},
       {time,{2013,2,25,19,27,47}},
       {source,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/lists.erl"}]}]
</code></pre>

<p>```</p>

<p><code>exports</code>されている関数、</p>

<p>途中で表示が切れてまんがな…</p>

<h3>BIFとかリスト内包表記で頑張ってみる</h3>

<p>今はエントリーの長さに影響をする関数の数を知りたいので、</p>

<p>リストの内包表記で<code>lists:module_info/0</code>の</p>

<p>結果を絞って、BIFの</p>

<ul>
<li><code>length/1</code> &ndash; リストの長さを取得する</li>
<li><code>hd/1</code> &ndash; リストの先頭要素を取得する</li>
</ul>


<p>を用いて<code>lists</code>モジュールの関数の数を数えてみる。</p>

<p><code>
3&gt; length(hd([Items || {Atom, Items} &lt;- lists:module_info(), Atom =:= exports])).
80
</code></p>

<p>というわけで、80もあるので、</p>

<p>16個ずつ調べていこうと思う。</p>

<blockquote><p>追記 (2013/05/13 9:16)</p>

<p>2013/05/12 21:19 頃に</p>

<p><a href="https://github.com/voluntas">voluntasさん</a>(<a href="http://twitter.com/voluntas">@voluntas</a>)から
メッセージをいただきました。</p>

<p><code>length(lists:module_info(exports))</code></p>

<p>で同じ事が取得できるとのこと。</p>

<p>実際にやってみたら</p>

<p><code>
1&gt; length(lists:module_info(exports)).
80
</code></p>

<p>あ、できた、ありがとうございます！</p>

<p>ちなみにドキュメントにもありました。</p>

<p><a href="http://erlang.org/doc/reference_manual/modules.html#id74571">The module_info/0 and module_info/1 functions</a></p>

<p>ドキュメント読まんとイケませんね</p></blockquote>

<h3>まとめ</h3>

<p>まとめもクソもないのですが、</p>

<p>次回から約5回にわたって、</p>

<p><code>lists</code>モジュールの関数を試していきます。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
</feed>
