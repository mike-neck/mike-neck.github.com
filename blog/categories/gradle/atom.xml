<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gradle | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-06-13T23:33:35+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gradleのjavadocタスクでjavadocを英語で出力する方法]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/13/how-to-generate-javadoc-in-english-on-japanese-environment/"/>
    <updated>2013-06-13T22:39:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/13/how-to-generate-javadoc-in-english-on-japanese-environment</id>
    <content type="html"><![CDATA[<p><img src="http://www.gradle.org/img/gradle_logo.gif"/></p>

<p>こんにちわ、みけです。</p>

<p>表題の件はこの記事の前半部分に書いています。</p>

<p>なので、必要な人は前半部分だけ読んで下さい。</p>

<hr />

<p>大した話ではありませんが、</p>

<h1>gradleのjavadocタスクで出力されるjavadocが日本語で出力される</h1>

<p>のがちょっと残念な時があります。</p>

<p><code>java</code>プラグインを入れていれば、<code>javadoc</code>タスクが自動で追加されます。</p>

<p>僕のような日本語環境でやっている人だと、</p>

<p>頑張ってjavadocを英語で書いても、</p>

<p>テンプレートが日本語で出力されてしまいます。</p>

<p>会社で日本語を使っていて、</p>

<p>javadocが日本語でないと困る場合は、</p>

<p>全然問題ないとおもいますが…</p>

<p>オープンソースなソフトウェアを開発している場合、</p>

<p>javadocが日本語だとなんか若干困ります。</p>

<p>(まあ、だいたいjavadocのテンプレートなんで、何が出力されているかなんてわかりますけどね…)</p>

<h1><code>javadoc</code>タスクの設定で<code>options.locale</code>に<code>en_US</code>を指定すればいいです</h1>

<p>つまり、以下のとおりになります。</p>

<p>```groovy build.gradle
apply plugin : &lsquo;java&rsquo;</p>

<p>javadoc {</p>

<pre><code>options.locale = 'en_US'
</code></pre>

<p>}
```</p>

<p><strong>本題、終わり</strong></p>

<hr />

<p>ちなみに、僕の得意技はtypoなので、間違えてこんなビルドスクリプト書いてました。</p>

<p><strong>(誤)</strong></p>

<p>```groovy build.gradle
apply plugin : &lsquo;java&rsquo;</p>

<p>javadoc {</p>

<pre><code>options.local = 'en_US'
</code></pre>

<p>}
```</p>

<p>これを実行したら、こんなエラーが出力されました。</p>

<p>```
$ gradle javadoc
Picked up _JAVA_OPTIONS: -Dfile.encoding=UTF-8</p>

<p>FAILURE: Build failed with an exception.</p>

<ul>
<li><p>Where:
Script &lsquo;/Users/mike/myprojects/sample/build.gradle&rsquo; line: 4</p></li>
<li><p>What went wrong:
A problem occurred evaluating script.</p>

<blockquote><p>No such property: local for class: org.gradle.external.javadoc.StandardJavadocDocletOptions
Possible solutions: locale</p></blockquote></li>
<li><p>Try:
Run with &mdash;stacktrace option to get the stack trace. Run with &mdash;info or &mdash;debug option to get more log output.</p></li>
</ul>


<p>BUILD FAILED</p>

<p>Total time: 8.941 secs
```</p>

<p>gradle曰く</p>

<blockquote><p><code>local</code>なんてオプションないよ、<code>locale</code>じゃない？</p></blockquote>

<p>というわけで、</p>

<h1>gradleさん正しい答えを教えてくれたりと、親切ですね。</h1>

<p>本当に親切なツールです。</p>

<p>しかし、</p>

<h1>本当に親切なのはgroovyの思想</h1>

<p>です。</p>

<p>例えば次のようなgroovyのスクリプトがあるとします。</p>

<p>```groovy error.groovy
def range = 1..10
range.colect {</p>

<pre><code>println (it * it)
</code></pre>

<p>}
```</p>

<p>これを実行するとこういうエラーが出力されます。</p>

<p>```
$ groovy error.groovy
Caught: groovy.lang.MissingMethodException: No signature of method: groovy.lang.IntRange.colect() is applicable for argument types: (error$<em>run_closure1) values: [error$</em>run_closure1@639d564]
Possible solutions: collect(), collect(), collect(groovy.lang.Closure), collect(groovy.lang.Closure), collect(java.util.Collection, groovy.lang.Closure), collect(java.util.Collection, groovy.lang.Closure)
groovy.lang.MissingMethodException: No signature of method: groovy.lang.IntRange.colect() is applicable for argument types: (error$<em>run_closure1) values: [error$</em>run_closure1@639d564]
Possible solutions: collect(), collect(), collect(groovy.lang.Closure), collect(groovy.lang.Closure), collect(java.util.Collection, groovy.lang.Closure), collect(java.util.Collection, groovy.lang.Closure)</p>

<pre><code>at error.run(error.groovy:2)
</code></pre>

<p>```</p>

<p>存在しないメソッドを呼び出した時に、</p>

<p><strong>Possible solutions</strong>ということで、</p>

<p>サジェストしてくれます。</p>

<p>また、有名な例ですが、Power Assertもあります。</p>

<p><code>groovy error.groovy
def list = [1,1,2,3,4,5]
assert list - [1,3,6] == [1,2,4,5]
</code></p>

<p>これを実行すると、このように表示されます。</p>

<p>```
$ groovy error.groovy
Caught: Assertion failed:</p>

<p>assert list &ndash; [1,3,6] == [1,2,4,5]</p>

<pre><code>   |    |         |
   |    [2, 4, 5] false
   [1, 1, 2, 3, 4, 5]
</code></pre>

<p>Assertion failed:</p>

<p>assert list &ndash; [1,3,6] == [1,2,4,5]</p>

<pre><code>   |    |         |
   |    [2, 4, 5] false
   [1, 1, 2, 3, 4, 5]

at error.run(error.groovy:2)
</code></pre>

<p>```</p>

<p>ただ、求めている結果と実際の結果が<strong>違う</strong>という表示だけでなく、</p>

<p>実際の値を示してくれます。</p>

<p>つまり一言で言えば、</p>

<h1>groovyの半分は優しさでできています</h1>

<p>なお、この機能はもともとからgroovyにあったわけではなく、</p>

<p>Spockというテスティングフレームワークから採用された機能です。</p>

<p>groovyの思想では、こういった、(・∀・)ｲｲﾈ!!な機能を</p>

<p>どんどん取り込んでいくというのがあると思っています。</p>

<p>まあ、元々、javaを良い感じで書きたいといった思想から生まれている言語ですし、</p>

<p>実際に、rubyなど他の言語のいいところを借りたりしているので、</p>

<p>後発の優位性を遺憾なく発揮しているわけですが…</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gradleとJUnitのEnclosedの話]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/25/an-falseding-xian-nihamatutetaren-gaitagradletojunitfalseenclosedfalsehua/"/>
    <updated>2013-05-25T23:19:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/25/an-falseding-xian-nihamatutetaren-gaitagradletojunitfalseenclosedfalsehua</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p><a href="http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita/">先ほど書いたエントリー</a>でテストをgradleで走らせたのですが、</p>

<blockquote class="twitter-tweet" lang="ja"><p>gradleでテストした時に謎のclassMethodとかいうテストが勝手に挟み込まれて、落ちて困っている</p>&mdash; もちださんさん (@mike_neck) <a href="https://twitter.com/mike_neck/status/338275875294441472">2013年5月25日</a></blockquote>


<script async src="http://mike-neck.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>という状態が発生してました。</p>

<p>具体的には、</p>

<p>```java
package org.mikeneck.multithreads;</p>

<p>import org.junit.*;
import org.junit.experimental.runners.Enclosed;
import org.junit.rules.TestName;
import org.junit.runner.RunWith;</p>

<p>import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;</p>

<p>import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;</p>

<p>/<em>*
 * @author mike
 </em>/
@RunWith(Enclosed.class)
public class SimpleSocketTest {</p>

<pre><code>public static class SingleClient {

    private static final ExecutorService SERVICE = Executors.newFixedThreadPool(1);

    private static final int PORT = 12521;

    private static final String LOCALHOST = "localhost";

    private SimpleClient client;

    @Rule
    public TestName testName = new TestName();

    @BeforeClass
    public static void start () throws IOException {
        SERVICE.execute(new SimpleServer(PORT));
    }

    @Before
    public void setup () throws IOException {
        client = new SimpleClient(LOCALHOST, PORT);
    }

    @After
    public void tearDown () throws Exception {
        System.out.println(testName.getMethodName() + " is closing");
        client.close();
    }

    @AfterClass
    public static void end () throws IOException {
        new SimpleClient(LOCALHOST, PORT).open().bye();
    }

    @Test
    public void socketProcessing () throws IOException {
        client.open();
        String message = client.sendMessage("Hello");
        System.out.println("Message from Server [" + message + "]");
        assertThat(message, is("Hello"));
        System.out.println("Assertion ends.");
    }
}
</code></pre>

<p>}
```</p>

<p>というテストに対して、</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRaS15VXNZRTNVWUU" style="width : 424px; height : 262px;" /></p>

<p>という感じで、謎の<code>classMethod</code>というテストが追加されていて、</p>

<p>実行されてテストが落ちてしまうようです。</p>

<h2>先駆者はいた</h2>

<p>とりあえず、<code>gradle</code>、<code>Enclosed</code>、<code>Junit</code>でググっていたところ、</p>

<p>次の二つのエントリーを発見しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/irof/20120430/p1">GradleでEnclosedのテストが二回実行されるんだ</a></li>
<li><a href="http://d.hatena.ne.jp/shuji_w6e/20120808/1344386399">GradleでEnclosedテストが2回実行されることの対策</a></li>
</ul>


<p>というわけで、<code>gradle</code>と<code>Enclosed</code>の相性がわるいっぽい…</p>

<h2>gradleでEnclosedなテストをする時の対策</h2>

<p>というわけで、<a href="https://twitter.com/shuji_w6e">@shuji_w6e</a>さんのページによると</p>

<p><strong>テストの実行時に除外クラスを指定すること。</strong></p>

<p>だそうです。</p>

<p>```groovy build.gradle
apply plugin : &lsquo;groovy&rsquo;
apply plugin : &lsquo;idea&rsquo;</p>

<p>group = &lsquo;org.mikeneck.multithreads&rsquo;
version = &lsquo;1.0&rsquo;</p>

<p>def compatibility = 1.7</p>

<p>sourceCompatibility = compatibility
targetCompatibility = compatibility</p>

<p>repositories {</p>

<pre><code>mavenCentral ()
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile 'org.codehaus.groovy:groovy-all:2.1.3'
testCompile ('junit:junit:4.11') {
    exclude module : 'hamcrest-core'
    exclude module : 'hamcrest'
}
testCompile 'org.hamcrest:hamcrest-library:1.+'
</code></pre>

<p>}</p>

<p>test {</p>

<pre><code>exclude '**/*$*'
</code></pre>

<p>}
```</p>

<p>とりあえず、テストクラスを除外してみました。</p>

<h2>結果</h2>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRczBZcy04U2tNMms" style="width : 424px; height : 252px;"" /></p>

<p>という感じで、テストが通りました。</p>

<p><!-- admax -->
<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>
<!-- admax -->


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gradle1.6からgroovyのconfigurationはdeprecatedになっています]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/22/gradle1-dot-6karagroovyfalseconfigurationhadeprecatedninatuteimasu/"/>
    <updated>2013-05-22T20:08:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/22/gradle1-dot-6karagroovyfalseconfigurationhadeprecatedninatuteimasu</id>
    <content type="html"><![CDATA[<h2>gradle1.6からgroovyのconfigurationは非推奨になっています</h2>

<p>まあ今さらですが、さきほどbuild.gradleを書いた時に、</p>

<p>```
$ gradle idea
The groovy configuration has been deprecated and is scheduled to be removed in Gradle 2.0. Typically, usages of &lsquo;groovy&rsquo; can simply be replaced with &lsquo;compile&rsquo;. In some cases, it may be necessary to additionally configure the &lsquo;groovyClasspath&rsquo; property of GroovyCompile and Groovydoc tasks.
:ideaModule
Download <a href="http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.pom">http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.pom</a>
Download <a href="http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3-sources.jar">http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3-sources.jar</a>
Download <a href="http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.jar">http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.jar</a>
:ideaProject
:ideaWorkspace
:idea</p>

<p>BUILD SUCCESSFUL</p>

<p>Total time: 11.174 secs
$
```</p>

<p>と表示されたので、「うぉっ」と思ってドキュメントを読んでみました。</p>

<p><a href="http://www.gradle.org/docs/current/release-notes#groovy-configuration-is-deprecated">groovy configuration is deprecated</a></p>

<p>じゃあ、今後どうするのかというと、</p>

<h1>compile configurationにgroovyのartifactを指定する</h1>

<p>ということです。</p>

<p>つまり、これまでは</p>

<p>```groovy build.gradle
dependencies {</p>

<pre><code>groovy : 'org.codehaus:groovy:groovy-all:2.1.3'
</code></pre>

<p>}
```</p>

<p>と書いていましたが、</p>

<p>```groovy build.gradle
dependencies {</p>

<pre><code>compile : 'org.codehaus.groovy:groovy-all:2.1.3'
</code></pre>

<p>}
```</p>

<p>と書けばよいようです。</p>

<table>
<tbody>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B009X5KIFK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=3864900492" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1617291307" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</tbody>
</table>



]]></content>
  </entry>
  
</feed>
