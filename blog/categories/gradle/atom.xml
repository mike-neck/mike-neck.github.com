<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gradle, | mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2014-06-13T14:23:57+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GradleでHerokuのアプリを作ってみる]]></title>
    <link href="http://mike-neck.github.io/blog/2014/06/11/gradledeherokufalseapuriwozuo-tutemiru/"/>
    <updated>2014-06-11T17:51:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2014/06/11/gradledeherokufalseapuriwozuo-tutemiru</id>
    <content type="html"><![CDATA[<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRb2JjNjFTYUhILTQ" style="width : 400px;"/></p>

<p>久々にブログ書いています。</p>

<p>こんにちわ、みけです。</p>

<p>昨年の7月〜8月頃から、家をでるのが困難になり、</p>

<p>かつ何の活動をするのも億劫になっていたため、</p>

<p>ブログすらまともに書いていませんでした。</p>

<h2>GradleでHerokuにアプリケーションをデプロイする</h2>

<p><strong>Gradle Heroku</strong>で検索をするとGradleで作ったアプリケーションを</p>

<p>Herokuにデプロイする方法が出てきます。</p>

<p>ただ、まあ、なんというか、みんなJetty embbededを使って<code>static void main</code>から</p>

<p>始まるアプリケーションが多かったので、</p>

<p>jetty-runnerでwarファイルを走らせる方法をここではまとめてあります。</p>

<p>…</p>

<p>もう既にJava好きな皆さんにとっては、なんというかもう常識的なことなので、</p>

<p>ここに書いてあることは当たり前なのかもしれませんが…</p>

<p>以下、必要なファイル毎に書いていきます。</p>

<ul>
<li>build.gradle</li>
<li>Procfile</li>
<li>system.properties</li>
</ul>


<h2>build.gradle</h2>

<p>Herokuでjetty-runnerでwebアプリを動かす場合に注意する点は次のとおりです</p>

<h3><code>gradle wrapper</code>を実行しておく</h3>

<p>実行する<code>gradle</code>のバージョンを一致させるために</p>

<p><code>gradle wrapper</code>を実行しておきます。</p>

<p><code>
$ gradle wrapper
</code></p>

<p>これで、プロジェクトのディレクトリーに<code>gradlew</code>が作成されていることを確認しておきます。</p>

<h3><code>jetty</code>プラグインを使う</h3>

<p>これは別に<code>war</code>プラグインでも構いませんが、</p>

<p>ローカルで動かしてテストしたいだろうと思いますので、</p>

<p><code>jetty</code>プラグインを使います。</p>

<p><code>groovy build.gradle
apply plugin : 'jetty'
</code></p>

<h3><code>providedCompile</code> configurationで<code>jetty-runner</code>を指定する</h3>

<p><code>jetty-runner</code>でHerokuアプリを走らせますので、</p>

<p><code>providedCompile</code> configurationで<code>jetty-runner</code>を指定しておきます。</p>

<p>```groovy build.gradle
repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}
dependencies {</p>

<pre><code>compile 'javax.servlet:javax.servlet-api:3.1.0'
providedCompile ('org.eclipse.jetty:jetty-runner:9.2.0.v20140526') {
    exclude module : 'javax.servlet-api'
}
testCompile 'junit:junit:4.11'
</code></pre>

<p>}
```</p>

<hr />

<p>また、<code>jetty-runner</code>をディレクトリー指定してダウンロードさせるために、</p>

<p><code>Copy</code>タイプのタスクを作成します。</p>

<p>```groovy build.gradle
task copyJetty (type : Copy) {</p>

<pre><code>into "$buildDir/jetty"
from configurations.providedCompile
</code></pre>

<p>}
```</p>

<h3><code>stage</code>タスクを用意する</h3>

<p>HerokuでのGradleアプリケーションは<code>stage</code>タスクにてアプリケーションのビルドをします。</p>

<p>そのため、<code>stage</code>タスクに実行させておきたいタスクを記述しておきます。</p>

<p><code>groovy build.gradle
task stage (dependsOn : ['clean', 'copyJetty'])
stage.finalizedBy build
</code></p>

<p>上記で作成した<code>copyJetty</code>タスクは何故かファイルを上書きしてしまったので、</p>

<p>task finalizationで最終的に<code>build</code>タスクを実行させます。</p>

<p>これらをまとめた<code>build.gradle</code>は次のとおり</p>

<p>```groovy build.gradle
apply plugin : &lsquo;jetty&rsquo;
repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}
dependencies {</p>

<pre><code>compile 'javax.servlet:javax.servlet-api:3.1.0'
providedCompile ('org.eclipse.jetty:jetty-runner:9.2.0.v20140526') {
    exclude module : 'javax.servlet-api'
}
testCompile 'junit:junit:4.11'
</code></pre>

<p>}
task copyJetty (type : Copy) {</p>

<pre><code>into "$buildDir/jetty"
from configurations.providedCompile
</code></pre>

<p>}
task stage (dependsOn : [&lsquo;clean&rsquo;, &lsquo;copyJetty&rsquo;])
stage.finalizedBy build
```</p>

<h2>Procfile</h2>

<p><code>Procfile</code>にはアプリケーション実行のコマンドを記述しておきます。(あまりよくわかってない…)</p>

<p>最初、僕はこのファイルでgradleの<code>jettyRunWar</code>を実行させようとしていたのですが、</p>

<p>見事にコケてました。</p>

<p><code>bash Procfile
web: java $JAVA_OPTS -jar build/jetty/jetty-runner-9.2.0.v20140526.jar --port $PORT build/libs/*.war
</code></p>

<p>またHerokuのgradlewで作成されるwarファイルも、</p>

<p>なんかランダムな文字列になっているので、</p>

<p>warファイル指定にワイルドカードを使っています。</p>

<h2>system.properties</h2>

<p>ここにはJavaのバージョンを指定します。</p>

<p>僕はJava8を使いたかったのでjava8を指定します。</p>

<p><code>java system.properties
java.runtime.version=1.7
</code></p>

<h2>Herokuへのアプリケーションのデプロイ</h2>

<p>Herokuへのデプロイは皆さんが御存知の通りで、</p>

<p>僕が説明するまでのことはないでしょう。</p>

<ul>
<li>toolbeltをインストールする</li>
<li>Herokuアカウントを作成する</li>
<li>Herokuにssh-keyを登録する</li>
<li>heroku側にアプリケーションを作成する</li>
<li>herokuにpushする</li>
</ul>


<p>heroku側にアプリケーションを作成するために、次のコマンドを打ちます</p>

<p><code>bash command-line
$ heroku create
</code></p>

<p>herokuにpushするために次のコマンドを打ちます</p>

<p><code>bash command-line
$ git push heroku master
</code></p>

<p>これでアプリケーションのデプロイが完了します。</p>

<p>{% render_partial _includes/post/post_footer.html %}</p>
]]></content>
  </entry>
  
</feed>
