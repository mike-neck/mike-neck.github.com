<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-05-13T10:56:07+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[プログラマーのための会計知識・用語 - (1)]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/13/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-1/"/>
    <updated>2013-05-13T10:17:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/13/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-1</id>
    <content type="html"><![CDATA[<p>こんにちわみけです。</p>

<p>一般的にエンタープライズ系プログラマーは</p>

<p>会計用語の英単語は丸暗記していると聞きました。</p>

<p>僕は戦えないエンタープライズ系プログラマーなので、</p>

<p>今、猛勉強しています。</p>

<h2>超基本用語</h2>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 英単語 </th>
<th align="center"> 日本語 </th>
<th align="left"> 意味 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Assets </td>
<td align="center"> 資産 </td>
<td align="left"> 今持っている価値のある物 |</td>
</tr>
<tr>
<td></td>
<td align="left"> Liabilities </td>
<td align="center"> 負債 </td>
<td align="left"> 外部に起因する価値 |</td>
</tr>
<tr>
<td></td>
<td align="left"> Capital </td>
<td align="center"> 資本 </td>
<td align="left"> 権利者が持っている価値 |</td>
</tr>
</tbody>
</table>


<h2>基本重要式</h2>

<ul>
<li><strong>Assets = Liabilities + Capital</strong></li>
<li><strong>資産 = 負債 + 資本</strong></li>
</ul>


<h2>まとめ</h2>

<blockquote><p>The accounting equation of</p>

<p><strong>Assets = Liablities + Capital</strong></p>

<p>shouled balance after every transaction.</p>

<p>  from (<strong>Schaum&rsquo;s Easy Outlines</strong> <em>Bookkeeping and Accounting</em> p.2)</p></blockquote>

<p>会計式「資産 = 負債 + 資本」はすべての取引において成立しなければならない。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0071779752" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<div class="sharing">
  
  <a href="http://twitter.com/share" class="twitter-share-button" data-url="http://mike-neck.github.io/blog/2013/05/13/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-1/" data-via="mike_neck" data-counturl="http://mike-neck.github.io/blog/2013/05/13/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-1/" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
  <br/>
</div>




<script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>


<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JJUG CCC 2013 Spring に行ってきた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/12/jjug-ccc-2013-spring-nixing-tutekita/"/>
    <updated>2013-05-12T16:47:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/12/jjug-ccc-2013-spring-nixing-tutekita</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p>2013/05/11行われた<a href="http://www.java-users.jp/?page_id=330">JJUG CCC 2013 Spring</a>に午後から行って来ました。</p>

<p>なんか午前の基本講演のJim Weaverさんと</p>

<p><a href="http://atnd.org/events/33874">JavaFX Advent Calendar2012</a>をやった人達で</p>

<p>ランチに行ってきたそうです。</p>

<p>午前に行けなくて残念…</p>

<p>以下、僕が参加したセッションのまとめ</p>

<h2>H-1 Java EE 6 から Java EE 7 に向かって</h2>

<p>王子こと寺田さんのセッション。</p>

<p>まあ、大体聞いたことのある話でした(失礼！)。</p>

<ul>
<li>JavaEE7に向けてJavaEE6も勉強して下さい。</li>
<li>JavaEE6はJavaEE5以前に比べてかなり軽量化されています。</li>
<li>JavaEE6からはテストも非常に容易になっています。</li>
</ul>


<p>といった感じです。</p>

<p>その他、JavaEE7に追加される機能の一部の概要の説明がありました。</p>

<h3>結論</h3>

<ul>
<li>JavaEE7はおもろいので、ぜひやろうぜ</li>
<li>JavaEE6やってない人はJavaEE6からどうぞ</li>
<li>資料公開してくれるはず、はず、はず</li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4798124605" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>H-2 H-2 Project Lambda Essential</h2>

<p>桜庭さんのProject Lambdaに関するセッション。</p>

<p>まあ、ラムダは大体わかっているし、あれでしたが、</p>

<p>Streamに関する話は面白かったです。</p>

<h3>Streamとは？</h3>

<p>終端の定義されていないCollectionのことだそうです。</p>

<p>次のようなクラスが定義されています。</p>

<ul>
<li>Object用 <code>java.util.stream.Stream&lt;T&gt;</code></li>
<li>int用 <code>java.util.stream.IntStream</code></li>
<li>long用 <code>java.util.stream.LongStream</code></li>
<li>double用 <code>java.util.stream.DoubleStream</code></li>
</ul>


<h4>メソッドとか</h4>

<p>メソッドとかの例を上げてみます。</p>

<p>ちなみに、昔(今)どうやっているかも一緒に書きます。</p>

<h5>filter</h5>

<figure class='code'><figcaption><span>filter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IntStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'><span class="c1">// result -&gt; [2, 4, 6, 8, 10]</span>
</span></code></pre></td></tr></table></div></figure>


<p>昔のやり方</p>

<figure class='code'><figcaption><span>filter-old-style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>map</h5>

<figure class='code'><figcaption><span>map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IntStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'><span class="c1">// result -&gt; [1, 4, 9, 16]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに昔のやり方</p>

<figure class='code'><figcaption><span>map-old-style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">item</span> <span class="o">*</span> <span class="n">item</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>reduce</h5>

<figure class='code'><figcaption><span>reduce</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IntStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="c1">// result -&gt; 55</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに昔のやり方</p>

<figure class='code'><figcaption><span>reduce-old-style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>対応</h4>

<ul>
<li>filter &ndash;> if文</li>
<li>map &ndash;> getter</li>
<li>reduce &ndash;> 副作用プログラミング</li>
</ul>


<h3>Project Lambdaに関して</h3>

<h4>lambdaを使用しているのにHoge$A.classみたいなものができない</h4>

<p>lambda式が表しているクラスは動的に評価されてinvoke dynamicで実行される</p>

<h4>mapとreduceを実行しているのに、ループが一回しかまわらない</h4>

<p>map/reduce式は遅延して実行される</p>

<h3>まとめ</h3>

<ul>
<li>Project LambdaとかStreamは記法がかなり変わるので、使用禁止と言われないように勉強しろ(とくにプロジェクトの<strike>エロイ</strike>エライ人)</li>
</ul>


<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321927761" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>R5-3 Type Annotation って何? それを使うとプログラムはどう変わる?</h2>

<p>Type Annotationに関するセッション</p>

<h3>比較</h3>

<ul>
<li>これまでのアノテーション(AnnotationType)は宣言をするアノテーション</li>
<li>TypeAnnotationは型、参照の利用に関する説明のアノテーション</li>
</ul>


<h3>例</h3>

<figure class='code'><figcaption><span>TypeAnnotation-example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 空リストではない、読み取り専用のリスト</span>
</span><span class='line'><span class="nd">@NotEmpty</span> <span class="nd">@ReadOnly</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">customer</span> <span class="o">=</span> <span class="n">CustomerService</span><span class="o">.</span><span class="na">getCustomer</span><span class="o">().</span><span class="na">withMultipleAccount</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// nullなkey不可、空リストでなく読み取り専用なvalueを持つマップ</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="nd">@NonNull</span> <span class="n">String</span><span class="o">,</span> <span class="nd">@NotEmpty</span> <span class="n">List</span><span class="o">&lt;</span><span class="nd">@ReadOnly</span> <span class="n">Text</span><span class="o">&gt;&gt;</span> <span class="n">document</span> <span class="o">=</span> <span class="n">DocumentService</span><span class="o">.</span><span class="na">splitDocumentToTextList</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでなんとかServiceとか書いていますが、テキトーなので突っ込まないで下さい。</p>

<h3>記述位置で意味が異なる</h3>

<figure class='code'><figcaption><span>position-has-much-meanings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 読み取り専用のリスト</span>
</span><span class='line'><span class="c1">// customers.add(customer)や、customers.replace(index, customer)はできない。</span>
</span><span class='line'><span class="nd">@ReadOnly</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Customer</span><span class="o">&gt;</span> <span class="n">customers</span> <span class="o">=</span> <span class="n">CustomerService</span><span class="o">.</span><span class="na">getCustomer</span><span class="o">().</span><span class="na">withMultipleAccount</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 変更可能なリスト</span>
</span><span class='line'><span class="c1">// ただし入っているCustomerへの変更は不可</span>
</span><span class='line'><span class="c1">// customer.addNewAddress(address)などは実行できない</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="nd">@ReadOnly</span> <span class="n">Customer</span><span class="o">&gt;</span> <span class="n">customers</span> <span class="o">=</span> <span class="n">CustomerService</span><span class="o">.</span><span class="na">getCustomer</span><span class="o">().</span><span class="na">withMultipleAccount</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使えない場所</h3>

<ul>
<li>クラスリテラル</li>
<li>import文</li>
<li>staticメンバー</li>
</ul>


<h3>簡単な例</h3>

<ul>
<li><code>@NonNull</code></li>
<li><code>@NotEmpty</code></li>
<li><code>@Interned</code></li>
<li><code>@ReadOnly</code></li>
<li><code>@Critical</code></li>
</ul>


<h3>残念なこと</h3>

<ul>
<li>書けるけど、意味は無い…</li>
<li>JavaSE8で事前定義された型アノテーションは(今のところ)ない</li>
<li>Java SE8でも入らないし、Java SE9でも入らないかもしれない</li>
<li>単純に実装者が気をつけろよレベル</li>
</ul>


<h3>まとめ</h3>

<p>うむ、なんかちょっと残念。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0321927761" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>H-4 失敗から学ぶAPI設計</h2>

<p>イケメンことゆーすけさんのセッション</p>

<p>Twitter4Jのプロモーションとか、たくさん使ってもらうためにしたことなどを発表</p>

<h3>たくさん使ってもらうためのプロモーション的な</h3>

<ul>
<li>汚いことでもなんでもする</li>
<li>手厚いサポートをする。ggrksとかしない</li>
</ul>


<h3>たくさん使ってもらうための技術的な</h3>

<ul>
<li>インターフェースを使わないでクラスを使う</li>
<li>あまりパッケージを増やさない</li>
<li>名前はよく考える</li>
<li>デザパタとかも使わせない</li>
<li>継承させない</li>
<li>本当に使ってほしくないクラスは異様な名前にする</li>
</ul>


<p>あとは、資料が公表されているので、そちらを参照。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/20968265" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/yusukey/api-ccch4-jjug-jjugccc-jjug-ccc-2013-spring" title="失敗から学ぶAPI設計 #ccc_h4 #jjug #jjug_ccc JJUG CCC 2013 Spring " target="_blank">失敗から学ぶAPI設計 #ccc_h4 #jjug #jjug_ccc JJUG CCC 2013 Spring </a> </strong> from <strong><a href="http://www.slideshare.net/yusukey" target="_blank">Yusuke Yamamoto</a></strong> </div></p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477414732X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>R5-5 [BOF] Java読書会ライブ</h2>

<p>実は昔デブサミのLT大会でLTを聞いてから興味を持っていたので、聞いてみたかったセッション</p>

<p>実際に音読をしているし、途中で議論をやっていて面白そうでした。</p>

<p>今は<a href="http://www.amazon.co.jp/gp/product/477415377X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=477415377X&amp;linkCode=as2&amp;tag=kkkjkrt-22">JUnit実践入門</a>を読んでいるそうです。</p>

<h3>概要</h3>

<ul>
<li>月一回土曜日に開催</li>
<li>まず自己紹介と近況の報告をする</li>
<li>書記を選出する</li>
<li>書記は議論のポイントなどをまとめてサイトに掲載する</li>
<li>午前10:00くらいから昼間でと午後5時まで続ける</li>
<li>その後は有志で飲みに行く</li>
</ul>


<p>まあ、普通の勉強会ですね。</p>

<h3>質疑応答</h3>

<h4>読む本はどうやって決定しているか？</h4>

<ul>
<li>投票によって決定しているそうです。</li>
<li>なお、投票は普通の参加者は1票、書記は2票を入れることができるそうです。</li>
</ul>


<h4>どれくらいのスピードで読んでいるのか</h4>

<ul>
<li>毎回約60ページ程度読んでいます。</li>
</ul>


<h4>予習とか必要か？</h4>

<ul>
<li>してないけど、してくる人もいる</li>
</ul>


<h4>コードの実行をしたりするのか？</h4>

<ul>
<li>パソコン持ってきていてやってくれる人もいる</li>
</ul>


<h4>どんな本が読書会に向いているか</h4>

<ul>
<li>入門本よりはすこし難しめな本で、どうしても積ん読になってしまうようなもののほうが適している</li>
<li>いろんなコンテキストを持っている人が参加するので、それが勉強になる</li>
</ul>


<h3>まとめ</h3>

<p>面白そうなので、一回参加してみたいと思いました。</p>

<p>参考リンク : <a href="http://www.javareading.com/bof/">Java読書会BOFのページ</a></p>

<h2>R2-6 [BOF] 地方における勉強会事情</h2>

<p>沖縄、大都会岡山、札幌＋急遽大阪のコミュニティ・勉強会の主催者によるパネルディスカッション</p>

<p>東京の勉強会との違いがわかる一方で、</p>

<p>Javaの勉強会が抱えている問題と共通するものがあるなーという感じがしました。</p>

<p>詳しくはtogetterにまとめられていますので、</p>

<p>そちらを参照して下さい。</p>

<p><a href="http://togetter.com/li/501590">JJUG CCC 2013 Spring R2-6 [BOF] 地方における勉強会事情</a></p>

<blockquote><p>2013/05/12 19:54 追記</p>

<p>地方の勉強会で初参加する人は</p>

<p>勉強会に参加してきたというブログを読んで</p>

<p>いけそうだなと思って参加するらしいです。</p>

<p>したがって、勉強会の活性化をしたいなら</p>

<ul>
<li><strong>とにかくブログを書け</strong></li>
<li><strong>勉強会はブログを書くまでが勉強会です</strong></li>
</ul>
</blockquote>

<h2>JJUG CCC 2013 Spring 懇親会</h2>

<p>一応参加して来ました。</p>

<p>そしてなぜかLTさせられることになったので、</p>

<p>グダグダなやつをやってきました。</p>

<p>参考 : <a href="http://mikeneck.blogspot.jp/2013/05/sushi.html">ゆとりさんが鮨を奢ってくれるそうなので、感謝の気持を込めて、たくさんのプロセスに「sushi」と言わせてみた</a></p>

<h2>まとめ</h2>

<p>Java楽しいですね。</p>

<p>僕はもう人間的にかなり不活性ですが、</p>

<p>Java自体は活性化して貰いたいので、</p>

<p>なんか継続できる勉強会でもやりたいなと思います。</p>

<div class="sharing">
  
  <a href="http://twitter.com/share" class="twitter-share-button" data-url="http://mike-neck.github.io/blog/2013/05/12/jjug-ccc-2013-spring-nixing-tutekita/" data-via="mike_neck" data-counturl="http://mike-neck.github.io/blog/2013/05/12/jjug-ccc-2013-spring-nixing-tutekita/" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
  <br/>
</div>




<script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>


<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのリスト系モジュールを試してみる - 第0回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/11/erlangfalserisutoguan-shu-woshi-sitemiru/"/>
    <updated>2013-05-11T01:50:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/11/erlangfalserisutoguan-shu-woshi-sitemiru</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>Erlangの初心者・初級・初歩レベルの僕にとって、</p>

<p>まず色々とBIFだとか、基本的なモジュールを使いこなせるのが、</p>

<p>上達への近道かと思ったので、</p>

<p><code>lists</code>モジュールについて、</p>

<p>すべての関数を試してみようと思います。</p>

<h3>モジュール情報を表示する</h3>

<p>まず、モジュールの情報を表示するモジュールcのコマンドは</p>

<p><code>m(Module)</code>関数です。</p>

<p>早速<code>lists</code>モジュールに試して見る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1&gt; m(lists).
</span><span class='line'>Module lists compiled: Date: February 25 2013, Time: 19.27
</span><span class='line'>Compiler options:  [{outdir,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../ebin"},
</span><span class='line'>                    {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../include"},
</span><span class='line'>                    {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../../kernel/include"},
</span><span class='line'>                    warnings_as_errors,debug_info]
</span><span class='line'>Object file: /opt/local/lib/erlang/lib/stdlib-1.19.1/ebin/lists.beam
</span><span class='line'>Exports: 
</span><span class='line'>all/2                         nthtail/2
</span><span class='line'>any/2                         partition/2
</span><span class='line'>append/2                      prefix/2
</span><span class='line'>append/1                      reverse/1
</span><span class='line'>concat/1                      reverse/2
</span><span class='line'>delete/2                      rkeymerge/3
</span><span class='line'>dropwhile/2                   rmerge/2
</span><span class='line'>duplicate/2                   rmerge/3
</span><span class='line'>filter/2                      rmerge3/3
</span><span class='line'>flatlength/1                  rukeymerge/3
</span><span class='line'>flatmap/2                     rumerge/3
</span><span class='line'>flatten/2                     rumerge/2
</span><span class='line'>flatten/1                     rumerge3/3
</span><span class='line'>foldl/3                       seq/2
</span><span class='line'>foldr/3                       seq/3
</span><span class='line'>foreach/2                     sort/2
</span><span class='line'>keydelete/3                   sort/1
</span><span class='line'>keyfind/3                     split/2
</span><span class='line'>keymap/3                      splitwith/2
</span><span class='line'>keymember/3                   sublist/3
</span><span class='line'>keymerge/3                    sublist/2
</span><span class='line'>keyreplace/4                  subtract/2
</span><span class='line'>keysearch/3                   suffix/2
</span><span class='line'>keysort/2                     sum/1
</span><span class='line'>keystore/4                    takewhile/2
</span><span class='line'>keytake/3                     ukeymerge/3
</span><span class='line'>last/1                        ukeysort/2
</span><span class='line'>map/2                         umerge/3
</span><span class='line'>mapfoldl/3                    umerge/1
</span><span class='line'>mapfoldr/3                    umerge/2
</span><span class='line'>max/1                         umerge3/3
</span><span class='line'>member/2                      unzip/1
</span><span class='line'>merge/1                       unzip3/1
</span><span class='line'>merge/2                       usort/2
</span><span class='line'>merge/3                       usort/1
</span><span class='line'>merge3/3                      zf/2
</span><span class='line'>min/1                         zip/2
</span><span class='line'>module_info/0                 zip3/3
</span><span class='line'>module_info/1                 zipwith/3
</span><span class='line'>nth/2                         zipwith3/4
</span><span class='line'>ok
</span></code></pre></td></tr></table></div></figure>


<p>関数がたくさんあって、数えるの面倒いな…</p>

<h3>詳細なモジュール情報を表示する</h3>

<p><code>lists:module_info/0</code>関数でも同じようなものを調べられる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2&gt; lists:module_info().
</span><span class='line'>[{exports,[{append,2},
</span><span class='line'>           {append,1},
</span><span class='line'>           {subtract,2},
</span><span class='line'>           {nth,2},
</span><span class='line'>           {nthtail,2},
</span><span class='line'>           {prefix,2},
</span><span class='line'>           {suffix,2},
</span><span class='line'>           {last,1},
</span><span class='line'>           {seq,2},
</span><span class='line'>           {seq,3},
</span><span class='line'>           {sum,1},
</span><span class='line'>           {duplicate,2},
</span><span class='line'>           {min,1},
</span><span class='line'>           {max,1},
</span><span class='line'>           {sublist,3},
</span><span class='line'>           {sublist,2},
</span><span class='line'>           {zip,2},
</span><span class='line'>           {unzip,1},
</span><span class='line'>           {zip3,3},
</span><span class='line'>           {unzip3,1},
</span><span class='line'>           {zipwith,3},
</span><span class='line'>           {zipwith3,4},
</span><span class='line'>           {merge,1},
</span><span class='line'>           {merge3,3},
</span><span class='line'>           {rmerge3,...},
</span><span class='line'>           {...}|...]},
</span><span class='line'> {imports,[]},
</span><span class='line'> {attributes,[{vsn,[257948301539042745638557295194154171573]}]},
</span><span class='line'> {compile,[{options,[{outdir,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../ebin"},
</span><span class='line'>                     {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../include"},
</span><span class='line'>                     {i,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../../kernel/include"},
</span><span class='line'>                     warnings_as_errors,debug_info]},
</span><span class='line'>           {version,"4.9"},
</span><span class='line'>           {time,{2013,2,25,19,27,47}},
</span><span class='line'>           {source,"/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/lists.erl"}]}]</span></code></pre></td></tr></table></div></figure>


<p><code>exports</code>されている関数、</p>

<p>途中で表示が切れてまんがな…</p>

<h3>BIFとかリスト内包表記で頑張ってみる</h3>

<p>今はエントリーの長さに影響をする関数の数を知りたいので、</p>

<p>リストの内包表記で<code>lists:module_info/0</code>の</p>

<p>結果を絞って、BIFの</p>

<ul>
<li><code>length/1</code> &ndash; リストの長さを取得する</li>
<li><code>hd/1</code> &ndash; リストの先頭要素を取得する</li>
</ul>


<p>を用いて<code>lists</code>モジュールの関数の数を数えてみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3&gt; length(hd([Items || {Atom, Items} &lt;- lists:module_info(), Atom =:= exports])).
</span><span class='line'>80</span></code></pre></td></tr></table></div></figure>


<p>というわけで、80もあるので、</p>

<p>16個ずつ調べていこうと思う。</p>

<blockquote><p>追記 (2013/05/13 9:16)</p>

<p>2013/05/12 21:19 頃に</p>

<p><a href="https://github.com/voluntas">voluntasさん</a>(<a href="http://twitter.com/voluntas">@voluntas</a>)から
メッセージをいただきました。</p>

<p><code>length(lists:module_info(exports))</code></p>

<p>で同じ事が取得できるとのこと。</p>

<p>実際にやってみたら</p>

<p><code>
1&gt; length(lists:module_info(exports)).
80
</code></p>

<p>あ、できた、ありがとうございます！</p>

<p>ちなみにドキュメントにもありました。</p>

<p><a href="http://erlang.org/doc/reference_manual/modules.html#id74571">The module_info/0 and module_info/1 functions</a></p>

<p>ドキュメント読まんとイケませんね</p></blockquote>

<h3>まとめ</h3>

<p>まとめもクソもないのですが、</p>

<p>次回から約5回にわたって、</p>

<p><code>lists</code>モジュールの関数を試していきます。</p>

<div class="sharing">
  
  <a href="http://twitter.com/share" class="twitter-share-button" data-url="http://mike-neck.github.io/blog/2013/05/11/erlangfalserisutoguan-shu-woshi-sitemiru/" data-via="mike_neck" data-counturl="http://mike-neck.github.io/blog/2013/05/11/erlangfalserisutoguan-shu-woshi-sitemiru/" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
  <br/>
</div>




<script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>


<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FC2ブログのエディターがクソいのでGroovyのMarkupBuilderで記事を書いた件]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/10/too-poor-fc2-blog-editor-make-me-write-a-new-entry-with-groovys-markupbuilder/"/>
    <updated>2013-05-10T20:00:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/10/too-poor-fc2-blog-editor-make-me-write-a-new-entry-with-groovys-markupbuilder</id>
    <content type="html"><![CDATA[<p>こんにちわ、自虐的なみけです。</p>

<p>自虐的なツイートをtogetterにまとめたら、</p>

<p><strong>自虐的だからたかが知れている、ビジネスなめてんの</strong></p>

<p>とコメントいただきました。</p>

<p>はい。</p>

<h3>FC2ブログのエディターがクソな件</h3>

<p>まあ、このブログを始めると同時に、</p>

<p><a href="http://mikeneckdq.blog.fc2.com/">ドラクエ用のブログをFC2</a>の方に</p>

<p>書いているわけですが、</p>

<p>FC2のあのブログエディターなめてんの？</p>

<p>テーブル書いたら</p>

<p>わけわからん改行が出てくるし、</p>

<p>スタイルタグはシカトされるし、</p>

<p>UI舐めきってて、ビジネスを舐めているとしか考えられん。</p>

<h3>しかたがないのでタグの中にstyle属性を</h3>

<p>書くことにしたわけですが、</p>

<p>テーブルの要素一つ一つにstyleを手でちまちま書いていた日には、</p>

<p>いくら暇すぎる僕でも、</p>

<p>忙しくなりすぎる。</p>

<p>しかたないので、</p>

<p><strong>Groovy</strong> の <strong>groovy.xml.MarkupBuilder</strong> を</p>

<p>使うことにしました。</p>

<div><script src='https://gist.github.com/5551749.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h3>何をやろうとしてたかというと、</h3>

<p>仕訳を作ろうとしていたわけで、</p>

<p>いくらの投資でいくら回収できるという</p>

<p>話をするのに複式簿記がよくて、</p>

<p>それをGroovyで自動集計させながら、</p>

<p>最終的に総勘定元帳を作り出すというもの。</p>

<p><strong>MarkupBuilder便利すな</strong></p>

<h3>ところで…</h3>

<p>このスクリプトを書いている時に、</p>

<ul>
<li>簿記 (Bookkeeping)</li>
<li>仕訳 (Journal)</li>
<li>借方 (Debit)</li>
<li>貸方 (Credit)</li>
</ul>


<p>といった基本的な単語がわかってないことが</p>

<p>わかりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>簿記３級くらいの知識が欲しい</p>&mdash; 器官なき身体さん (@mike_neck) <a href="https://twitter.com/mike_neck/status/332655391110467585">2013年5月10日</a></blockquote>


<script async src="http://mike-neck.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>というわけで、</p>

<p>簿記・会計のドメインに強くなるべく、</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0071779752" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>この本を買ったとさ。</p>

<p>おわり。</p>

<div class="sharing">
  
  <a href="http://twitter.com/share" class="twitter-share-button" data-url="http://mike-neck.github.io/blog/2013/05/10/too-poor-fc2-blog-editor-make-me-write-a-new-entry-with-groovys-markupbuilder/" data-via="mike_neck" data-counturl="http://mike-neck.github.io/blog/2013/05/10/too-poor-fc2-blog-editor-make-me-write-a-new-entry-with-groovys-markupbuilder/" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
  <br/>
</div>




<script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>


<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mike、mikeなるままに…Githubに移動しました。]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/08/first-post/"/>
    <updated>2013-05-08T20:31:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/08/first-post</id>
    <content type="html"><![CDATA[<p>どーも、みけです。
Githubでブログを書くことにしました。</p>

<p>試しにgistのコードも載せてみます。</p>

<div><script src='https://gist.github.com/5524789.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>あまりマークダウン使いこなせてないんで、</p>

<p>良い感じの記事になるにはもうちょい時間かかると思う。</p>

<div class="sharing">
  
  <a href="http://twitter.com/share" class="twitter-share-button" data-url="http://mike-neck.github.io/blog/2013/05/08/first-post/" data-via="mike_neck" data-counturl="http://mike-neck.github.io/blog/2013/05/08/first-post/" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
  <br/>
</div>




<script type="text/javascript"><!--
google_ad_client = "ca-pub-4508687151223458";
/* octopress */
google_ad_slot = "1134799005";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>


<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
</feed>
