<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mike、mikeなるままに…]]></title>
  <link href="http://mike-neck.github.io/atom.xml" rel="self"/>
  <link href="http://mike-neck.github.io/"/>
  <updated>2013-06-11T02:34:54+09:00</updated>
  <id>http://mike-neck.github.io/</id>
  <author>
    <name><![CDATA[mike-neck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初めてRubyのモジュールを書いてみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/11/how-to-create-rubys-module/"/>
    <updated>2013-06-11T02:04:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/11/how-to-create-rubys-module</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>前回の記事<a href="http://mike-neck.github.io/blog/2013/06/08/rubyfalsemixinfalsehua-wodu-ndeitara%2C-he-gu-kajavawoshu-iteita/">『Rubyのmixinの話を読んでいたら、何故かjavaを書いていた』</a>はあまりにも</p>

<p>rubyに対して失礼なので、</p>

<p>初心者らしく、ちゃんと<code>module</code>を作ってみました。</p>

<p>ところで、僕の感心事は前回の記事でも書いたように、</p>

<h2>rubyの<code>module</code>はインスタンス変数にアクセスすることができるのか？</h2>

<p>ということです。</p>

<p>で、結論から言えば、</p>

<h2>rubyの<code>module</code>はインスタンス変数にアクセスできました</h2>

<p>となります。</p>

<h3><code>module</code>を作成</h3>

<figure class='code'><figcaption><span>having_title.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- codig: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">HavingTitle</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">title</span><span class="o">=</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">t</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">title</span>
</span><span class='line'>    <span class="vi">@title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>module</code>の<code>HavingTitle</code>は単純にタイトルというものに</p>

<p>アクセスすることができるモジュールです。</p>

<p>先程も書きましたが、僕の疑問は<code>@title</code>フィールドに、</p>

<p>インスタンス化することができない<code>module</code>がアクセすることができるのか</p>

<p>ということです。</p>

<h3><code>module</code>を<code>include</code>した<code>class</code>を作成</h3>

<figure class='code'><figcaption><span>book.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./having_title&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">HavingTitle</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:price</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@price</span> <span class="o">=</span> <span class="n">price</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_info</span>
</span><span class='line'>    <span class="s2">&quot;Book[title : </span><span class="si">#{</span><span class="vi">@title</span><span class="si">}</span><span class="s2">, price : </span><span class="si">#{</span><span class="vi">@price</span><span class="si">}</span><span class="s2">]&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>タイトルというものを持っていそうなクラスということで</p>

<p><code>Book</code>というクラスをつくりました。</p>

<p>後は<code>Book</code>クラスをインスタンス化して、</p>

<p>フィールド<code>@title</code>にアクセスできるかどうか確認出来れば</p>

<p>僕の疑問は解決出来ます。</p>

<h3>irbで動作を確認</h3>

<p>あ、まだrubyでのテストの書き方知らないので、</p>

<p>ここはirbで勘弁して下さい。</p>

<figure class='code'><figcaption><span>book.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;./book&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;anti-oedipus&#39;</span><span class="p">,</span> <span class="mi">4000</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Book:0x007f90890b6e38 @price=4000, @title=&quot;anti-oedipus&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">print_info</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Book[title : anti-oedipus, price : 4000]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>というわけで、特に何のエラーも出ることなく、</p>

<p>フィールド<code>@title</code>にアクセスできているようですね。</p>

<h2>モジュールの機能の一つとしてのMix-in</h2>

<p>まあ、<a href="http://www.amazon.co.jp/gp/product/4873113679/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873113679&amp;linkCode=as2&amp;tag=kkkjkrt-22">『初めてのRuby』</a>にはモジュールについて次のように書いてあります。</p>

<blockquote><p><strong>モジュール</strong>はクラスに似ています。モジュールは「インスタンス化できないクラス」のようなものです。
<code>Class</code>クラスは<code>Module</code>のサブクラスですから、「クラス = モジュール + インスタンス化能力」と言ってもよさそうです。
(<a href="http://www.amazon.co.jp/gp/product/4873113679/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873113679&amp;linkCode=as2&amp;tag=kkkjkrt-22">Yugui著『初めてのRuby』</a>(オライリー・ジャパン、2008年、p.159))</p></blockquote>

<p>Javaしかわからない(Javaも詳しくはわからない)僕には、</p>

<p><code>abstract class</code>と考えておけばよさそうです。</p>

<p>で、複数のモジュールを継承できるので、</p>

<p>なんか、アレですね…</p>

<table>
<tbody>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873113679" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774151661" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</tbody>
</table>




<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JIRA6のチケットで他のチケットへのリンクを張る方法]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/10/how-to-link-other-issues-on-jira6/"/>
    <updated>2013-06-10T15:10:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/10/how-to-link-other-issues-on-jira6</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>微妙に表題の件に関して、30分くらいさまよったので、覚書き。</p>

<p>公式のドキュメントはこちらです。</p>

<p><a href="https://confluence.atlassian.com/display/JIRA/Linking+Issues">JIRA User&rsquo;s Guide > Working with an Issue > Linking Issues</a></p>

<h2>JIRA6であるチケットから他のチケットへのリンクを張る方法</h2>

<h3>JIRAのissueの上にあるメニューから<strong>More > Link</strong>を選択します</h3>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRVjFGRmExVzhlMjQ" target="_blank"><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRVjFGRmExVzhlMjQ" style="width : 501px;"/></a></p>

<h3>当該チケットとの関係を選択して、関連するチケットを選択します</h3>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRaExlSGJnMUJjejQ" target="_blank"><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRaExlSGJnMUJjejQ" style="width : 334px;"/></a></p>

<h3>チケットが関連付けられているか確認します</h3>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRT2RfWklwbkExdGM" target="_blank"><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRT2RfWklwbkExdGM" style="width : 501px;"/></a></p>

<p>…</p>

<p>えっ、Redmineならもっと簡単だって？</p>

<p>そうですね。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのmixinの話を読んでいたら、何故かjavaを書いていた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/08/rubyfalsemixinfalsehua-wodu-ndeitara%2C-he-gu-kajavawoshu-iteita/"/>
    <updated>2013-06-08T21:22:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/08/rubyfalsemixinfalsehua-wodu-ndeitara,-he-gu-kajavawoshu-iteita</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p><a href="https://twitter.com/suginoy">@suginoy</a>さんに</p>

<p><a href="http://www.amazon.co.jp/gp/product/4774151661/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774151661&amp;linkCode=as2&amp;tag=kkkjkrt-22">『楽しい開発スタートアップRuby』</a>を買っていただいたので、</p>

<p>今日はそれを某社オフィスで読んでいました。</p>

<h1>Rubyのmix-inについての読んだ後の会話</h1>

<ul>
<li>僕「mix-inよくわからん」</li>
<li>イケメン「多重継承できるやつでしょう」</li>
<li>僕「mix-inってインスタンス変数とかにアクセスできるのかな？」</li>
<li>イケメン「できそうじゃね」</li>
<li>僕「あ〜、Java8のdefault実装でもmix-inと同じ事できそうじゃね」</li>
<li>イケメン「いや、できないでしょう。default実装といっても、interfaceにフィールドを持つことができないわけだから」</li>
<li>僕「え、できないのか、あー、そうかできないな。えっ、じゃあ、あれ、誰得なの？」</li>
</ul>


<p>(多少脚色有り、あと会話内容忘れたので、結構適当)</p>

<p>で、</p>

<h1>書いていたのがJava8のコードでした</h1>

<figure class='code'><figcaption><span>Score.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">jdk8</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author mike</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Score</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">private</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Score</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Grade.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">jdk8</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author mike</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Grade</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Score</span><span class="o">&gt;</span> <span class="nf">scores</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span> <span class="kt">long</span> <span class="nf">getTotalScore</span> <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">scores</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">mapToLong</span><span class="o">(</span><span class="nl">Score:</span><span class="o">:</span><span class="n">getValue</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0</span><span class="n">l</span><span class="o">,</span> <span class="nl">Long:</span><span class="o">:</span><span class="n">sum</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ところで、このdefaultメソッド、</p>

<p>書いている途中はこんな感じでした。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRYk5mVkd1RFFQYmc" style="width : 501px;" /></p>

<p>IntelliJ IDEAではシンタックスをもっとよくできる場合は、</p>

<p>こういう形で通知してくれます。</p>

<p>紫の部分にカーソルをあてて、</p>

<p>Alt + Enter (mac の場合は option + enter)をすると、</p>

<p>操作の候補が表示されます。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRQzhXZnc0Z2lVc0k" style="width : 501px;"/></p>

<p>ここでは<strong>Replace lambda with method reference</strong>を選択します。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRbnFGWmE1czJrRk0" style="width : 501px;"/></p>

<p>すごいシンプルなコードになりました。</p>

<p>続いて、mapした結果をreduceしていきます。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRa0s1ZldObzA0VzA" style="width : 501px;"/></p>

<p>初期値<code>0l</code>で、結果を合計したいので、次のような演算を書きます。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRTVAxQUE0d0tQMU0" style="width : 501px;"/></p>

<p>これはこれでまちがいでありません。</p>

<p>ところで、<code>java.util.stream.Stream#mapToLong</code>の戻り値である、</p>

<p><code>java.util.stream.LongStream</code>のjavadocを読むとこのように記述されています。</p>

<blockquote><p>Api note : Sum, min, max, and average are all special cases of reduction.
Summing a stream of numbers can be expressed as:</p>

<p><code>
long sum = integers.reduce(0, (a, b) -&gt; a+b);
</code></p>

<p>or more compactly:</p>

<p><code>
long sum = integers.reduce(0, Long::sum);
</code></p>

<p><em>引用元 : javadoc (build-89)</em></p></blockquote>

<p>つまり、<code>java.util.function.LongBinaryOperator</code>の記述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>は、<code>java.lang.Long</code>の<code>static</code>なメソッド<code>sum(long, long)</code>に</p>

<p>置き換えることができるということです。</p>

<p>その結果、先のコードは次のようになりました(既出)。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRS25qWnVZX2dHdW8" style="width : 501px;"/></p>

<p>さて、ここらへんの<code>Stream</code>系の操作がエンタープライズな現場で使われるかどうかは</p>

<p>微妙ですが…(というのも、値の集計をするというのであれば、DBにさせたほうが早いので)</p>

<p>実際に現場で使うとなると、</p>

<p>高機能なIDE(<code>Long::sum</code>の部分はIntelliJでも簡略化できなかった)と</p>

<p><code>Stream</code>系のApiの書き方を覚えておかないと、</p>

<p>相当効率悪くなるとおもいます。</p>

<p>というわけで、Java8の勉強をしたい方は是非</p>

<p>6月26日(水)の『Java8初心者勉強会』にご参加下さい。</p>

<p>Java8初心者勉強会 &ndash; <a href="http://atnd.org/event/java8beginner20130626tokyo">http://atnd.org/event/java8beginner20130626tokyo</a></p>

<p>結論</p>

<h1>あれ、rubyのmix-inについての話はどこ行った…</h1>

<p>vimでrubyのコード書くの辛いです…</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovyでpegdownをさわってみる]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/08/groovydepegdownwosawatutemiru/"/>
    <updated>2013-06-08T05:25:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/08/groovydepegdownwosawatutemiru</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p><img src="http://mike-neck.github.io//groovy.codehaus.org/images/groovy-logo-medium.png" style="width : 450px;"/></p>

<p>前回に引き続き、Javaのmarkdownパーサーを試してみます。</p>

<p>で、今回は</p>

<h1><a href="https://github.com/sirthias/pegdown">pegdown</a></h1>

<p>を試してみました。</p>

<p>サンプルコードは前回とほとんど変わりません。</p>

<figure class='code'><figcaption><span>pegdown-sample.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Grab</span><span class="o">(</span><span class="s1">&#39;org.pegdown:pegdown:1.2.1&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">pegdown</span><span class="o">.</span><span class="na">PegDownProcessor</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">original</span> <span class="o">=</span> <span class="s">$/</span>
</span><span class='line'><span class="s">This is Top Header</span>
</span><span class='line'><span class="s">---</span>
</span><span class='line'>
</span><span class='line'><span class="s">This is second Header</span>
</span><span class='line'><span class="s">===</span>
</span><span class='line'>
</span><span class='line'><span class="s">### This is topic</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Lists Item</span>
</span><span class='line'>
</span><span class='line'><span class="s">${(1..3).collect {&quot;+ item${it}&quot;}.join(&#39;\n&#39;)}</span>
</span><span class='line'>
</span><span class='line'><span class="s">and</span>
</span><span class='line'>
</span><span class='line'><span class="s">${(1..3).collect {&quot;1. item${it}&quot;}.join(&#39;\n&#39;)}</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Links</span>
</span><span class='line'>
</span><span class='line'><span class="s">+ [mike-neck&#39;s site](http://mike-neck.github.io/)</span>
</span><span class='line'><span class="s">+ [mike-neck&#39;s dq site](http://mikeneckdq.blog.fc2.com/)</span>
</span><span class='line'><span class="s">+ ![groovy image](http://groovy.codehaus.org/images/groovy-logo-medium.png)</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Html Tags</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;img src=&#39;//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00&#39; style=&#39;width : 400px;&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Codes</span>
</span><span class='line'>
</span><span class='line'><span class="s">function `lists:reverse/1` returns a List.</span>
</span><span class='line'>
</span><span class='line'><span class="s">tag `&lt;em&gt;` means emphasis</span>
</span><span class='line'>
</span><span class='line'><span class="s">``groovy</span>
</span><span class='line'><span class="s">def string = &#39;This is groovy code.&#39;</span>
</span><span class='line'><span class="s">``</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### emphasis</span>
</span><span class='line'>
</span><span class='line'><span class="s">*em?*</span>
</span><span class='line'>
</span><span class='line'><span class="s">**bold?**</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Blockquotes</span>
</span><span class='line'>
</span><span class='line'><span class="s">&gt; This is a blockquotes</span>
</span><span class='line'><span class="s">&gt; from here.</span>
</span><span class='line'>
</span><span class='line'><span class="s">/$</span>
</span><span class='line'>
</span><span class='line'><span class="n">processor</span><span class="o">.</span><span class="na">markdownToHtml</span><span class="o">(</span><span class="n">original</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>This is Top Header<span class="nt">&lt;/h2&gt;&lt;h1&gt;</span>This is second Header<span class="nt">&lt;/h1&gt;&lt;h3&gt;</span>This is topic<span class="nt">&lt;/h3&gt;&lt;h4&gt;</span>Lists Item<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>item1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>item2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>item3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;&lt;p&gt;</span>and<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;ol&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>item1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>item2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>item3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ol&gt;&lt;h4&gt;</span>Links<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://mike-neck.github.io/&quot;</span><span class="nt">&gt;</span>mike-neck&#39;s site<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://mikeneckdq.blog.fc2.com/&quot;</span><span class="nt">&gt;</span>mike-neck&#39;s dq site<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://groovy.codehaus.org/images/groovy-logo-medium.png&quot;</span>  <span class="na">alt=</span><span class="s">&quot;groovy image&quot;</span><span class="nt">/&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;&lt;h4&gt;</span>Html Tags<span class="nt">&lt;/h4&gt;&lt;p&gt;&lt;img</span> <span class="na">src=</span><span class="s">&#39;//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00&#39;</span> <span class="na">style=</span><span class="s">&#39;width : 400px;&#39;</span><span class="nt">&gt;&lt;/p&gt;&lt;h4&gt;</span>Codes<span class="nt">&lt;/h4&gt;&lt;p&gt;</span>function <span class="nt">&lt;code&gt;</span>lists:reverse/1<span class="nt">&lt;/code&gt;</span> returns a List.<span class="nt">&lt;/p&gt;&lt;p&gt;</span>tag <span class="nt">&lt;code&gt;</span><span class="ni">&amp;lt;</span>em<span class="ni">&amp;gt;</span><span class="nt">&lt;/code&gt;</span> means emphasis<span class="nt">&lt;/p&gt;&lt;p&gt;&lt;code&gt;</span>groovy
</span><span class='line'>def string = <span class="ni">&amp;#39;</span>This is groovy code.<span class="ni">&amp;#39;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/p&gt;&lt;h4&gt;</span>emphasis<span class="nt">&lt;/h4&gt;&lt;p&gt;&lt;em&gt;</span>em?<span class="nt">&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;</span>bold?<span class="nt">&lt;/strong&gt;&lt;/p&gt;&lt;h4&gt;</span>Blockquotes<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'><span class="nt">&lt;blockquote&gt;&lt;p&gt;</span>This is a blockquotes from here.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/blockquote&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>markdownjとの比較</h2>

<p>markdownjではこんな不具合が有りました。</p>

<ul>
<li><code>===</code>がレンダーされない</li>
<li>上の行にテキストがある状態で&#8217;&mdash;&ndash;&lsquo;がタグ<code>&lt;tr/&gt;</code>にレンダーされる</li>
<li>当然ながら、GitHubっぽいコードスニペットはレンダーできない</li>
</ul>


<p>一方、これらのうち、</p>

<ul>
<li><code>===</code>がレンダーされない</li>
<li>上の行にテキストがある状態で&#8217;&mdash;&ndash;&lsquo;がタグ<code>&lt;tr/&gt;</code>にレンダーされる</li>
</ul>


<p>はgepdownでは解消されているようです。</p>

<p>残念ながら、</p>

<ul>
<li>当然ながら、GitHubっぽいコードスニペットはレンダーできない</li>
</ul>


<p>というのはあります。</p>

<p>というわけで、pegdownの方が、良さげな感じがします。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovyでmarkdownjをさわってみる]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/07/groovydemarkdownjwosawatutemiru/"/>
    <updated>2013-06-07T21:10:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/07/groovydemarkdownjwosawatutemiru</id>
    <content type="html"><![CDATA[<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcURrSlZiNXlNVVk" style="width : 450px;"/></p>

<p>こんにちわ、みけです。</p>

<p>このブログはOCTOPRESSで作っていますが、</p>

<p>どうしてもやりたい処理があったら、</p>

<p>rubyを勉強しないとアババな感じなので、</p>

<p>Javaでも同じようなものを作ってみたいと思っています。</p>

<h1>OCTOPRESSっぽいツールに必要そうな機能</h1>

<p>はこんな感じかなと思っています。</p>

<ul>
<li>タスクを指定して実行する</li>
<li>git連携</li>
<li>previewできる</li>
<li>マークダウンをHTMLに変換する</li>
</ul>


<p>これらのうち、最初のタスクを指定して実行するはGradleでやればよさそうです。</p>

<p>git連携はJGitを使えばできそうです。</p>

<p>previewはJettyだか、nettyだか、glassfishを使えばできそうです。</p>

<p>で、最後の</p>

<h1>JavaでマークダウンをHTMLに変換する</h1>

<p>はわからないので、</p>

<p>ちょっと試して見ることにしました。</p>

<p>まず、筆頭にくる <strong>markdownj</strong> を試してみることにしました</p>

<figure class='code'><figcaption><span>markdown-sample.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Grab</span><span class="o">(</span><span class="s1">&#39;com.madgag:markdownj-core:0.4.1&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.petebevin.markdown.*</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">proc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkdownProcessor</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">original</span> <span class="o">=</span> <span class="s">$/</span>
</span><span class='line'><span class="s">This is Top Header</span>
</span><span class='line'><span class="s">---</span>
</span><span class='line'>
</span><span class='line'><span class="s">This is second Header</span>
</span><span class='line'><span class="s">===</span>
</span><span class='line'>
</span><span class='line'><span class="s">### This is topic</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Lists Item</span>
</span><span class='line'>
</span><span class='line'><span class="s">${(1..3).collect {&quot;+ item${it}&quot;}.join(&#39;\n&#39;)}</span>
</span><span class='line'>
</span><span class='line'><span class="s">and</span>
</span><span class='line'>
</span><span class='line'><span class="s">${(1..3).collect {&quot;1. item${it}&quot;}.join(&#39;\n&#39;)}</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Links</span>
</span><span class='line'>
</span><span class='line'><span class="s">+ [mike-neck&#39;s site](http://mike-neck.github.io/)</span>
</span><span class='line'><span class="s">+ [mike-neck&#39;s dq site](http://mikeneckdq.blog.fc2.com/)</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Html Tags</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;img src=&#39;//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00&#39; style=&#39;width : 400px;&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Codes</span>
</span><span class='line'>
</span><span class='line'><span class="s">function `lists:reverse/1` returns a List.</span>
</span><span class='line'>
</span><span class='line'><span class="s">tag `&lt;em&gt;` means emphasis</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### emphasis</span>
</span><span class='line'>
</span><span class='line'><span class="s">*em?*</span>
</span><span class='line'>
</span><span class='line'><span class="s">**bold?**</span>
</span><span class='line'>
</span><span class='line'><span class="s">#### Blockquotes</span>
</span><span class='line'>
</span><span class='line'><span class="s">&gt; This is a blockquotes</span>
</span><span class='line'><span class="s">&gt; from here.</span>
</span><span class='line'>
</span><span class='line'><span class="s">/$</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc</span><span class="o">.</span><span class="na">markdown</span><span class="o">(</span><span class="n">original</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これの結果は次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>This is Top Header
</span><span class='line'><span class="nt">&lt;hr</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>This is second Header
</span><span class='line'>===<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h3&gt;</span>This is topic<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h4&gt;</span>Lists Item<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>item1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>item2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>item3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>and<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ol&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>item1<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>item2<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>item3<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ol&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h4&gt;</span>Links<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://mike-neck.github.io/&quot;</span><span class="nt">&gt;</span>mike-neck&#39;s site<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://mikeneckdq.blog.fc2.com/&quot;</span><span class="nt">&gt;</span>mike-neck&#39;s dq site<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h4&gt;</span>Html Tags<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;img</span> <span class="na">src=</span><span class="s">&#39;//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00&#39;</span> <span class="na">style=</span><span class="s">&#39;width : 400px;&#39;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h4&gt;</span>Codes<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>function <span class="nt">&lt;code&gt;</span>lists:reverse/1<span class="nt">&lt;/code&gt;</span> returns a List.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>tag <span class="nt">&lt;code&gt;</span><span class="ni">&amp;lt;</span>em<span class="ni">&amp;gt;</span><span class="nt">&lt;/code&gt;</span> means emphasis<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h4&gt;</span>emphasis<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;em&gt;</span>em?<span class="nt">&lt;/em&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;strong&gt;</span>bold?<span class="nt">&lt;/strong&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h4&gt;</span>Blockquotes<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>This is a blockquotes
</span><span class='line'>  from here.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/blockquote&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今のところ、残念な点は</p>

<ul>
<li><code>===</code>がレンダーされない</li>
<li>上の行にテキストがある状態で&#8217;&mdash;&ndash;&lsquo;がタグ<code>&lt;tr/&gt;</code>にレンダーされる</li>
<li>当然ながら、GitHubっぽいコードスニペットはレンダーできない</li>
</ul>


<p>ちょっと残念なので、</p>

<p>他のマークダウンパーサーも試してみようと思います。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEAのJetGradleの使い方]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/06/intellij-ideafalsejetgradlefalseshi-ifang/"/>
    <updated>2013-06-06T02:55:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/06/intellij-ideafalsejetgradlefalseshi-ifang</id>
    <content type="html"><![CDATA[<p><a href="http://www.jetbrains.com/idea/features/javascript.html" style="display:block; background:#0d3a9e url(http://www.jetbrains.com/idea/opensource/img/all/banners/idea468x60_blue.gif) no-repeat 0 7px; border:solid 1px #0d3a9e; margin:0;padding:0;text-decoration:none;text-indent:0;letter-spacing:-0.001em; width:466px; height:58px" alt="Java IDE with advanced HTML/CSS/JS editor for hardcore web-developers" title="Java IDE with advanced HTML/CSS/JS editor for hardcore web-developers"><span style="margin: 5px 0 0 61px;padding: 0;float: left;font-size: 12px;cursor:pointer;  background-image:none;border:0;color: #acc4f9; font-family: trebuchet ms,arial,sans-serif;font-weight: normal;text-align:left;">Can’t live without</span><span style="margin:0 0 0 205px;padding:18px 0 2px 0; line-height:13px;font-size:11px;cursor:pointer;  background-image:none;border:0;display:block; width:255px; color: #acc4f9; font-family: trebuchet ms,arial,sans-serif;font-weight: normal;text-align:left;">Smart Java and Groovy IDE<br/> with powerfull refactoring and code assistance.</span></a></p>

<p>こんにちわ、みけです。</p>

<p>いや、もう表題の件に関しては、</p>

<p>いろんなブログで既出なんですけど、
(と思ってググったら、あまりなかった(´・ω・｀))</p>

<p>僕もよくわかってなかったので、</p>

<p>使ってみたときのメモを書いとくことにしました。</p>

<h2>JetGradleってそもそも何よ？</h2>

<p>IntelliJ IDEAに最初からバンドルされているgradleのサポートプラグインです。</p>

<p>では使い方を見て行きましょう。</p>

<h3>(1)JetGradleタブを開きます。</h3>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdHRGZ3ZrZU90Q00" style="width : 420px;" /></p>

<p>画面右下の方にちょこんとある、<strong>JetGradle</strong>タブをクリックして開きます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRMEw3b0I1OEo0azA" style="width : 420px;"/></p>

<h3>(2) Addアンカーをクリックして、build.gradleファイルを割り当てます。</h3>

<p>ダイアログが出るので、今のプロジェクトのgradleファイルを割り当てます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRS0xDejBZWmo4ekk" style="width : 280px;" /></p>

<p>build.gradleファイルを選択するとこんなかんじになります。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRS1FjS0VhU3BKMTQ" style="width : 420px;" /></p>

<h3>(3) Taskタブをクリックします。</h3>

<p>残念ながらこの段階ではタスク一覧が表示されません。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRN0xMWnpkNVFOS1E" style="width : 420px;" /></p>

<h3>(4) 更新ボタンをクリックします。</h3>

<p>先ほどのタブの左上の方にある更新ボタンをクリックします。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRZ051S3NqcEJXQkU" style="width : 420px;" /></p>

<p>するとIntelliJがgradle┏( ^o^)┓ﾄﾞｺﾄﾞｺﾄﾞｺﾄﾞｺ┗( ^o^)┛ﾄﾞｺﾄﾞｺﾄﾞｺﾄﾞｺと聞いてきます。
(AA はテキトー)</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcWI4dXkwTENHam8" style="width : 420px;" /></p>

<p>右下の方にある、<code>Gradle settings</code>アンカーをクリックします。</p>

<h3>(5) GRADLE_HOMEを設定します。</h3>

<p>こんなダイアログが表示されます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRVHpuOTl5S09XUFk" style="width : 280px;"/></p>

<p>僕はgradleのインストールをgvmでやっているので、</p>

<p>どこに<code>GRADLE_HOME</code>があるのかよくわからんので、
(覚えろよjk)</p>

<p>とりあえず、ターミナルで確認します。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcVgtcU5JMmo3NlU" style="width : 280px;" /></p>

<p><code>GRADLE_HOME</code>の値をコピペします。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRdFV5cDB0d2IyUzA" style="width : 280px;" /></p>

<p>OKボタンをクリックすると、IntelliJがgradleファイルの読み込みを始めます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRY19neTRiY2Njd2M" style="width : 450px;" /></p>

<p>読み込みが完了すると、タスク一覧が表示されます。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRcU9JTnpHanlHNGM" style="width : 450px;" /></p>

<h3>(6)JetGradleからタスクを実行してみる</h3>

<p>とりあえず、テストを実行してみたいと思います。</p>

<p>タスク一覧から実行したいタスクを選択します。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRbGNhODNIOWFBd1U" style="width : 450px;" /></p>

<p>ここでは<code>test</code>タスクを実行したいので、</p>

<p><code>test</code>タスクを選択しています。</p>

<p>選択したタスクを長押し(Windowsの場合は右クリック)して、</p>

<p>実行する方法(デバッグとかrunとか)を選択します。</p>

<p>ここではRunを選択します。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRUFhIa2RhVDF0QlE" style="width : 450px;" /></p>

<p>テストが実行されました。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRT0JoWjlKZXRyRWM" style="width : 450px;" /></p>

<p>これで、一々IDEからターミナルに移動して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gradle test</span></code></pre></td></tr></table></div></figure>


<p>とか打たなくてもいいですね。</p>

<h3>(7)JetGradleの成果物はどこにあるの？</h3>

<p>これ、疑問に思ったので、</p>

<p>あえてテストをこけさせてみました。
(こうすることでテストレポートの位置を示してくれる)</p>

<p>わざと落ちるテストを書いて、</p>

<p>Recent Taskからtestをじっこうします。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRTGJOeEtoWDJBODQ" style="width : 450px;"/></p>

<p>はい、落ちました。</p>

<p><img src="http://mike-neck.github.io//googledrive.com/host/0B4hhdHWLP7RRTnBXcndheThEV1k" style="width : 450px;" /></p>

<p>で、テストレポートの場所を見ると、</p>

<p>ターミナルからテストを実行した時と変わらない場所に出力されていることがわかります。</p>

<p>以上、結論</p>

<h3>JetGradle便利すなー</h3>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマーがGitHubでブログを公開するべき理由]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/03/puroguramagagithubdeburoguwogeng-gai-surubekili-you/"/>
    <updated>2013-06-03T00:44:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/03/puroguramagagithubdeburoguwogeng-gai-surubekili-you</id>
    <content type="html"><![CDATA[<p>こんにちわ。みけです。</p>

<p>早いもので僕がブログをこちらに移動してから約1ヶ月経ちました。</p>

<p>こちらのブログに移動してよかったと思う理由を挙げてみたいと思います。</p>

<h2>(1)小さく記事を書いていくことができる</h2>

<p>ブログに自分の考えなどをまとめるのには、</p>

<p>それなりに時間が必要であったり、</p>

<p>集中力が必要であったりします。</p>

<p>これまでのブログサービスでも、</p>

<p>一応下書きという形で保存することは出来ましたが、</p>

<p>どうしても大きなものになってしまったりする場合、</p>

<p>こまめに保存できなかったりすると痛いことが多々あります。</p>

<p>GitHubでブログを書いている場合は、</p>

<p>こまめに変更が管理できるので、</p>

<p>ブログのように長いものを書くときに、</p>

<p>非常に便利です。</p>

<p>逆に間違えたなと思うところなどは、</p>

<p>消せますし、</p>

<p>消したところを間違えたという場合は復帰させることもできます。</p>

<p>というわけで、僕のようにダラダラ記事を書く人でも、</p>

<p>最終的に記事としてまとめられるので、</p>

<p>Gitでバージョン管理しながらブログを書くのは非常に便利であると思います。</p>

<h2>結論</h2>

<p>Gitでバージョン管理しながら書くブログは書きやすいです。</p>

<p>え、理由、そんなのこれしかないですお…(´・ω・｀)</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows(7)環境でgvmをインストールする]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/02/windows-7-huan-jing-dervmwoinsutorusuru/"/>
    <updated>2013-06-02T15:28:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/02/windows-7-huan-jing-dervmwoinsutorusuru</id>
    <content type="html"><![CDATA[<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRZV9ueElsQUlYLVU" style="width : 500px"/></p>

<p>こんにちわ、みけです。</p>

<p>Windowsでのgroovyの環境構築といえば、</p>

<p>zipを落としてきて、解凍して、パスを通してといった作業をしなければならないのですが、</p>

<p>最近それが結構面倒くさいなと感じて、</p>

<p>Windowsから疎遠になっていました。</p>

<p>gvmをインストールすればいいんですが、</p>

<p>gvmのインストールコマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s get.gvmtool.net | bash</span></code></pre></td></tr></table></div></figure>


<p>はい、Windowsではできませんね。</p>

<h4>cygwin</h4>

<p>WindowsでGNUな環境を構築するといえば、cygwinですが、</p>

<p>僕は自分が認める(他人はどうだかよく知らん)情弱なので、</p>

<p>cygwin環境の構築に挫折した人です。</p>

<p>で、cygwinでgvmインストールできるよと言われても、</p>

<p>その元になるcygwinが構築できないので、</p>

<p>Windowsでgvm使えないじゃんと思っていました。</p>

<h4>mingw</h4>

<p>Windowsにはいっているmsysgitをいじっていて、</p>

<p>mingwなら構築できそうだと気づいたので、</p>

<p>やってみたら意外とできたので、</p>

<p>その作業メモを書いておきます。</p>

<p>ちなみに、参考にしたページはこちらです。</p>

<ul>
<li><a href="http://tanakh.jp/posts/2013-05-23-windows-setup.html">最近のWindowsの開発環境のセットアップ &ndash; 純粋関数空間</a></li>
</ul>


<h2>(1)Chocolateyのインストール</h2>

<p>Windowsのパッケージ管理ツールです。</p>

<p><a href="http://chocolatey.org/">http://chocolatey.org/</a>に書いてある</p>

<p>スクリプトをコピペしてインストールします。</p>

<h2>(2)mingwのインストール</h2>

<p>次のコマンドでインストール出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\&gt; cinst mingw</span></code></pre></td></tr></table></div></figure>


<p>なお、インストールの際に</p>

<ul>
<li>C++ Compiler</li>
<li>MSYS Basic System</li>
<li>MinGW Developer Toolkit</li>
</ul>


<p>も選択しておいたほうがいいのかなと思って、選択しています。
(よくわかってない…)</p>

<h2>(3)msys-unzipのインストール</h2>

<p>ここからはmingwでの作業になります。</p>

<p>なお、先ほどのリンクでも紹介されている<a href="http://chocolatey.org/packages/ConEmu/12.4.17.1">ConEmu</a>で、Taskの設定で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:¥MinGW¥msys¥1.0¥bin¥bash.exe --login -i</span></code></pre></td></tr></table></div></figure>


<p>で、mingwを起動できるようにして、</p>

<p>そのコンソールから使っています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mingw-get install msys-unzip</span></code></pre></td></tr></table></div></figure>


<p>これでインストール出来ます。</p>

<h2>(4)gvmのインストール</h2>

<p>ここまでくれば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s get.gvmtool.net | bash</span></code></pre></td></tr></table></div></figure>


<p>を実行することができます。</p>

<p>これで、gvmでらくらくgroovyを扱えますね。</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRMXctLWN4TmNQdkU" style="width : 408px; height : 280px;"></p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidがJavaでない理由 - 1]]></title>
    <link href="http://mike-neck.github.io/blog/2013/06/01/androidgajavadenaili-you-1/"/>
    <updated>2013-06-01T02:22:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/06/01/androidgajavadenaili-you-1</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>みけです。</p>

<p>また仰々しいタイトルですみません。</p>

<h2>Androidのsdkが5月16日近辺にrevision22に更新されたようです</h2>

<p>リリースノートを一部抜粋、翻訳(意訳)するとこんな感じです。</p>

<ul>
<li>既存の<code>platfomr-tools</code>を元にSDKの構造を変更して、新しいビルドツール等を追加しました。この変更により、ビルドツールのバージョンとIDEのバージョンを切り離すことが可能になります。その結果、IDEの更新なしにツールの更新が可能になりました。</li>
</ul>


<p>さて、僕はAndroidに関しては情弱なので、この変更が意味するところをあまり気にせず、</p>

<p>本題である<strong>「JavaがAndroidでない理由」</strong>ことの実例コードを書こうとして</p>

<p>サンプルプロジェクトを作って、実行しようとした時にそれは起こりました。</p>

<h2>android-apt-compiler: Cannot run program &ldquo;/Users/name/Android/sdk/android-sdk-macosx/platform-tools/aapt&rdquo;: error=2, No such file or directory</h2>

<p><img src="https://pbs.twimg.com/media/BLlghpZCAAA8qOp.png:large" style="width : 504px;"/></p>

<p>うん？コンパイル用のツールが見つからない？</p>

<p>というわけで、件のディレクトリーに移動、ファイル探してみると…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:~ mike$ cd ~/Android/sdk/android-sdk-macosx/platform-tools/
</span><span class='line'>:platform-tools mike$ ll
</span><span class='line'>total 3664
</span><span class='line'>drwxr-xr-x   7 mike  staff   238B  5 31 19:05 .
</span><span class='line'>drwxr-x---  14 mike  staff   476B  5 31 18:31 ..
</span><span class='line'>-rw-r--r--   1 mike  staff   396K  5 31 18:30 NOTICE.txt
</span><span class='line'>-rwxr-xr-x   1 mike  staff   1.2M  5 31 18:30 adb
</span><span class='line'>drwxr-xr-x   3 mike  staff   102B  5 31 18:30 api
</span><span class='line'>-rwxr-xr-x   1 mike  staff   185K  5 31 18:30 fastboot
</span><span class='line'>-rw-r--r--   1 mike  staff    16K  5 31 18:30 source.properties</span></code></pre></td></tr></table></div></figure>


<p>うむ、確かにそんなものはない…</p>

<p>で、いろいろとディレクトリーを漁ってみると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:~ mike$ cd ~/Android/sdk/android-sdk-macosx/build-tools/17.0.0/
</span><span class='line'>:17.0.0 mike$ ll
</span><span class='line'>total 61624
</span><span class='line'>drwxr-xr-x  11 mike  staff   374B  5 31 18:30 .
</span><span class='line'>drwxr-xr-x   3 mike  staff   102B  5 31 18:30 ..
</span><span class='line'>-rw-r--r--   1 mike  staff    11K  5 31 18:30 NOTICE.txt
</span><span class='line'>-rwxr-xr-x   1 mike  staff   1.2M  5 31 18:30 aapt
</span><span class='line'>-rwxr-xr-x   1 mike  staff   273K  5 31 18:30 aidl
</span><span class='line'>-rwxr-xr-x   1 mike  staff   141K  5 31 18:30 dexdump
</span><span class='line'>-rwxr-xr-x   1 mike  staff   2.5K  5 31 18:30 dx
</span><span class='line'>drwxr-xr-x   3 mike  staff   102B  5 31 18:30 lib
</span><span class='line'>-rwxr-xr-x   1 mike  staff    28M  5 31 18:30 llvm-rs-cc
</span><span class='line'>drwxr-xr-x   4 mike  staff   136B  5 31 18:30 renderscript
</span><span class='line'>-rw-r--r--   1 mike  staff    16K  5 31 18:30 source.properties</span></code></pre></td></tr></table></div></figure>


<p>お、あった。</p>

<p>…あったはいいよ。</p>

<p>でも、このディレクトリーは何？</p>

<p><strong><code>17.0.0</code></strong></p>

<p>何、このディレクトリー。</p>

<p>数字ディレクトリー。</p>

<p><strong>どこのSIerの作業ですか？</strong></p>

<p>え、じゃあ、君は新しいAPIバージョン(例えば18)が出たら、</p>

<p><strong><code>18.0.0</code>ディレクトリーでも作ってくれるんです？</strong></p>

<p>これ、ビルドスクリプトとか、ビルド関連のちょっとした作業とか</p>

<p>ぶっ壊れるよね…え、ぶっ壊れない？なら、いいんだけど、</p>

<p><strong>IntelliJ IDEA様</strong>を欺いているよね…</p>

<p>これじゃ</p>

<h2>Androidって<strong>write once, run once upon a time</strong>ってことだよね</h2>

<p>Javaの最も貫徹したコンセプトである</p>

<h2>write once run anywhere</h2>

<p>を破っているよね。</p>

<p>というわけで、結論</p>

<h2>AndroidはJavaではなかった、決して</h2>

<p><strong>p.s.</strong></p>

<p>最初この問題にあたった時にStack Overflowを調べました。</p>

<p>すでに、先駆者がいました。</p>

<p><a href="http://stackoverflow.com/questions/16588969/android-hello-world-compile-error-intellij-cannot-find-aapt">Android Hello-World compile error: Intellij cannot find aapt</a></p>

<p>で、解決方法のアドバイスとして</p>

<ul>
<li><strong>JetBrains様がIDEをアップデートしてくれるのを待つしかないんじゃない？</strong></li>
<li>シンボリックリンクを貼ればいいんじゃない</li>
<li>ツール類を<code>platform-tools</code>にコピペすればいいんじゃない</li>
</ul>


<p>と有りました。</p>

<p>当面の解決策としては2番目が採択されそうですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:17.0.0 mike$ ln -s aapt ../../platform-tools/aapt
</span><span class='line'>:17.0.0 mike$ ln -s aidl ../../platform-tools/aidl
</span><span class='line'>:17.0.0 mike$ ln -s lib ../../platform-tools/lib</span></code></pre></td></tr></table></div></figure>


<p>をやった後ですが、</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RReVgzYzJvOHZJS2s" style="width : 488px;" /></p>

<p>はい、コンパイルできません。</p>

<p>というわけで、JetBrains様がIntelliJ IDEAを対応させるのを待つしかなさそうです。</p>

<p>IntelliJガチ勢の僕としては、googleに一言もの申したい</p>

<h2>googleさん、JetBrains様にごめんなさいしてください</h2>

<p>つーか、ツールがバージョンアップしてもIDEのバージョンアップが必要ないと言ってた、</p>

<p>あのリリースノート何だったんです？</p>

<p>google 「ツールがバージョンアップしてもIDEのバージョンアップがいらないと言ったな、あれは、嘘だ」</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidがJavaだと思っている人のためのGroovy講座 - 2]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/30/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo-2/"/>
    <updated>2013-05-30T10:48:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/30/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo-2</id>
    <content type="html"><![CDATA[<p>こんいちわ。みけです。</p>

<p>またも、タイトルが仰々しくてすみません。</p>

<p>本当に大したこと書かないです。</p>

<p>で、相変わらずAndroidまたもや出て来ません。</p>

<p>gradleも出て来ません。</p>

<p>でも、Android Studioの登場や、gradle-android-pluginで</p>

<p>gradleに興味を持たれた方には読んで貰いたいと思います。</p>

<p>以下、本題。</p>

<h2><code>Closure&lt;V&gt;</code>とはなんぞや</h2>

<p>Closureについて僕がなんか言うと、</p>

<p>皆が混乱するので(それだけ僕もちゃんと説明できるほど理解していない…orz)</p>

<p>とりあえず<a href="http://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3">WikipediaのClosure</a>でも読んで下さい。</p>

<p>Javaでいえば、<code>Callable&lt;V&gt;</code>みたいなものです。</p>

<p>で、<code>Callable&lt;V&gt;</code>に比べて便利なのが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">callable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// some codes</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいに書かなくてよいあたりです。</p>

<p>ちなみに<code>Callable&lt;T&gt;</code>と異なるところもあります。</p>

<p>それは、おいおい、説明します。</p>

<h1>そろそろ<code>Closure&lt;V&gt;</code>のサンプル見せてくれよ</h1>

<p>というわけで、適当にサンプルをみつくろってみました。</p>

<h4>単純な値を返すだけのClosure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="s1">&#39;Hello, Closure!&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="nf">closure</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Hello, Closure!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうそう、<strong>groovyでは<code>return</code>を省略することができます</strong>。</p>

<p>その場合、最後に評価された式の値が<code>return</code>されます。</p>

<p>上記のClosureではClosureの最終式<code>'Hello, Closure!'</code>が評価され、</p>

<p>その値<code>'Hello, Closure!'</code>が返されます。</p>

<h4>引数をとるClosure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">hello</span> <span class="o">=</span> <span class="o">{</span><span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="s1">&#39;Hello, mike&#39;</span> <span class="o">==</span> <span class="n">hello</span><span class="o">(</span><span class="s1">&#39;mike&#39;</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="s1">&#39;Hello, null&#39;</span> <span class="o">==</span> <span class="n">hello</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Closure&lt;V&gt;</code>と<code>Callable&lt;V&gt;</code>との決定的な違いが、
(大した違いではないが)</p>

<p>引数を与えることができる点です。</p>

<p>これを<code>Callable&lt;V&gt;</code>でやろうとすると次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">Hello</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHello</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="k">new</span> <span class="n">Hello</span><span class="o">(</span><span class="s">&quot;mike&quot;</span><span class="o">).</span><span class="na">call</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;Hello, mike&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="k">new</span> <span class="n">Hello</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">call</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;Hello, null&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Closureを返すClosure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">counter</span> <span class="o">=</span> <span class="o">{</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">offset</span><span class="o">++</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="n">counter</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">100</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">it</span> <span class="o">==</span> <span class="n">closure</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初期値の0からカウントするカウンターのようなクロージャーが返ってきます。</p>

<p>型としては<code>Closure&lt;Closure&lt;Integer&gt;&gt;</code>といったところでしょうか…</p>

<p>で、これをみると一つ気持ち悪いところがありますね。</p>

<p><strong>元の値ってどうなってしまうの？</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span><span class="n">String</span> <span class="n">hello</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">{</span><span class="n">String</span> <span class="n">name</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">hello</span> <span class="o">+=</span> <span class="n">name</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">original</span> <span class="o">=</span> <span class="s1">&#39;Hello, &#39;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">message</span> <span class="o">=</span> <span class="n">closure</span><span class="o">(</span><span class="n">original</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="nf">message</span><span class="o">(</span><span class="s1">&#39;mike&#39;</span><span class="o">)</span> <span class="o">==</span> <span class="s1">&#39;Hello, mike&#39;</span>
</span><span class='line'><span class="k">assert</span> <span class="nf">message</span><span class="o">(</span><span class="s1">&#39;!&#39;</span><span class="o">)</span> <span class="o">==</span> <span class="s1">&#39;Hello, mike!&#39;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">original</span> <span class="o">==</span> <span class="s1">&#39;Hello, &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>というように、元の値は壊れませんが、</p>

<p>返されるClosureが元々持っていた値は壊れていきます。</p>

<p>ところで、イテレーターとして<code>Closure&lt;V&gt;</code>を使うときに出てくる</p>

<h4><code>it</code>ってなんやねん？</h4>

<p>gradleのプラグイン宣言などで、ときどきこんな記述が出てきますね</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">,</span> <span class="s1">&#39;groovy&#39;</span><span class="o">].</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">apply</span> <span class="n">plugin</span> <span class="o">:</span> <span class="n">it</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、この<code>it</code>ですが、コレクションの一つ一つの要素です。</p>

<p>あ、そんなこと言われなくても知ってたって(´・ω・｀)</p>

<p>まあ、そんなことは言わずに、すこし試してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">4</span><span class="o">).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;it is ${it}.&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果はこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">it</span> <span class="n">is</span> <span class="mi">1</span><span class="o">.</span>
</span><span class='line'><span class="n">it</span> <span class="n">is</span> <span class="mi">2</span><span class="o">.</span>
</span><span class='line'><span class="n">it</span> <span class="n">is</span> <span class="mi">3</span><span class="o">.</span>
</span><span class='line'><span class="n">it</span> <span class="n">is</span> <span class="mi">4</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>これって、でもどういうふうに呼ばれているの？</p>

<p>groovyの<code>DefaultGroovyMethods</code>クラスを介して呼ばれています。</p>

<h5>自分でも<code>it</code>でアクセスできるイテレーター作ってみたい</h5>

<p>というわけで、<code>Closure&lt;V&gt;</code>を引数にとるメソッドを書いてみました。</p>

<p><code>it</code>で要素にアクセスできて、ちょっと嬉しいですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Integer</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="na">define</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">collect</span> <span class="o">=</span> <span class="o">{</span><span class="n">Closure</span> <span class="n">closure</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">IntRange</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">delegate</span><span class="o">).</span><span class="na">collect</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">closure</span><span class="o">(</span><span class="n">it</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="mi">2</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">it</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="o">}</span> <span class="o">==</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>というわけで、<code>it</code>は一つ一つの要素であることが事象として理解していただけたと思います。</p>

<p>で、<code>it</code>っていつ割り当てられるの？ということで、ソースをざっと見ていたんですが、</p>

<p>見つかりませんでした(´・ω・｀)</p>

<p>なお調べている過程で僕も初めて知ったのですが、</p>

<p><code>Closure&lt;V&gt;</code>は抽象クラスで、</p>

<p>コンパイル時に実際のクラスが生成されているようです。</p>

<p>まだまだ僕も勉強が足りませんね…</p>

<p>で、このへんが気になりだすと、もっと気になるのが…</p>

<h4>Closureのスコープってどうなのよ</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">outside</span> <span class="o">=</span> <span class="s1">&#39;This is outside&#39;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">doSomething</span> <span class="o">=</span> <span class="o">{</span><span class="n">println</span> <span class="s1">&#39;do something&#39;</span><span class="o">}</span>
</span><span class='line'><span class="kt">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">inside</span> <span class="o">=</span> <span class="s1">&#39;This is inside&#39;</span>
</span><span class='line'>    <span class="n">doSomething</span><span class="o">()</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">outside</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">inside</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">closure</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">doSomething</span><span class="o">()</span>
</span><span class='line'><span class="n">println</span> <span class="n">outside</span>
</span><span class='line'><span class="n">println</span> <span class="n">inside</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実効すると次のような結果が得られます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="k">do</span> <span class="n">something</span>
</span><span class='line'><span class="n">This</span> <span class="n">is</span> <span class="n">outside</span>
</span><span class='line'><span class="n">This</span> <span class="n">is</span> <span class="n">inside</span>
</span><span class='line'><span class="k">do</span> <span class="n">something</span>
</span><span class='line'><span class="n">This</span> <span class="n">is</span> <span class="n">outside</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">thrown</span>
</span><span class='line'><span class="mi">5</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">2013</span> <span class="mi">8</span><span class="o">:</span><span class="mi">25</span><span class="o">:</span><span class="mi">06</span> <span class="err">午後</span> <span class="n">org</span><span class="o">.</span><span class="na">codehaus</span><span class="o">.</span><span class="na">groovy</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">StackTraceUtils</span> <span class="n">sanitize</span>
</span><span class='line'><span class="nl">WARNING:</span> <span class="n">Sanitizing</span> <span class="nl">stacktrace:</span>
</span><span class='line'><span class="n">groovy</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">MissingPropertyException</span><span class="o">:</span> <span class="n">No</span> <span class="n">such</span> <span class="nl">property:</span> <span class="n">inside</span> <span class="k">for</span> <span class="nl">class:</span> <span class="n">ConsoleScript83</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">codehaus</span><span class="o">.</span><span class="na">groovy</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">ScriptBytecodeAdapter</span><span class="o">.</span><span class="na">unwrap</span><span class="o">(</span><span class="n">ScriptBytecodeAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">50</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">codehaus</span><span class="o">.</span><span class="na">groovy</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">callsite</span><span class="o">.</span><span class="na">PogoGetPropertySite</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">PogoGetPropertySite</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">49</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">codehaus</span><span class="o">.</span><span class="na">groovy</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">callsite</span><span class="o">.</span><span class="na">AbstractCallSite</span><span class="o">.</span><span class="na">callGroovyObjectGetProperty</span><span class="o">(</span><span class="n">AbstractCallSite</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">231</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">ConsoleScript83</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nl">ConsoleScript83:</span><span class="mi">14</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Closure&lt;V&gt;</code>の<code>closure</code>の中からは、</p>

<p>フィールド<code>outside</code>を参照することや、<code>doSomething</code>を実行することはできますが、</p>

<p>スクリプト本体からは<code>closure</code>内部の<code>inside</code>にアクセスすることはできません。</p>

<p>まあ、大体ご想像されていたとおりだと思います。</p>

<h4>実は<code>Callable&lt;V&gt;</code>だった<code>Closure&lt;V&gt;</code></h4>

<p>さて、ここまでは<code>Callable&lt;V&gt;</code>との対比で<code>Closure&lt;V&gt;</code>を見て来ましたが、</p>

<p><code>Closure&lt;V&gt;</code>は実は<code>Callable&lt;V&gt;</code>を実装した抽象クラスです。</p>

<p>まず、<code>Closure&lt;V&gt;</code>のクラスファイルを見てみましょう。</p>

<figure class='code'><figcaption><span>Closure.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Closure</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">GroovyObjectSupport</span> <span class="kd">implements</span> <span class="n">Cloneable</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">,</span> <span class="n">GroovyCallable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some codes</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Closure&lt;V&gt;</code>はインターフェース<code>GroovyCallable&lt;V&gt;</code>を実装しています。</p>

<p>で、この<code>GroovyCallable&lt;V&gt;</code>ってなんやねんというと…</p>

<figure class='code'><figcaption><span>GroovyCallable.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GroovyCallable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ってことで、<code>Callable&lt;V&gt;</code>を継承しているインターフェースになります。</p>

<p>まとめると<code>Closure&lt;V&gt;</code>は<code>Callable&lt;V&gt;</code>の実装クラスということになります。</p>

<p>では試してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.*</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">callable</span> <span class="o">=</span> <span class="o">{</span><span class="kt">int</span> <span class="n">sec</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;${new Date().format(&#39;yyyy/MM/dd hh:mm:ss&#39;)} : Sleeping ${sec} seconds...&quot;</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sec</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;${new Date().format(&#39;yyyy/MM/dd hh:mm:ss&#39;)} : This is ${sec}&quot;</span> <span class="k">as</span> <span class="n">String</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">service</span><span class="o">.</span><span class="na">invokeAll</span><span class="o">((</span><span class="mi">10</span><span class="o">..</span><span class="mi">1</span><span class="o">).</span><span class="na">collect</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">callable</span><span class="o">(</span><span class="n">it</span><span class="o">)</span> <span class="k">as</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">}).</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">it</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
</span><span class='line'><span class="o">}.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>この実行結果は次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">56</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">10</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">56</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">8</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span><span class="mi">56</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">9</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">04</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">7</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">05</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">6</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">06</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">5</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">11</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">4</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">11</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">2</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">11</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">3</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">13</span> <span class="o">:</span> <span class="n">Sleeping</span> <span class="mi">1</span> <span class="n">seconds</span><span class="o">...</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">06</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">10</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">05</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">9</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">04</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">8</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">11</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">7</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">11</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">11</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">5</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">15</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">14</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">13</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">2013</span><span class="s">/05/</span><span class="mi">31</span> <span class="mi">02</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">14</span> <span class="o">:</span> <span class="n">This</span> <span class="n">is</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>全然、問題なく<code>Callable&lt;V&gt;</code>として動いているのが確認できると思います。</p>

<p>で、別にここまではなんだjavaじゃん、というわけですが、</p>

<p>ここからがほぼ本題です。</p>

<h4>delegate</h4>

<p>delegateがgroovyの<code>Closure&lt;V&gt;</code>の柔軟性をもたらしていることに疑いはありません。</p>

<p>まずは使用例から…</p>

<h5><code>groovy.xml.MarkupBuilder</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.*</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">w</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">border</span> <span class="o">=</span> <span class="s1">&#39;border : solid 1px #ccc;&#39;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">background</span> <span class="o">=</span> <span class="s1">&#39;background-color : rgba(239, 239, 255, 0.7);&#39;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">padding</span> <span class="o">=</span> <span class="s1">&#39;padding : 5px;&#39;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">radius</span> <span class="o">=</span> <span class="s1">&#39;border-radius : 5px;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="na">html</span><span class="o">(</span><span class="n">lang</span> <span class="o">:</span> <span class="s1">&#39;ja&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">title</span> <span class="s1">&#39;test page&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">h3</span> <span class="s1">&#39;Hello Groovy!&#39;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">(</span><span class="n">style</span> <span class="o">:</span> <span class="s2">&quot;${border}${background}${padding}${radius}&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s1">&#39;This document is made by groovy.&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span> <span class="n">w</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを実効すると、次のようなhtmlファイルができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&#39;ja&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>test page<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h3&gt;</span>Hello Groovy!<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">&#39;border : solid 1px #ccc;background-color : rgba(239, 239, 255, 0.7);padding : 5px;border-radius : 5px;&#39;</span><span class="nt">&gt;</span>This document is made by groovy.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MarkupBuilder</code>というクラスは<code>groovy.util.BuilderSupport</code>クラスを継承していて、</p>

<p>存在しないようなメソッドを実行する際に、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">Object</span> <span class="nf">doInvokeMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">methodName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">args</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>を介して実行します。</p>

<p>そして、このメソッドが内部で<code>Node</code>を作っていきます。</p>

<p>そういうわけで、上記のコードの11行目の<code>html</code>メソッドが実行されて、</p>

<p><code>"html"</code>というノードが作成されるのはわかるかと思います。</p>

<p>問題は<code>html</code>というメソッドが引数として受け入れた<code>Closure&lt;V&gt;</code>が</p>

<p><code>head</code>というメソッドや<code>body</code>メソッドを実行しています。</p>

<p>さきほどの<code>Closure</code>のスコープに戻るとこの場合、</p>

<p><code>head</code>や<code>body</code>というメソッドはないので、</p>

<p>ここで<code>MissingMethodException</code>が発生しそうですが、</p>

<p>発生しません。</p>

<p>何故でしょうか？</p>

<p><strong>これの謎を解く鍵がdelegateです。</strong></p>

<h5><code>Closure#setDelegate</code>と<code>Closure#setResolveStrategy</code></h5>

<p><code>Closure&lt;V&gt;</code>には変数名やメソッド名をどのオブジェクトから参照するのかを決定することができます。</p>

<p>そのオブジェクトへの参照がdelegateになります。</p>

<p>では、delegateをわざとらしいほど強調したスクリプトを見てみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">setProperty</span> <span class="s1">&#39;x&#39;</span><span class="o">,</span> <span class="mi">1000</span>
</span><span class='line'><span class="n">setProperty</span> <span class="s1">&#39;y&#39;</span><span class="o">,</span> <span class="mi">500</span>
</span><span class='line'><span class="n">setProperty</span> <span class="s1">&#39;exec&#39;</span><span class="o">,</span> <span class="o">{</span><span class="n">println</span> <span class="s2">&quot;x : ${x}, y : ${y}&quot;</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">map</span> <span class="o">=</span> <span class="o">[</span><span class="n">x</span> <span class="o">:</span> <span class="mi">10</span><span class="o">,</span> <span class="n">y</span> <span class="o">:</span> <span class="mi">5</span><span class="o">,</span> <span class="n">exec</span> <span class="o">:</span> <span class="o">{</span><span class="n">println</span> <span class="s2">&quot;x = ${x}, y = ${y}&quot;</span><span class="o">}]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">closure</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;x -&gt; ${x}&quot;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;y -&gt; ${y}&quot;</span>
</span><span class='line'>    <span class="n">print</span> <span class="s1">&#39;delegate exec -&gt; &#39;</span>
</span><span class='line'>    <span class="n">exec</span><span class="o">.</span><span class="na">call</span><span class="o">()</span>
</span><span class='line'>    <span class="n">print</span> <span class="s1">&#39;owner exec -&gt; &#39;</span>
</span><span class='line'>    <span class="n">exec</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">closure</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">map</span>
</span><span class='line'><span class="n">closure</span><span class="o">.</span><span class="na">resolveStrategy</span> <span class="o">=</span> <span class="n">Closure</span><span class="o">.</span><span class="na">DELEGATE_FIRST</span>
</span><span class='line'><span class="n">closure</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>では、実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">x</span> <span class="o">-&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="n">y</span> <span class="o">-&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">delegate</span> <span class="n">exec</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">500</span>
</span><span class='line'><span class="n">owner</span> <span class="n">exec</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">:</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">y</span> <span class="o">:</span> <span class="mi">500</span>
</span></code></pre></td></tr></table></div></figure>


<p>面白い結果が返ってきました。</p>

<p><code>closure</code>内部で<code>x</code>と<code>y</code>の値は<code>map</code>から取得されたものになっています。</p>

<p>一方、<code>exec</code>に関しては二つの結果が出てきています。</p>

<p>これは、15行目と16行目で行われている<code>closure</code>のdelegateの設定によって説明出来ます。</p>

<p><code>closure</code>がフィールド名を解決する仕組みは下記のようになっています。</p>

<ul>
<li><code>Closure.DELEGATE_FIRST</code>でdelegateされたオブジェクトから順番に解決していく</li>
<li>delegateされたオブジェクト<code>map</code>から変数を解決する</li>
</ul>


<p>ここから、7行目、8行目の<code>x</code>と<code>y</code>は<code>map</code>由来のものであることがわかります。</p>

<p>また10行目と12行目の<code>exec</code>が異なる結果となっているのは、</p>

<p>10行目の<code>exec</code>はフィールド名としてまず解決された後に、</p>

<p><code>Closure&lt;V&gt;</code>が実行されています。</p>

<p>一方、12行目の<code>exec</code>ではメソッドとして(<code>map</code>(クラスは<code>java.util.Map</code>)にはメソッド<code>exec</code>がない)</p>

<p>名前解決をします。そのため<code>closure</code>の<code>OWNER</code>であるスクリプトの方の<code>exec</code>が参照されます。</p>

<p>また、10行目と12行目の<code>exec</code>が参照する<code>x</code>と<code>y</code>が1行目と2行目で設定されている<code>x</code>と<code>y</code>なのは</p>

<p>次の理由からです。</p>

<ul>
<li><code>map.exec</code>のdelegateが設定されてない</li>
<li><code>exec</code>のdelegateが設定されていない</li>
</ul>


<h5><code>MarkupBuilder</code>再び</h5>

<p>さきほどの<code>MarkupBuilder</code>に戻ります。</p>

<p><code>MarkupBuilder#doInvokeMethod(String, Object, Object)</code>メソッドでは</p>

<p>どのような処理がされているのかというと…</p>

<figure class='code'><figcaption><span>MarkupBuilder.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// this is partial codes</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">Object</span> <span class="nf">doInvokeMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">methodName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">node</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Closure</span> <span class="n">closure</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// creating node and attach it to variable node.</span>
</span><span class='line'>    <span class="c1">// getting closure from arg and attach it to variable closure.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">closure</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// stack operation</span>
</span><span class='line'>        <span class="n">setClosureDelegate</span><span class="o">(</span><span class="n">closure</span><span class="o">,</span> <span class="n">node</span><span class="o">);</span>
</span><span class='line'>        <span class="n">closure</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// stack operation</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// node create completion and return it</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setClosureDelegate</span><span class="o">(</span><span class="n">Closure</span> <span class="n">closure</span><span class="o">,</span> <span class="n">Object</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">closure</span><span class="o">.</span><span class="na">setDelegate</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>9行目で<code>setClosureDelegate</code>メソッドを呼び出し、</p>

<p>15行目からの<code>setClosureDelegate</code>では、</p>

<p><code>closure</code>のdelegateに<code>this</code>(つまり<code>MarkupBuilder</code>のインスタンス)を割り当てています。</p>

<p>その結果10行目の<code>closure.call()</code>では、</p>

<p>メソッドおよびフィールドの名前解決が<code>MarkupBuilder</code>のインスタンスから行われるます。</p>

<p>その結果、<code>MarkupBuilder</code>の例で<code>head</code>とか<code>body</code>といったメソッドが、</p>

<p><code>MarkupBuilder</code>のインスタンスに対して呼び出されるということになります。</p>

<p>さて、翻って</p>

<h1>gradleのtaskメソッド…</h1>

<p>でも、<code>Closure&lt;V&gt;</code>が使われていますね。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">myTask</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;this is myTask&#39;</span><span class="o">.</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;this is not task, but configuration.&#39;</span>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span> <span class="s1">&#39;finished myTask&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>gradleのandroidサポートが本格的になってからgradleを始めた人の中には</p>

<p>上記のようなgradleの<code>Project</code>クラスのメソッド<code>task(Object, Closure)</code>の</p>

<p><code>Closure</code>部分をタスクだと思っている人がかなりの割合でいると思いますが、</p>

<p>この<code>Closure</code>部分は<strong>タスクではなく、設定です</strong>。</p>

<p>こう書いた場合にタスクはgradleコマンドを書いた時に必ず実行されると</p>

<p>言っていると、元からgroovyをやっている人とは話がかみあわなくなるので、</p>

<p>気をつけて下さい。</p>

<p>では、ちょっとソースコードを覗いてみます。</p>

<figure class='code'><figcaption><span>AbstractProject.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// this is partial codes</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Task</span> <span class="nf">task</span><span class="o">(</span><span class="n">String</span> <span class="n">task</span><span class="o">,</span> <span class="n">Closure</span> <span class="n">configureClosure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">taskContainer</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">task</span><span class="o">).</span><span class="na">configure</span><span class="o">(</span><span class="n">configureClosure</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>AbstractProject#task(String, Closure)</code>では、まず<code>Task</code>が作成された後に、</p>

<p><code>Task#configure(Closure)</code>が呼び出されます。</p>

<figure class='code'><figcaption><span>AbstractTask.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// this is partial codes</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Task</span> <span class="nf">configure</span><span class="o">(</span><span class="n">Closure</span> <span class="n">closure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ConfigureUtil</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">closure</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Task#configure(Closure)</code>では<code>ConfigureUtil#configure(Closure, Task, boolean)</code>が呼び出されます。</p>

<figure class='code'><figcaption><span>ConfigureUtil.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// this is partial codes</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">configure</span><span class="o">(</span><span class="n">Closure</span> <span class="n">configureClosure</span><span class="o">,</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">delegate</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">configureableAware</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">configure</span><span class="o">(</span><span class="n">configureClosure</span><span class="o">,</span>
</span><span class='line'>            <span class="n">delegate</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Closure</span><span class="o">.</span><span class="na">DELEGATE_FIRST</span><span class="o">,</span>
</span><span class='line'>            <span class="n">configureableAware</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">configure</span><span class="o">(</span><span class="n">Closure</span> <span class="n">configureClosure</span><span class="o">,</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">delegate</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">resolveStrategy</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">configureableAware</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ClosureBackedAction</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">action</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClosureBackedAction</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span>
</span><span class='line'>            <span class="n">configureClosure</span><span class="o">,</span>
</span><span class='line'>            <span class="n">resolveStrategy</span><span class="o">,</span>
</span><span class='line'>            <span class="n">configureableAware</span><span class="o">);</span>
</span><span class='line'>    <span class="n">action</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">delegate</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここから、<code>org.gradle.api.internal.ClosureBackedAction&lt;T&gt;</code>により、</p>

<p><code>Closure</code>が実行されます。</p>

<figure class='code'><figcaption><span>ClosureBackedAction.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// this is partial codes</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">ClosureBackedAction</span><span class="o">(</span><span class="n">Closure</span> <span class="n">closure</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">resolveStrategy</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">configureableAware</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">closure</span> <span class="o">=</span> <span class="n">closure</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">configureableAware</span> <span class="o">=</span> <span class="n">configureableAware</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">resolveStrategy</span> <span class="o">=</span> <span class="n">resolveStrategy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">T</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// check closure is not null</span>
</span><span class='line'>    <span class="c1">// checking cinfgureableAware is false</span>
</span><span class='line'>    <span class="n">Closure</span> <span class="n">copy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Closure</span><span class="o">)</span> <span class="n">closure</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="na">setResolveStrategy</span><span class="o">(</span><span class="n">resolveStrategy</span><span class="o">);</span>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="na">setDelegate</span><span class="o">(</span><span class="n">delegate</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">copy</span><span class="o">.</span><span class="na">getMaximumNumberOfParameters</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">copy</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">copy</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">delegate</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>12〜14行目でdelegateの設定、16行目or17行目で<code>Closure</code>の実行がなされていますね。</p>

<p>で、<code>Closure</code>のdelegateにはタスクが設定されています。</p>

<p>したがって、少し前で説明した通り、</p>

<p><code>Closure</code>の実行において変数名の解決は<code>Task</code>のインスタンスから順番に解決されていきます。</p>

<p>で、これが最終的にタスクの設定になるわけです。</p>

<p>(結構たらい回しにされていてイライライする方がいらっしゃるかもしれませんが、まあ、テスタビリティを上げるためにこうなっています。)</p>

<p>というわけで、<strong>まとめ</strong></p>

<h2><code>Closure&lt;V&gt;</code>の仕組みがわかると<a href="http://www.gradle.org/docs/current/dsl/">Gradle DSL</a>の理解が容易になります。</h2>

<p>冒頭でgradleの話しませんって言ったな、あれは、嘘だ。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidがJavaだと思っている人のためのGroovy講座 - 1]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/27/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo/"/>
    <updated>2013-05-27T12:29:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/27/androidgajavadatosi-tuteiruren-falsetamefalsegroovyjiang-zuo</id>
    <content type="html"><![CDATA[<p>タイトルが偉そうなこと書いていますが、</p>

<p>大したことは書きません。</p>

<p>みけです。</p>

<h1>Android Studioが出てきてgradleとは何ぞと思っている方がいると思います</h1>

<p>gradleはgroovyで記述できるビルドシステムです。</p>

<p>antの自由なところと、mavenの依存性管理を組み合わせたイケてるところが売りです。</p>

<p>さて、この記事では…</p>

<h1>gradleのことはほとんど書きません</h1>

<p>Android開発者でgradleとは何やねん？って思っている方には</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00C7AMKTU" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>こちらに詳細が書かれていますので、読んでみて下さい。</p>

<p>で、この記事は何を書いているの？というわけで、</p>

<h1>簡単なgroovyの文法の説明を書きます</h1>

<p>これを覚えると、gradleの記述で少し楽をできるかもしれません。</p>

<p>でも、groovyのことを完璧に説明しているかというと、そうでもないので、</p>

<p>詳しくは次の本を買って読んで下さい。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774147273" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>では、以下、本題</p>

<h2>メソッドの引数部分の括弧は省略できる</h2>

<p>多分gradleを初めて見た人で何やねんこれと思う記述はこういうやつだと思います。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">myTask</span>
</span></code></pre></td></tr></table></div></figure>


<p>この<code>task</code>というのは、<code>AbstractProject</code>という抽象クラスで定義されている<code>public Task task(Object task)</code>というメソッドです。このメソッドはタスクをプロジェクトに登録するメソッドです。</p>

<p>したがって、上記の例では<code>task</code>メソッドによって<code>myTask.toString()</code>で得られる名前(<code>myTask</code>)のタスクが作成されます。</p>

<p>gradleの中で同様な記述がたくさんあると思います。</p>

<p>例えば</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some repository configuration</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some dependency configuration</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これら<code>repositories</code>や、<code>dependencies</code>も、実はみんなメソッドです。</p>

<h3>裏をとってみる</h3>

<p>では、こっから先はちょっと混みいった話</p>

<p>gradleのprojectの元になるクラスは<code>org.gradle.api.internal.project.AbstractProject</code>クラスです。</p>

<p>このクラスの中を少し見てみましょう。</p>

<figure class='code'><figcaption><span>AbstractProject.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractProject</span>
</span><span class='line'>        <span class="kd">extends</span> <span class="n">AbstractPluginAware</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">ProjectInternal</span><span class="o">,</span> <span class="n">DynamicObjectAware</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some codes</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">repositories</span><span class="o">(</span><span class="n">Closure</span> <span class="n">configureClosure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ConfigureUtil</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">configureClosure</span><span class="o">,</span> <span class="n">getRepositories</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dependencies</span><span class="o">(</span><span class="n">Closure</span> <span class="n">configureClosure</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ConfigureUtil</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">configureClosure</span><span class="o">,</span> <span class="n">getDependencies</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// some codes</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Task</span> <span class="nf">task</span><span class="o">(</span><span class="n">String</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">taskContainer</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Task</span> <span class="nf">task</span><span class="o">(</span><span class="n">Object</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">taskContainer</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// some codes</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい、<code>dependencies</code>や<code>repositories</code>、<code>task</code>といったキーワードはすべてメソッドですね。</p>

<h2>結論：groovyではメソッドの引数部分の括弧を省略できる</h2>

<p>…ん、gradleのことほとんど書かないと言ったな、あれは嘘だ。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blogの更新pingを送れるようにrakeのタスクを書いてみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/26/blogfalsegeng-xin-pingwosong-reruyounirakefalsetasukuwoshu-itemita/"/>
    <updated>2013-05-26T21:38:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/26/blogfalsegeng-xin-pingwosong-reruyounirakefalsetasukuwoshu-itemita</id>
    <content type="html"><![CDATA[<p>こんにちわ、みけです。</p>

<p>お金がないので、ブログを読んでもらって、</p>

<p>google adsenseをみんなに押してもらわないと、</p>

<p>死んでしまいます。</p>

<p>さて、そんなことはどうでもよくて、</p>

<p>bloggerでブログをやっていたときは、</p>

<p>googleさんが勝手に検索エンジンに乗せてくれるので、</p>

<p>検索しやすかったのですが、</p>

<p>githubでブログを書くようになって、</p>

<p>検索で出にくくなっていたので、</p>

<p>更新pingをrakeで送りつけるようにしました。</p>

<p>まあ、「更新ping ruby」でググった結果をrakeのタスクにしただけですが…</p>

<p>で、追加したのがこんな感じのタスクです。</p>

<figure class='code'><figcaption><span>rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;yaml&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;xmlrpc/client&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#-- sending ping --#</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Sedning ping to Web Search Engines&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:ping</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">site_config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;_config.yml&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">blog_title</span> <span class="o">=</span> <span class="n">site_config</span><span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">blog_url</span> <span class="o">=</span> <span class="n">site_config</span><span class="o">[</span><span class="s1">&#39;url&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">ping_url</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;ping.yml&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">ping_url</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ping</span> <span class="o">=</span> <span class="ss">XMLRPC</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new2</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">ping</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;weblogUpdates.ping&#39;</span><span class="p">,</span> <span class="n">blog_title</span><span class="p">,</span> <span class="n">blog_url</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2"> : </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2"> : </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>この新たに追加したタスクを後は、gen_deployタスクに追加します。</p>

<figure class='code'><figcaption><span>rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate website and deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:gen_deploy</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:integrate</span><span class="p">,</span> <span class="ss">:generate</span><span class="p">,</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="ss">:ping</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>あと、適当に<code>ping.yml</code>に更新pingを送りつけるサイトを記述すればおｋです。</p>

<figure class='code'><figcaption><span>ping.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://blogsearch.google.com/ping/RPC2</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://api.my.yahoo.co.jp/RPC2</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://blog.goo.ne.jp/XMLRPC</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://ping.bloggers.jp/rpc/</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://ping.rss.drecom.jp/</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://ping.fc2.com/</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://rpc.weblogs.com/RPC2</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://rpc.reader.livedoor.com/ping</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://ping.blogranking.net/</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://www.blogpeople.net/ping/</span>
</span></code></pre></td></tr></table></div></figure>




<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gradleとJUnitのEnclosedの話]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/25/an-falseding-xian-nihamatutetaren-gaitagradletojunitfalseenclosedfalsehua/"/>
    <updated>2013-05-25T23:19:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/25/an-falseding-xian-nihamatutetaren-gaitagradletojunitfalseenclosedfalsehua</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p><a href="http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita/">先ほど書いたエントリー</a>でテストをgradleで走らせたのですが、</p>

<blockquote class="twitter-tweet" lang="ja"><p>gradleでテストした時に謎のclassMethodとかいうテストが勝手に挟み込まれて、落ちて困っている</p>&mdash; もちださんさん (@mike_neck) <a href="https://twitter.com/mike_neck/status/338275875294441472">2013年5月25日</a></blockquote>


<script async src="http://mike-neck.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>という状態が発生してました。</p>

<p>具体的には、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">multithreads</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.experimental.runners.Enclosed</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.rules.TestName</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author mike</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">Enclosed</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleSocketTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingleClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">SERVICE</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">PORT</span> <span class="o">=</span> <span class="mi">12521</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOCALHOST</span> <span class="o">=</span> <span class="s">&quot;localhost&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">SimpleClient</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Rule</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">TestName</span> <span class="n">testName</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@BeforeClass</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">start</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">SERVICE</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleServer</span><span class="o">(</span><span class="n">PORT</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Before</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleClient</span><span class="o">(</span><span class="n">LOCALHOST</span><span class="o">,</span> <span class="n">PORT</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@After</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testName</span><span class="o">.</span><span class="na">getMethodName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is closing&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@AfterClass</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">end</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">SimpleClient</span><span class="o">(</span><span class="n">LOCALHOST</span><span class="o">,</span> <span class="n">PORT</span><span class="o">).</span><span class="na">open</span><span class="o">().</span><span class="na">bye</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Test</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">socketProcessing</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Message from Server [&quot;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">assertThat</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Assertion ends.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>というテストに対して、</p>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRaS15VXNZRTNVWUU" style="width : 424px; height : 262px;" /></p>

<p>という感じで、謎の<code>classMethod</code>というテストが追加されていて、</p>

<p>実行されてテストが落ちてしまうようです。</p>

<h2>先駆者はいた</h2>

<p>とりあえず、<code>gradle</code>、<code>Enclosed</code>、<code>Junit</code>でググっていたところ、</p>

<p>次の二つのエントリーを発見しました。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/irof/20120430/p1">GradleでEnclosedのテストが二回実行されるんだ</a></li>
<li><a href="http://d.hatena.ne.jp/shuji_w6e/20120808/1344386399">GradleでEnclosedテストが2回実行されることの対策</a></li>
</ul>


<p>というわけで、<code>gradle</code>と<code>Enclosed</code>の相性がわるいっぽい…</p>

<h2>gradleでEnclosedなテストをする時の対策</h2>

<p>というわけで、<a href="https://twitter.com/shuji_w6e">@shuji_w6e</a>さんのページによると</p>

<p><strong>テストの実行時に除外クラスを指定すること。</strong></p>

<p>だそうです。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="n">plugin</span> <span class="o">:</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="n">plugin</span> <span class="o">:</span> <span class="s1">&#39;idea&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;org.mikeneck.multithreads&#39;</span>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;1.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">compatibility</span> <span class="o">=</span> <span class="mf">1.7</span>
</span><span class='line'>
</span><span class='line'><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="n">compatibility</span>
</span><span class='line'><span class="n">targetCompatibility</span> <span class="o">=</span> <span class="n">compatibility</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mavenCentral</span> <span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;org.codehaus.groovy:groovy-all:2.1.3&#39;</span>
</span><span class='line'>  <span class="n">testCompile</span> <span class="o">(</span><span class="s1">&#39;junit:junit:4.11&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">exclude</span> <span class="n">module</span> <span class="o">:</span> <span class="s1">&#39;hamcrest-core&#39;</span>
</span><span class='line'>      <span class="n">exclude</span> <span class="n">module</span> <span class="o">:</span> <span class="s1">&#39;hamcrest&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">testCompile</span> <span class="s1">&#39;org.hamcrest:hamcrest-library:1.+&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">exclude</span> <span class="s1">&#39;**/*$*&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず、テストクラスを除外してみました。</p>

<h2>結果</h2>

<p><img src="https://googledrive.com/host/0B4hhdHWLP7RRczBZcy04U2tNMms" style="width : 424px; height : 252px;"" /></p>

<p>という感じで、テストが通りました。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaではじめてSocketプログラムを書いてみた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita/"/>
    <updated>2013-05-25T21:13:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/25/javadehazimetesocketpuroguramuwoshu-itemita</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p>jjugのメーリングリストにconcurrentに関する質問が着ていたので、</p>

<p>答えようと思ってみたんですが、</p>

<p>Socketを使ったプログラムで、</p>

<p><strong>そういえば僕、Socketを使ったプログラム書いたこと無いな</strong></p>

<p>と思い至り、書いてみることにしました。</p>

<h2>SocketServerのほう</h2>

<p><code>java.net.ServerSocket</code>を使って書くようです。</p>

<figure class='code'><figcaption><span>SimpleServer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">socket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.InetSocketAddress</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.ServerSocket</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author mike_neck</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleServer</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ServerSocket</span> <span class="n">serverSocket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SimpleServer</span><span class="o">(</span><span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>                 <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                     <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>                 <span class="n">PrintStream</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">())</span>
</span><span class='line'>            <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>                <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;BYE&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SocketClientのほう</h2>

<p>クライアントアプリケーションの方は<code>java.net.Socket</code>を用いるようです。</p>

<figure class='code'><figcaption><span>SimpleClient.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">multithreads</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.DataOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author mike_neck</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleClient</span> <span class="kd">implements</span> <span class="n">AutoCloseable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Socket</span> <span class="n">socket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataOutputStream</span> <span class="n">output</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BufferedReader</span> <span class="n">input</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SimpleClient</span><span class="o">(</span><span class="n">String</span> <span class="n">hostname</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="o">(</span><span class="n">hostname</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">SimpleClient</span> <span class="nf">open</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
</span><span class='line'>        <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">message</span> <span class="o">+</span> <span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bye</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="s">&quot;BYE\n&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">socket</span><span class="o">.</span><span class="na">isClosed</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SocketServerでの疑問</h2>

<p>と、まあ簡単なプログラムを書いたのですが、</p>

<p>二回メッセージを送る場合はどうなるのかとか、疑問が残りますね。</p>

<p>で、テストを書くわけですが…</p>

<p>案の定落ちました。</p>

<figure class='code'><figcaption><span>SendManyMessages.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// import とか packageとか省略</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SendManyMessages</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">SERVICE</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">PORT</span> <span class="o">=</span> <span class="mi">14541</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOCALHOST</span> <span class="o">=</span> <span class="s">&quot;localhost&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Rule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TestName</span> <span class="n">testName</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@BeforeClass</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">start</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SERVICE</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleServer</span><span class="o">(</span><span class="n">PORT</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@AfterClass</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">end</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SimpleClient</span><span class="o">(</span><span class="n">LOCALHOST</span><span class="o">,</span> <span class="n">PORT</span><span class="o">).</span><span class="na">open</span><span class="o">().</span><span class="na">bye</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ThisTestWillFail</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">send2times</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SimpleClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleClient</span><span class="o">(</span><span class="n">LOCALHOST</span><span class="o">,</span> <span class="n">PORT</span><span class="o">).</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;good-bye&quot;</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;good-bye&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SendManyMessages.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketException</span><span class="o">:</span> <span class="n">Broken</span> <span class="n">pipe</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketOutputStream</span><span class="o">.</span><span class="na">socketWrite0</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketOutputStream</span><span class="o">.</span><span class="na">socketWrite</span><span class="o">(</span><span class="n">SocketOutputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">109</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketOutputStream</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">SocketOutputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">132</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">DataOutputStream</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">DataOutputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">276</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">multithreads</span><span class="o">.</span><span class="na">SimpleClient</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">SimpleClient</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">31</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">mikeneck</span><span class="o">.</span><span class="na">multithreads</span><span class="o">.</span><span class="na">SendManyMessages</span><span class="o">.</span><span class="na">send2times</span><span class="o">(</span><span class="n">SendManyMessages</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">37</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>うん、まあ、今回は別になんか状態を持つようなサーバーを作りたいわけではないし、</p>

<p>そういうサーバーを作りたい場合は、まあ、そういう工夫をすればいいということだけ覚えておこう。</p>

<p>なお、他に書いたテストもありますが、</p>

<p>面倒なので、gistにあげておきました。</p>

<p><a href="https://gist.github.com/mike-neck/5649095">こちらをどうぞ</a></p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのlistsモジュールを試してみる - 第3回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/23/erlangfalselistsmoziyuruwoshi-sitemiru-di-3hui/"/>
    <updated>2013-05-23T13:01:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/23/erlangfalselistsmoziyuruwoshi-sitemiru-di-3hui</id>
    <content type="html"><![CDATA[<p>Erlangのlistsモジュールを試してみるの第三回は次のコマンドの結果について試していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">(</span>
</span><span class='line'>        <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span>
</span><span class='line'>            <span class="k">fun</span><span class="p">({</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">++</span>
</span><span class='line'>                <span class="s">&quot;/&quot;</span> <span class="o">++</span>
</span><span class='line'>                <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span><span class="p">,</span>
</span><span class='line'>            <span class="nn">lists</span><span class="p">:</span><span class="nf">module_info</span><span class="p">(</span><span class="n">exports</span><span class="p">))),</span>
</span><span class='line'>    <span class="mi">33</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">16</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s">&quot;merge/1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;merge/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;merge/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;merge3/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;min/1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;module_info/0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;module_info/1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;nth/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;nthtail/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;partition/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;prefix/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;reverse/1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;reverse/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;rkeymerge/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;rmerge/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;rmerge/3&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<table>
<tbody>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4274067149" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873114659" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1449309968" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00B634R04" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00AZOT4MG" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1933988789" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</tbody>
</table>


<h3>merge/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge(ListOfLists) &ndash;> List1</h4>

<h4>Types</h4>

<ul>
<li>ListOfLists = [List]</li>
<li>List = List1 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns the sorted list formed by merging all the sub-lists of ListOfLists. All sub-lists must be sorted prior to evaluating this function. When two elements compare equal, the element from the sub-list with the lowest position in ListOfLists is picked before the other element.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge-1">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リスト内のリストをソートしてマージしたリストを返します。なお、リスト内のリストは事前にソートされている必要があります。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge</span><span class="p">([</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">9</span><span class="p">],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">]]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数のリストがマージされて新しいリストが返されます。</p>

<h3>merge/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge(List1, List2) &ndash;> List3</h4>

<h4>Types</h4>

<ul>
<li>List1 = [X]</li>
<li>List2 = [Y]</li>
<li>List3 = [(X | Y)]</li>
<li>X = Y = term()</li>
</ul>


<p>Returns the sorted list formed by merging List1 and List2. Both List1 and List2 must be sorted prior to evaluating this function. When two elements compare equal, the element from List1 is picked before the element from List2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>二つのリストをソートしてマージした新しいリストを返します。二つのリストは事前にソートされている必要があります。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>二つのリストがマージされた新しいリストが返されます。</p>

<h3>merge/3</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge(Fun, List1, List2) &ndash;> List3</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A, B) &ndash;> boolean())</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>List3 = [(A | B)]</li>
<li>A = B = term()</li>
</ul>


<p>Returns the sorted list formed by merging List1 and List2. Both List1 and List2 must be sorted according to the <a href="http://www.erlang.org/doc/man/lists.html#ordering_function">ordering function</a> <code>Fun</code> prior to evaluating this function. <code>Fun(A, B)</code> should return <code>true</code> if <code>A</code> compares less than or equal to <code>B</code> in the ordering, <code>false</code> otherwise. When two elements compare equal, the element from List1 is picked before the element from List2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge-3">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>List1</code>と<code>List2</code>をソートしてマージした新しいリストを返します。引数のリストは事前にソートされている必要があります。<code>Fun(A, B)</code>はソートオーダーに関して<code>A</code>が先に来るべきである場合は<code>true</code>を、そうでない場合は<code>false</code>を返します。同じ値の要素がある場合は、<code>List1</code>のものが<code>List2</code>のものに優先されます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">A</span> <span class="o">&gt;</span> <span class="nv">B</span> <span class="k">end</span><span class="p">,[</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge</span><span class="p">(</span><span class="k">fun</span><span class="p">({</span><span class="nv">A</span><span class="p">,_},</span> <span class="p">{</span><span class="nv">B</span><span class="p">,_})</span> <span class="o">-&gt;</span> <span class="nv">A</span> <span class="o">=&lt;</span> <span class="nv">B</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">4</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">5</span><span class="p">,</span><span class="n">a</span><span class="p">}],</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[{</span><span class="mi">0</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">4</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">6</span><span class="p">,</span><span class="n">b</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="mi">0</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">4</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">4</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">5</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">6</span><span class="p">,</span><span class="n">b</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では、降順にソートする関数で評価してリストをマージして新しいリストを返します。</p>

<p>後者の例では、昇順ソートです。同一の値の場合に<code>List1</code>から要素が取得されています。</p>

<h3>merge3/3</h3>

<h4>Erlang Document</h4>

<blockquote><h4>merge3(List1, List2, List3) &ndash;> List4</h4>

<h4>Types</h4>

<ul>
<li>List1 = [X]</li>
<li>List2 = [Y]</li>
<li>List3 = [Z]</li>
<li>List4 = [(X | Y | Z)]</li>
<li>X = Y = Z = term()</li>
</ul>


<p>Returns the sorted list formed by merging List1, List2 and List3. All of List1, List2 and List3 must be sorted prior to evaluating this function. When two elements compare equal, the element from List1, if there is such an element, is picked before the other element, otherwise the element from List2 is picked before the element from List3.</p>

<p><a href="http://erlang.org/doc/man/lists.html#merge3-3">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>三つのリストをソートしてマージした新しいリストを返します。引数のリストは事前にソートされている必要があります。もし同じ値の要素があった場合は<code>List1</code>、<code>List2</code>、<code>List3</code>の順番で優先されます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">50</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge3</span><span class="p">(</span>
</span><span class='line'><span class="mi">50</span><span class="o">&gt;</span>   <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
</span><span class='line'><span class="mi">50</span><span class="o">&gt;</span>   <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
</span><span class='line'><span class="mi">50</span><span class="o">&gt;</span>   <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>min/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>min(List) &ndash;> Min</h4>

<h4>Types</h4>

<ul>
<li>List = [T, …]</li>
<li>Min = T</li>
<li>T = term()</li>
</ul>


<p>Returns the first element of List that compares less than or equal to all other elements of List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#min-1">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リスト中、最初に現れた最も小さい要素を返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">min</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">min</span><span class="p">([</span><span class="n">h</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">l</span><span class="p">]).</span>
</span><span class='line'><span class="n">b</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">min</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">min</span><span class="p">([</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="mi">0</span><span class="p">.</span><span class="mi">0</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">min</span><span class="p">([</span><span class="n">&#39;A&#39;</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">123</span><span class="p">.</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="mi">123</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では引数のリストの最小整数1が返されます。</p>

<p>次の例では引数のリストの最小のatom<code>b</code>が返されます。</p>

<p>三番目と四番目の例では整数と浮動小数点数の0を比較して最初に現れた要素が返されます。</p>

<p>最後の例では整数と浮動小数点数とatomを比較しています。最初に現れた最小の要素(整数)が返されます。</p>

<h3>module_info/0</h3>

<h4>Erlang Document</h4>

<blockquote><h4>module_info</h4>

<p>The module_info/0 function in each module returns a list of {Key,Value} tuples with information about the module. Currently, the list contain tuples with the following Keys: attributes, compile, exports, and imports. The order and number of tuples may change without prior notice.</p>

<h5>warning</h5>

<p>The {imports,Value} tuple may be removed in a future release because Value is always an empty list. Do not write code that depends on it being present.</p>

<p><a href="http://erlang.org/doc/reference_manual/modules.html#id74571">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>これはlistsモジュールでなく、すべてのモジュールに共通する関数ですな。
モジュールに関する情報を<code>{Key, Value}</code>のタプルリストで返します。現在のところ、</p>

<ul>
<li>attributes</li>
<li>compile</li>
<li>exports</li>
<li>imports</li>
</ul>


<p>といったキーです。なお、<code>{imports, Value}</code>タプルは常に空のリストしか返さないため、今後なくなる予定です。これに基づいたコードを記述しないで下さい。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">module_info</span><span class="p">().</span>
</span><span class='line'><span class="p">[{</span><span class="n">exports</span><span class="p">,[{</span><span class="n">append</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">append</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">subtract</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">nth</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">nthtail</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">prefix</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">suffix</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">last</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">seq</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">seq</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">sum</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">duplicate</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">min</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">max</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">sublist</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">sublist</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">zip</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">unzip</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">zip3</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">unzip3</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">zipwith</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">zipwith3</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">merge</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">merge3</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">rmerge3</span><span class="p">,...},</span>
</span><span class='line'>           <span class="p">{...}|...]},</span>
</span><span class='line'> <span class="p">{</span><span class="n">imports</span><span class="p">,[]},</span>
</span><span class='line'> <span class="p">{</span><span class="n">attributes</span><span class="p">,[{</span><span class="n">vsn</span><span class="p">,[</span><span class="mi">257948301539042745638557295194154171573</span><span class="p">]}]},</span>
</span><span class='line'> <span class="p">{</span><span class="n">compile</span><span class="p">,[{</span><span class="n">options</span><span class="p">,[{</span><span class="n">outdir</span><span class="p">,</span><span class="s">&quot;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../ebin&quot;</span><span class="p">},</span>
</span><span class='line'>                     <span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../include&quot;</span><span class="p">},</span>
</span><span class='line'>                     <span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/../../kernel/include&quot;</span><span class="p">},</span>
</span><span class='line'>                     <span class="n">warnings_as_errors</span><span class="p">,</span><span class="n">debug_info</span><span class="p">]},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">version</span><span class="p">,</span><span class="s">&quot;4.9&quot;</span><span class="p">},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">time</span><span class="p">,{</span><span class="mi">2013</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">47</span><span class="p">}},</span>
</span><span class='line'>           <span class="p">{</span><span class="n">source</span><span class="p">,</span><span class="s">&quot;/net/isildur/ldisk/daily_build/r16b_prebuild_master-opu_o.2013-02-25_20/otp_src_R16B/lib/stdlib/src/lists.erl&quot;</span><span class="p">}]}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>たくさん出てきた…</p>

<h3>module_info/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>module_info</h4>

<p>The call module_info(Key), where key is an atom, returns a single piece of information about the module.</p>

<p><a href="http://erlang.org/doc/reference_manual/modules.html#id74571">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>module_info</code>関数から<code>Key</code>を指定して取り出します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">module_info</span><span class="p">(</span><span class="n">attributes</span><span class="p">).</span>
</span><span class='line'><span class="p">[{</span><span class="n">vsn</span><span class="p">,[</span><span class="mi">257948301539042745638557295194154171573</span><span class="p">]}]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>lists:module_info/0</code>の結果の一部が返ってきます。</p>

<h3>nth/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>nth(N, List) &ndash;> Elem</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 1</li>
<li>List = [T, &hellip;]</li>
<li>Elem = T</li>
<li>T = term()</li>
</ul>


<p>Returns the Nth element of List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#nth-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>N</code>番目の要素を返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nth</span><span class="p">(</span><span class="mi">3</span><span class="p">,[</span><span class="n">a</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>3番目の要素<code>c</code>が返されます。</p>

<h3>nthtail/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>nthtail(N, List) &ndash;> Tail</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 0</li>
<li>List = [T, &hellip;]</li>
<li>Elem = T</li>
<li>T = term()</li>
</ul>


<p>Returns the Nth tail of List, that is, the sublist of List starting at N+1 and continuing up to the end of the list.</p>

<p><a href="http://erlang.org/doc/man/lists.html#nthtail-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>N+1</code>番から後ろの要素で作られるサブリストを返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">nthtail</span><span class="p">(</span><span class="mi">3</span><span class="p">,[</span><span class="n">a</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>4番目から後ろの要素で構成されるリストが返されます。</p>

<h3>partition/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>partition(Pred, List) &ndash;> {Satisfying, NotSatisfying}</h4>

<h4>Types</h4>

<ul>
<li>Pred = fun((Elem :: T) &ndash;> boolean())</li>
<li>List = Satisfying = NotSatisfying = [T]</li>
<li>T = term()</li>
</ul>


<p>Partitions List into two lists, where the first list contains all elements for which Pred(Elem) returns true, and the second list contains all elements for which Pred(Elem) returns false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#partition-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>条件と分割対象リストを引数に取り、二つの新しいリストに分割します。最初のリストには条件を満たすものを、次のリストには条件を満たさないものを返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">partition</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="o">=:=</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]).</span>
</span><span class='line'><span class="p">{[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>偶数かどうか判定する条件とリストを与えています。
先頭のリストには条件を満たすもの(偶数)のリスト、後ろ側のリストには条件を満たさないもの(奇数)のリストが返されます。</p>

<h3>prefix/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>prefix(List1, List2) &ndash;> boolean()</h4>

<h4>Types</h4>

<ul>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns true if List1 is a prefix of List2, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#prefix-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p><code>List1</code>が<code>List2</code>の先頭部分である場合に<code>true</code>を、異なる場合には<code>false</code>を返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">prefix</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">]).</span>
</span><span class='line'><span class="n">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">prefix</span><span class="p">([</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">],</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">x</span><span class="p">]).</span>
</span><span class='line'><span class="n">false</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">prefix</span><span class="p">(</span><span class="s">&quot;co&quot;</span><span class="p">,</span> <span class="s">&quot;coexistence&quot;</span><span class="p">).</span>
</span><span class='line'><span class="n">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では、第一引数が第二引数の先頭部分と一致するので<code>true</code>が返されます。</p>

<p>次の例では、第一引数が第二引数の先頭部分と異なるので<code>false</code>が返されます。</p>

<p>最後の例では<code>"co"</code>は<code>"coexistence"</code>の最初の文字列部分と同じなので、<code>true</code>が返されます。</p>

<h3>reverse/1</h3>

<h4>Erlang Document</h4>

<blockquote><h4>reverse(List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>List1 = List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a list with the elements in List1 in reverse order.</p>

<p><a href="http://erlang.org/doc/man/lists.html#reverse-1">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リストを逆順にして返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>リストの順番が逆になって返されています。</p>

<h3>reverse/2</h3>

<h4>Erlang Document</h4>

<blockquote><h4>reverse(List1, Tail) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>List1 = [T]</li>
<li>Tail = term()</li>
<li>List2 = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns a list with the elements in List1 in reverse order, with the tail Tail appended.</p>

<p><a href="http://erlang.org/doc/man/lists.html#reverse-2">参照先</a></p></blockquote>

<h4>Explain</h4>

<p>リストを逆順にした上で、第二引数を追加した新しいリストを返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">|</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例、および二番目の例では最初のリストが逆順になされた上で、次のリストが連結された新しいリストが返ってきます。</p>

<p>最後の例では、結果がリストでなくなります。</p>

<p>公式ドキュメントが間違っているっぽいですね…</p>

<h3>rkeymerge/3</h3>

<h4>Erlang Document</h4>

<p>なかった＼(^o^)／</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">rkeymerge</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">}],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">b</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">4</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">}]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">rkeymerge</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">4</span><span class="p">}],</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">5</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">4</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">}]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">rkeymerge</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">}],</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">b</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">4</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>lists:keymerge/3</code>のreverse版のようです。</p>

<ul>
<li>引数のリストは逆順にソートされている必要があります。</li>
<li>同一のキーを持つ場合、第二引数のリストの要素が優先されます。</li>
</ul>


<p>最初の例では、タプルの２番目の値をキーに逆順ソートされたリストが返されます。</p>

<p>次の例では、逆順にソートされていないため、マージがうまくなされていません。</p>

<p>最後の例では、同じキーがある場合の挙動を確認しています。</p>

<p>同じキー値をもつ要素(ここでは、<code>{a,2}</code>と<code>{b,2}</code>)がありますが、</p>

<p><code>{b, 2}</code>の方が優先されているのがわかります。</p>

<h3>rmerge/2</h3>

<h4>Erlang Document</h4>

<p>なかった＼(^o^)／</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">rmerge</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">rmerge</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>merge/2</code>のリバースバージョン。</p>

<p>最初の例では逆順ソートされたリストを引数として渡して、</p>

<p>逆順でマージされた新しいリストが返されます。</p>

<p>次の例では事前に逆順マージされていないため、</p>

<p>求める結果(逆順にマージされたリスト)が返ってきません。</p>

<h3>rmerge/3</h3>

<h4>Erlang Document</h4>

<p>なかった＼(^o^)／</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge</span><span class="p">(</span><span class="k">fun</span><span class="p">({_,</span> <span class="nv">A</span><span class="p">},</span> <span class="p">{_,</span> <span class="nv">B</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="nv">A</span> <span class="o">&gt;=</span> <span class="nv">B</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">9</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">}],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">[{</span><span class="n">b</span><span class="p">,</span><span class="mi">7</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">3</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">9</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">7</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">3</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">}]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">merge</span><span class="p">(</span><span class="k">fun</span><span class="p">({_,</span> <span class="nv">A</span><span class="p">},</span> <span class="p">{_,</span> <span class="nv">B</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="nv">A</span> <span class="o">&gt;</span> <span class="nv">B</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">9</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">}],</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">[{</span><span class="n">b</span><span class="p">,</span><span class="mi">7</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">3</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">9</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">7</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">5</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">3</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>merge/3</code>関数のリバースバージョン。</p>

<p>引数は先頭から</p>

<ul>
<li>Fun = fun((A, B) &ndash;> boolean())</li>
<li>List1 = [T]</li>
<li>List2 = [T]</li>
</ul>


<p>です。</p>

<p>なお、</p>

<ul>
<li>Funには結果として先にくるものに対してtrueが返すような関数を渡します。</li>
<li>List1、List2ともにFunにて事前にソートされている必要があります。</li>
<li>T = term()</li>
</ul>


<p>となっています。</p>

<p>また、同値なものがあった場合は、Funの実装に従います。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atlassianユーザーグループ #augjに行ってきた]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/23/atlassianyuzagurupu-number-augjnixing-tutekita/"/>
    <updated>2013-05-23T12:28:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/23/atlassianyuzagurupu-number-augjnixing-tutekita</id>
    <content type="html"><![CDATA[<p>みけです。</p>

<p><a href="http://www.zusaar.com/event/735003">Atlassianユーザーグループ@株式会社ロフトワーク(渋谷) #augj</a>に参加してきました。</p>

<p>今回は<a href="https://www.hipchat.com/">HipChat</a>特集です。</p>

<h1>HipChatとは</h1>

<p>Atlassianが提供するグループチャットサービスです。</p>

<p>ユーザー数が5名までは無料で使うことができます。</p>

<p>主に次のような機能があります。</p>

<ul>
<li>参加人数無制限のグループチャット</li>
<li>セキュリティ面が考慮されている</li>
<li><a href="http://hipchat-emoticons.nyh.name/">emoticons</a>と呼ばれる顔文字機能が豊富。かつ自分で追加できる。</li>
<li>ファイル共有機能(ファイル数無制限、ファイルサイズは50MBまで、画像ファイルの場合すぐに表示される)によって、迅速なコミュニケーションが可能</li>
<li>メールや各種携帯(iPhone/Android)、SMSでnotificationを送ることができる</li>
<li>Atlassianによって精力的に開発・運用されているので安心して利用できます</li>
</ul>


<h1>セッション内容まとめ</h1>

<h4>HipChat以前以後</h4>

<ul>
<li>メールだとスパムメールとかいろんなプロジェクトのメールが来たりして、まずフィルタリングしないといけないのが面倒い</li>
<li>HipChatにGitHubの情報やJenkinsの情報を連携させることによって、HipChatだけ見ればよいようになった</li>
</ul>


<h4>他のチャットツールとの比較</h4>

<ul>
<li>若者の深刻なIRC離れ(サーバ立てるの面倒い)</li>
<li>Chatter(by Salesforce)はクソ思い、Apexとか何それ状態でbotを作りづらい、クライアントがAIRで面倒い</li>
<li>Campfireは日本語検索がかなり辛い</li>
</ul>


<h4>そして突然のCrucible</h4>

<ul>
<li>Crucible単体での運用例</li>
<li>Crucibleを使う前までは会議等で実施(つまり面倒い、時間がかかる)</li>
<li>レビュー未実施・実施中・実施済みがファイル単位に管理できて、かなり便利</li>
</ul>


<h4>セッション内容などはConfluenceでみられます。</h4>

<p><a href="http://confluence.atlassian.co.jp/pages/viewpage.action?pageId=42533669">こちらをどうぞ</a></p>

<h1>HipChatいいですね</h1>

<p><strong>え、Lingrでも無料で同じ事できるって？</strong></p>

<p>そうですね。すみません。</p>

<p>そういう方はLingr使えばいいと思います。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>


<h1>ノベルティグッズ</h1>

<p>ブログを書くと宣言しておけばTシャツがもらえるということで</p>

<p><strong>ちなみに、TシャツはM/S/Lの順番で希望です。</strong></p>

<p>で、<span style="font-decoration : line-through;">なんか開催前にイケメンの人から</span>もらいました。</p>

<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gradle1.6からgroovyのconfigurationはdeprecatedになっています]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/22/gradle1-dot-6karagroovyfalseconfigurationhadeprecatedninatuteimasu/"/>
    <updated>2013-05-22T20:08:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/22/gradle1-dot-6karagroovyfalseconfigurationhadeprecatedninatuteimasu</id>
    <content type="html"><![CDATA[<h2>gradle1.6からgroovyのconfigurationは非推奨になっています</h2>

<p>まあ今さらですが、さきほどbuild.gradleを書いた時に、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gradle idea
</span><span class='line'>The groovy configuration has been deprecated and is scheduled to be removed in Gradle 2.0. Typically, usages of 'groovy' can simply be replaced with 'compile'. In some cases, it may be necessary to additionally configure the 'groovyClasspath' property of GroovyCompile and Groovydoc tasks.
</span><span class='line'>:ideaModule
</span><span class='line'>Download http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.pom
</span><span class='line'>Download http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3-sources.jar
</span><span class='line'>Download http://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.1.3/groovy-all-2.1.3.jar
</span><span class='line'>:ideaProject
</span><span class='line'>:ideaWorkspace
</span><span class='line'>:idea
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 11.174 secs
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>


<p>と表示されたので、「うぉっ」と思ってドキュメントを読んでみました。</p>

<p><a href="http://www.gradle.org/docs/current/release-notes#groovy-configuration-is-deprecated">groovy configuration is deprecated</a></p>

<p>じゃあ、今後どうするのかというと、</p>

<h1>compile configurationにgroovyのartifactを指定する</h1>

<p>ということです。</p>

<p>つまり、これまでは</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">groovy</span> <span class="o">:</span> <span class="s1">&#39;org.codehaus:groovy:groovy-all:2.1.3&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書いていましたが、</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="o">:</span> <span class="s1">&#39;org.codehaus.groovy:groovy-all:2.1.3&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書けばよいようです。</p>

<table>
<tbody>
<tr>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B009X5KIFK" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=3864900492" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=1617291307" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマーのための会計知識・用語 - (2)]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/18/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-2/"/>
    <updated>2013-05-18T15:04:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/18/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-2</id>
    <content type="html"><![CDATA[<h2>普通のエンタープライズ系プログラマーであれば、会計用語はちゃんと英語で覚えているものですよね(白目</h2>

<p><img src="http://img5.blogs.yahoo.co.jp/ybi/1/9f/9a/fpdxw092/folder/1455483/img_1455483_52010810_1?1205033611"></p>

<p>僕は<a href="http://mike-neck.github.io/blog/2013/05/13/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-1/">前</a>にも言ったとおりに、</p>

<p>出来損ないのエンタープライズ系プログラマーなので、</p>

<p>アメリカの中学生向けの会計の簡単な本で勉強しています。</p>

<iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=0071779752" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>この本の第二章に書かれていることをまとめてみます。</p>

<h2>会計の基本用語</h2>

<ul>
<li>勘定 : <strong>Account</strong></li>
<li>勘定科目 : <strong>Account Titile</strong></li>
<li>借方 : <strong>Debit</strong></li>
<li>貸方 : <strong>Credit</strong></li>
<li>総勘定元帳 : <strong>Ledger</strong></li>
<li>勘定科目一覧 : <strong>The Chart of Accounts</strong></li>
<li>仕訳 : <strong>Journal</strong></li>
<li>複式簿記 : <strong>Double-Entry Bookkeeping</strong></li>
<li>試算表 : <strong>Trial balance</strong></li>
</ul>


<h4><a href="http://mike-neck.github.io/blog/2013/05/13/puroguramafalsetamefalsehui-ji-zhi-shi-yong-yu-1/">前回の復習</a></h4>

<ul>
<li>資産 : <strong>Assets</strong></li>
<li>負債 : <strong>Liabilities</strong></li>
<li>資本 : <strong>Capital</strong></li>
</ul>


<h2>借方と貸方の決まり事 (<strong>Convention</strong>)</h2>

<p>エンタープライズ系プログラマーなら当然わかっていると思いますが…</p>

<p>勘定科目(<strong>Account Title</strong>)は借方科目なのか貸方科目なのか決まっていますね。</p>

<h4>借方系の勘定 (<strong>The Account to be debited</strong>)</h4>

<ul>
<li>資産(<strong>Asset</strong>)の増加</li>
<li>費用(<strong>Expense</strong>)の増加</li>
<li>負債(<strong>Liabilities</strong>)の減少</li>
<li>資本(<strong>Capital</strong>)の減少</li>
<li>収入(<strong>Income</strong>)の減少</li>
</ul>


<h4>借方系の勘定 (<strong>The Account to be credited</strong>)</h4>

<ul>
<li>負債(<strong>Liabilities</strong>)の増加</li>
<li>資本(<strong>Capital</strong>)の増加</li>
<li>収入(<strong>Income</strong>)の増加</li>
<li>資産(<strong>Asset</strong>)の減少</li>
<li>費用(<strong>Expense</strong>)の減少</li>
</ul>


<h2>会計のドメインモデルを作ってみる</h2>

<p>ここまで来たら、もう会計のドメインモデル作れますね。</p>

<h4>勘定</h4>

<figure class='code'><figcaption><span>Account.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Cannonical</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">title</span>
</span><span class='line'>    <span class="n">AccountChart</span> <span class="n">accountChart</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>取引</h4>

<figure class='code'><figcaption><span>Transaction.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Cannonical</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Transaction</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">id</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">date</span>
</span><span class='line'>    <span class="n">Debit</span> <span class="n">debit</span>
</span><span class='line'>    <span class="n">Credit</span> <span class="n">credit</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">memo</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>借方</h4>

<figure class='code'><figcaption><span>Debit.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@ToString</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Debit</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Account</span> <span class="n">item</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">memo</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>貸方</h4>

<figure class='code'><figcaption><span>Credit.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@ToString</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Credit</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Account</span> <span class="n">item</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">memo</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>借方と貸方でクラスの構造が全く同じなので、</p>

<p>訓練されたSIer諸氏に於いては同じクラスを使おうと言い出すとおもいます。</p>

<p>しかし、java-ja.dddで増田さんがおっしゃっていたとおり、</p>

<p>借方と貸方は別物なので、別のクラスにします。</p>

<p><a href="https://gist.github.com/yamashiro/5230921">java-ja.dddのまとめについてはこちら</a></p>

<h4>勘定科目</h4>

<figure class='code'><figcaption><span>AccountChart.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">enum</span> <span class="n">AccountChart</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ASSET</span><span class="o">{</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">increase</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">DEBIT</span><span class="o">}</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">decrease</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">CREDIT</span><span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">EXPENSE</span><span class="o">{</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">increase</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">DEBIT</span><span class="o">}</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">decrease</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">CREDIT</span><span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">LIABILITIES</span><span class="o">{</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">increase</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">CREDIT</span><span class="o">}</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">decrease</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">DEBIT</span><span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">CAPITAL</span><span class="o">{</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">increase</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">CREDIT</span><span class="o">}</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">decrease</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">DEBIT</span><span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">INCOME</span><span class="o">{</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">increase</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">CREDIT</span><span class="o">}</span>
</span><span class='line'>        <span class="n">AccountConvention</span> <span class="nf">decrease</span><span class="o">()</span> <span class="o">{</span><span class="n">AccountConvention</span><span class="o">.</span><span class="na">DEBIT</span><span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>勘定の決まりごと</h4>

<figure class='code'><figcaption><span>AccountConveintion.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">enum</span> <span class="n">AccountConvention</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DEBIT</span><span class="o">,</span> <span class="n">CREDIT</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この二つのクラスを書いていて、<code>Debit</code>とか<code>Credit</code>のクラスを生成するメソッドはこのあたりにあるといいなと思ってきた。</p>

<p>例えば、費用が増加した場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">AccountChart</span><span class="o">.</span><span class="na">EXPENSE</span>
</span><span class='line'>        <span class="o">.</span><span class="na">increase</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s1">&#39;売上原価&#39;</span><span class="o">,</span> <span class="s1">&#39;商品が売れた&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">for</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">asCredit</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じで書きたいですね。</p>

<p>そうすると、<code>AccountChart.groovy</code>を少し直さないといけないですね…</p>

<h2>以下、宿題</h2>

<h4>Rearrange the following list of accounts and produce a trial balance.</h4>

<ul>
<li>Accounts Payable(900)</li>
<li>Accounts Receivable(1,400)</li>
<li>Capital(3,200)</li>
<li>Cash(2,000)</li>
<li>Drawing(400)</li>
<li>Equipment(1,800)</li>
<li>Fees income(2,600)</li>
<li>General expense(100)</li>
<li>Notes Payable(1,100)</li>
<li>Rent expense(500)</li>
<li>Salaries expense(800)</li>
<li>Supplies(600)</li>
<li>Supplies expense(200)</li>
</ul>


<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SourceTreeで細かくコミットする]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/18/sourcetreedexi-kakukomitutosuru/"/>
    <updated>2013-05-18T12:58:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/18/sourcetreedexi-kakukomitutosuru</id>
    <content type="html"><![CDATA[<h1>gitのコミットの粒度はなるべく細かいほうがいいですよね</h1>

<p>こんにちわ、みけです。</p>

<p>今日はgitの話です。</p>

<p>表題にあるようにgitは細かくコミットしたほうがよいです。</p>

<p>なぜなら、</p>

<ul>
<li>mergeが簡単にできる</li>
<li>やらかした時に細かいレベルで元に戻れる</li>
<li>細かければpushするときにまとめればいいや的な</li>
</ul>


<p>といったメリットがあるからと思っています。</p>

<p>詳細はこっちの記事読んだほうがいいです。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/irof/20120905/p1">gitのcommitは軽く考えとく &ndash; 日々常々</a></li>
<li><a href="http://d.hatena.ne.jp/kyon_mm/20120905/1346829171">「git commit するまえに考えるべき10のこと」がDVCS的じゃない件 &ndash; うさぎ組</a></li>
<li><a href="http://forza.cocolog-nifty.com/blog/2012/09/post-fdab.html">コミットの粒度 &ndash; プログラマの思索</a></li>
<li><a href="http://d.hatena.ne.jp/Yamashiro0217/20120903/1346640190">git flow でのチーム開発ワークショップ資料 &ndash; Yamashiro0217の日記</a></li>
<li><a href="http://hiroki.jp/2012/09/05/5523/">git commit するまえに考えるべき10のこと &ndash; Act as Professional</a></li>
</ul>


<h3>いや、そんなこと言ったってコミット頻繁にしてないっすよ</h3>

<p>これ、僕のことで、そもそもコミットを頻繁にしていないので、Work Treeに変更がたくさん溜まってしまいます。</p>

<p>そうすると、僕のようなdullな人が<code>git add</code>する時は<code>git add -p</code>で小分けにしながらステージに載せていくのですが、Hunkのサイズを変えるのに一々<code>git add -p</code>の後に<code>s</code>をしているとわりと面倒い。(<a href="http://stackoverflow.com/questions/1122210/can-i-modify-git-adds-hunk-size">参考 &ndash; Can I modify git-add&rsquo;s hunk size?</a>)</p>

<p>まあ、かといって、「gitできない奴はVSSでもやってろよ」とか言われると辛い…</p>

<h3>そこでSourceTreeですよ</h3>

<p>Atlassianの回し者ではありませんが、SourceTreeがそんな僕には便利です。</p>

<h4>変更が溜まりに溜まったwork tree</h4>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRZ2hCam1Wa3BLVjA"><img src="https://googledrive.com/host/0B4hhdHWLP7RRZ2hCam1Wa3BLVjA" width="313" height="234"></a></p>

<h4>hunkがでかすぎるので小さくします。</h4>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRdEN5VTRHVE5hNVU"><img src="https://googledrive.com/host/0B4hhdHWLP7RRdEN5VTRHVE5hNVU" width="364" height="304"></a></p>

<h4>hunkが細かくなります。</h4>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRanRRZjA2VVh6eXc"><img src="https://googledrive.com/host/0B4hhdHWLP7RRanRRZjA2VVh6eXc" width="362" height="270"></a></p>

<h4>さらに行単位で変更を選びます</h4>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRdTVodnZ6MDF1c1U"><img src="https://googledrive.com/host/0B4hhdHWLP7RRdTVodnZ6MDF1c1U" width="364" height="68"></a></p>

<h4>意味のある単位にまとまったのでコミットします</h4>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRUEQ3bnkxTTVzQ0E"><img src="https://googledrive.com/host/0B4hhdHWLP7RRUEQ3bnkxTTVzQ0E" width="412" height="234"></a></p>

<p>commitボタンを推します。</p>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRc1ZUQlV3akplUFU"><img src="https://googledrive.com/host/0B4hhdHWLP7RRc1ZUQlV3akplUFU" width="333" height="270"></a></p>

<h4>適度な粒度でコミットしたのでプッシュします。</h4>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRcHI5NGt0aksyZVk"><img src="https://googledrive.com/host/0B4hhdHWLP7RRcHI5NGt0aksyZVk" width="310" height="175"></a></p>

<p>pushボタンのところにプッシュされていないコミットの数が出ています。</p>

<p>pushボタンを押してプッシュします。</p>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRdEJ2aGhZeGM2LVU"><img src="https://googledrive.com/host/0B4hhdHWLP7RRdEJ2aGhZeGM2LVU" width="446" height="180"></a></p>

<p>プッシュ完了すると、ローカルとリモートが一致した状態になります。</p>

<p><a href="https://googledrive.com/host/0B4hhdHWLP7RRd18wb2JRNWxFYkU"><img src="https://googledrive.com/host/0B4hhdHWLP7RRd18wb2JRNWxFYkU" width="471" height="90"></a></p>

<h3>細かい粒度でコミット出来ましたね</h3>

<ul>
<li>SourceTree、マジ便利、マジ神、ハンパないです。</li>
<li>いや、そもそもそんなにWork Treeに変更を溜め込むなという話ですね…</li>
</ul>


<table>
<tr>
<td style="padding : 2px;"><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4798023809" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td style="padding : 2px;"><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4798035009" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td style="padding : 2px;"><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=477415184X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
<tr>
<td style="padding : 2px;"><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4274068641" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td style="padding : 2px;"><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4873114403" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
<td style="padding : 2px;"><iframe src="http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=kkkjkrt-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=427406767X" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</td>
</tr>
</table>




<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>




<br/>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのlistsモジュールを試してみる - 第2回]]></title>
    <link href="http://mike-neck.github.io/blog/2013/05/14/erlangfalselistsmoziyuruwoshi-sitemiru-di-2hui/"/>
    <updated>2013-05-14T14:01:00+09:00</updated>
    <id>http://mike-neck.github.io/blog/2013/05/14/erlangfalselistsmoziyuruwoshi-sitemiru-di-2hui</id>
    <content type="html"><![CDATA[<p>Erlangのlistsモジュールを試してみるの第二回は次のコマンドの結果について試していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">(</span>
</span><span class='line'>        <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span>
</span><span class='line'>            <span class="k">fun</span><span class="p">({</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">++</span>
</span><span class='line'>                <span class="s">&quot;/&quot;</span> <span class="o">++</span>
</span><span class='line'>                <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span><span class="p">,</span>
</span><span class='line'>            <span class="nn">lists</span><span class="p">:</span><span class="nf">module_info</span><span class="p">(</span><span class="n">exports</span><span class="p">))),</span>
</span><span class='line'>    <span class="mi">17</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">16</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s">&quot;keydelete/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keyfind/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keymap/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keymember/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keymerge/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keyreplace/4&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keysearch/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keysort/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keystore/4&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;keytake/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;last/1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;map/2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;mapfoldl/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;mapfoldr/3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;max/1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;member/2&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h3>keydelete/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keydelete(Key, N, TupleList1) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a copy of TupleList1 where the first occurrence of a tuple whose Nth element compares equal to Key is deleted, if there is such a tuple.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keydelete-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>引数に与えられたタプルのリストのコピーを返します。ただし、リスト中のタプルで、タプルのN番目の要素が引数Keyと同じ値のもので最も先頭に近いものは取り除かれます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keydelete</span><span class="p">(</span><span class="n">jim</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">simon</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">typist</span><span class="p">},</span> <span class="p">{</span><span class="n">dag</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">student</span><span class="p">},</span> <span class="p">{</span><span class="n">jack</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">mike</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">tim</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">officer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">lod</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">dentist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">simon</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">typist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">dag</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="n">student</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jack</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">john</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="n">officer</span><span class="p">}]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keydelete</span><span class="p">(</span><span class="n">madscientist</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">simon</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">typist</span><span class="p">},</span> <span class="p">{</span><span class="n">dag</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">student</span><span class="p">},</span> <span class="p">{</span><span class="n">jack</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">mike</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">tim</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">officer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">lod</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">dentist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">simon</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">typist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">dag</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="n">student</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jack</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">john</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="n">officer</span><span class="p">}]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keydelete</span><span class="p">(</span><span class="n">madscientist</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">mike</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">tim</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">officer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">lod</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">dentist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">john</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="n">officer</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>まず最初の例では、リストの中で一番最初に出てくるキーの位置<code>1</code>番目の値が<code>jim</code>であるタプルを削除したリストが返されます。元のリストで9番目のタプルも同様の条件ですが、こちらは削除されません。</p>

<p>次の例ではリストで一致しない条件で実行しています。返されるリストは何も削除されていません。</p>

<p>最後の例ではリストのタプルの要素数より多い番号を指定して削除を実施します。もちろん、返されるリストは何も削除されていません。</p>

<h3>keyfind/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keyfind(Key, N, TupleList) &ndash;> Tuple | false</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Searches the list of tuples TupleList for a tuple whose Nth element compares equal to Key. Returns Tuple if such a tuple is found, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keyfind-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルのリストから指定位置の要素について<code>Key</code>に一致する最初のタプルを返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyfind</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">simon</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">typist</span><span class="p">},</span> <span class="p">{</span><span class="n">dag</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">student</span><span class="p">},</span> <span class="p">{</span><span class="n">jack</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyfind</span><span class="p">(</span><span class="n">jim</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">simon</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">typist</span><span class="p">},</span> <span class="p">{</span><span class="n">dag</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">student</span><span class="p">},</span> <span class="p">{</span><span class="n">jack</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">engineer</span><span class="p">}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyfind</span><span class="p">(</span><span class="n">madscientist</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">simon</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">typist</span><span class="p">},</span> <span class="p">{</span><span class="n">dag</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">student</span><span class="p">},</span> <span class="p">{</span><span class="n">jack</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例ではタプルの二番目の値が<code>36</code>のものを探して、返します。</p>

<p>次の例ではタプルの最初の値が<code>jim</code>のものを探して返しますが、9番目に現れるものは返されません。</p>

<p>最後の例では一致するものがない条件で検索を行いますが、存在しないため<code>false</code>が返ってきます。</p>

<h3>keymap/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keymap(Fun, N, TupleList1) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((Term1 :: term()) &ndash;> Term2 :: term())</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a list of tuples where, for each tuple in TupleList1, the Nth element Term1 of the tuple has been replaced with the result of calling Fun(Term1).</p>

<p><a href="http://erlang.org/doc/man/lists.html#keymap-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルに対して指定した位置の要素に、引数で渡した関数を実行した結果が入れられた、新しいタプルのリストが返されます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">IsProgrammer</span> <span class="o">=</span> <span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="o">=:=</span> <span class="n">programmer</span> <span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="err">#</span><span class="nv">Fun</span><span class="o">&lt;</span><span class="n">erl_eval</span><span class="p">.</span><span class="mi">6</span><span class="p">.</span><span class="mi">17052888</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keymap</span><span class="p">(</span><span class="nv">IsProgrammer</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">tim</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">bob</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">officer</span><span class="p">},</span> <span class="p">{</span><span class="n">lod</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="n">dentist</span><span class="p">},</span> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">simon</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="n">typist</span><span class="p">},</span> <span class="p">{</span><span class="n">dag</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="n">student</span><span class="p">},</span> <span class="p">{</span><span class="n">jack</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>     <span class="p">{</span><span class="n">john</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="n">engineer</span><span class="p">},</span> <span class="p">{</span><span class="n">mike</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">scientist</span><span class="p">},</span> <span class="p">{</span><span class="n">jim</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">mike</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="n">true</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">tim</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">lod</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">iwan</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">simon</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">dag</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jack</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">true</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">john</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="n">false</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>この例ではタプルの3番目の要素がprogrammerならtrueに変換し、そうでなければfalseに変換した新しいタプルのリストを返します。</p>

<h3>keymember/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keymember(Key, N, TupleList) &ndash;> boolean()</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns true if there is a tuple in TupleList whose Nth element compares equal to Key, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keymember-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>指定位置に<code>Key</code>を含むタプルがリスト中にあれば<code>true</code>、なければ<code>false</code>が返ってきます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keymember</span><span class="p">(</span><span class="n">bob</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[{</span><span class="n">mike</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">tim</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">officer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">lod</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">dentist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">iwan</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">simon</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">typist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">dag</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="n">student</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">jack</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">john</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="n">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keymember</span><span class="p">(</span><span class="n">madscientist</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">tim</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">bob</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">officer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">lod</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="n">dentist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">iwan</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">evangelist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">simon</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">typist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">dag</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="n">student</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">jack</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">programmer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">john</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="n">engineer</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">mike</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="n">scientist</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">jim</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="n">officer</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">]).</span>
</span><span class='line'><span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では、1番目の要素が<code>bob</code>であるタプルがリスト中に含まれていますので、<code>true</code>が返されます。</p>

<p>次の例では、3番目の要素が<code>madscientist</code>のタプルはリスト中に含まれていないので、<code>false</code>が返されます。</p>

<h3>keymerge/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keymerge(N, TupleList1, TupleList2) &ndash;> TupleList3</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = [T1]</li>
<li>TupleList2 = [T2]</li>
<li>TupleList3 = [(T1 | T2)]</li>
<li>T1 = T2 = Tuple</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns the sorted list formed by merging TupleList1 and TupleList2. The merge is performed on the Nth element of each tuple. Both TupleList1 and TupleList2 must be key-sorted prior to evaluating this function. When two tuples compare equal, the tuple from TupleList1 is picked before the tuple from TupleList2.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keymerge-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>この関数は引数で与えられた二つのタプルリストをソートしてマージした状態で返します。ソートのキーは引数の<code>N</code>番目の要素になります。引数に与えられるタプルリストは事前にソートされていることが求められます。双方のタプルでキーの値が一致する場合、左側の引数のリストから取られたタプルが右のものに優先されます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keymerge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">}],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">d</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">d</span><span class="p">,</span><span class="mi">2</span><span class="p">}]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keymerge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">e</span><span class="p">,</span> <span class="mi">1</span><span class="p">}],</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">t</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">t</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">d</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">x</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">d</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="mi">1</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では、事前にソートされたタプルリストが引数として与えられ、マージされたリストが返されます。また、<code>[{d, 1}, {d, 2}]</code>のようにキーの値が一致するものは左側の引数に与えられたものが優先されています。</p>

<p>次の例では、事前にソートされていないタプルリストが引数として与えられていますが、返されるリストはマージされていない状態で返ってきます。</p>

<h3>keyreplace/4</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keyreplace(Key, N, TupleList1, NewTuple) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>NewTuple = Tuple</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a copy of TupleList1 where the first occurrence of a T tuple whose Nth element compares equal to Key is replaced with NewTuple, if there is such a tuple T.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keyreplace-4">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中で最も最初に現れた<code>N</code>番目の要素が<code>Key</code>であるタプルを引数で指定されたタプルに変更したリストを返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyreplace</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">original</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">original</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">original</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="n">original</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">not_change</span><span class="p">}],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">changed</span><span class="p">}).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="n">original</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">b</span><span class="p">,</span><span class="n">changed</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">c</span><span class="p">,</span><span class="n">original</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">d</span><span class="p">,</span><span class="n">original</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">b</span><span class="p">,</span><span class="n">not_change</span><span class="p">}]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyreplace</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">original</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">original</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">original</span><span class="p">}],</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="n">not_appear</span><span class="p">}).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="n">original</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">original</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="n">original</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では最も最初に現れる1番目の要素が<code>b</code>であるタプルが引数で与えられたタプルと交換されて返されます。最後に現れる同じ<code>Key</code>をもつタプルは変わっていません。</p>

<p>次の例では<code>Key</code>に一致するタプルが存在しないため、元のリストと同じ物が返ってきます。</p>

<h3>keysearch/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keysearch(Key, N, TupleList) &ndash;> {value, Tuple} | false</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Searches the list of tuples TupleList for a tuple whose Nth element compares equal to Key. Returns {value, Tuple} if such a tuple is found, otherwise false.</p>

<blockquote><p>This function is retained for backward compatibility. The function lists:keyfind/3 (introduced in R13A) is in most cases more convenient.</p></blockquote>

<p><a href="http://erlang.org/doc/man/lists.html#keysearch-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中で<code>N</code>番目の要素が<code>Key</code>である最初のタプルを探して、<code>{value, Tuple}</code>の形式で返します。見つからない場合は、<code>false</code>を返します。</p>

<p>なお、この関数は下位互換のために残っているものであり、R13Aより導入された<code>lists:keyfind/3</code>関数の方が便利です。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keysearch</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">2</span><span class="p">}]).</span>
</span><span class='line'><span class="p">{</span><span class="n">value</span><span class="p">,{</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keysearch</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">2</span><span class="p">}]).</span>
</span><span class='line'><span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では1番目の要素が<code>c</code>であるタプルを探して<code>{value, {c, 1}}</code>のように返します。二番目に現れるものは返しません。</p>

<p>次の例では条件に該当するタプルがないために<code>false</code>が返ってきます。</p>

<h3>keysort/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keysort(N, TupleList1) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a list containing the sorted elements of the list TupleList1. Sorting is performed on the Nth element of the tuples. The sort is stable.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keysort-2">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>引数に渡されたタプルリストを<code>N</code>番目の要素でソートしたリストを返します。ソートは安定ソートです。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keysort</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">r</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">t</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">r</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">}]).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">r</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">r</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">t</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">x</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">x</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">x</span><span class="p">,</span><span class="mi">3</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ソートされた結果が返ってきます。安定ソートのため、重複するキーに対しては元の順番が維持されます。</p>

<h3>keystore/4</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keystore(Key, N, TupleList1, NewTuple) &ndash;> TupleList2</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = [Tuple]</li>
<li>TupleList2 = [Tuple, &hellip;]</li>
<li>NewTuple = Tuple</li>
<li>Tuple = tuple()</li>
</ul>


<p>Returns a copy of TupleList1 where the first occurrence of a tuple T whose Nth element compares equal to Key is replaced with NewTuple, if there is such a tuple T. If there is no such tuple T a copy of TupleList1 where [NewTuple] has been appended to the end is returned.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keystore-4">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中で一番最初に出てくる<code>N</code>番目の要素が<code>Key</code>であるタプルを、引数のタプルと交換したリストを返します。<code>Key</code>に一致するリストがない場合は、リストの最後に追加されて返されます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keystore</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="n">origin</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">origin</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">origin</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">not_store</span><span class="p">}],</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">new_tuple</span><span class="p">}).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="n">origin</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">new_tuple</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="n">origin</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">not_store</span><span class="p">}]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keystore</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="n">origin</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">origin</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">origin</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">not_store</span><span class="p">}],</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="n">x</span><span class="p">,</span> <span class="n">not_found</span><span class="p">}).</span>
</span><span class='line'><span class="p">[{</span><span class="n">a</span><span class="p">,</span><span class="n">origin</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">b</span><span class="p">,</span><span class="n">origin</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">c</span><span class="p">,</span><span class="n">origin</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">b</span><span class="p">,</span><span class="n">not_store</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">x</span><span class="p">,</span><span class="n">not_found</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では、1番目の要素が<code>b</code>であるタプルが、引数に与えられた新しいタプルに交換されたリストが返ってきます。</p>

<p>次の例では、該当するタプルが存在しないため、引数に与えられた新しいタプルがリストの最後に追加されて返ってきます。</p>

<h3>keytake/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>keytake(Key, N, TupleList1) &ndash;> {value, Tuple, TupleList2} | false</h4>

<h4>Types</h4>

<ul>
<li>Key = term()</li>
<li>N = integer() >= 1 (1..tuple_size(Tuple))</li>
<li>TupleList1 = TupleList2 = [Tuple]</li>
<li>Tuple = tuple()</li>
</ul>


<p>Searches the list of tuples TupleList1 for a tuple whose Nth element compares equal to Key. Returns {value, Tuple, TupleList2} if such a tuple is found, otherwise false. TupleList2 is a copy of TupleList1 where the first occurrence of Tuple has been removed.</p>

<p><a href="http://erlang.org/doc/man/lists.html#keytake-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>タプルリストの中から初めて現れる<code>N</code>番目の要素が<code>Key</code>であるタプルを取り出し、<code>{value, Tuple, TupleList2}</code>の形式で返します。戻されるタプルリストには条件に一致したタプルは含まれていません。一致するものがない場合は、<code>false</code>が返されます。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keytake</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">}]).</span>
</span><span class='line'><span class="p">{</span><span class="n">value</span><span class="p">,{</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">},[{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keytake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[{</span><span class="n">a</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">}]).</span>
</span><span class='line'><span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では一番最初に現れる1番目の要素が<code>b</code>のタプルが取り出され、後から現れるものは残ったリストとともに返されています。</p>

<p>次の例では、条件に一致するタプルがないため、<code>false</code>が返されます。</p>

<h3>last/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>last(List) &ndash;> Last</h4>

<h4>Types</h4>

<ul>
<li>List = [T, &hellip;]</li>
<li>Last = T</li>
<li>T = term()</li>
</ul>


<p>Returns the last element in List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#last-1">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>リストの最後の要素を返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">last</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">last</span><span class="p">([</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">last</span><span class="p">([]).</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">function</span> <span class="n">clause</span> <span class="n">matching</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">last</span><span class="p">([])</span> <span class="p">(</span><span class="n">lists</span><span class="p">.</span><span class="n">erl</span><span class="p">,</span> <span class="n">line</span> <span class="mi">213</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例ではリストの最後の要素<code>5</code>が返されます。</p>

<p>次の例では長さ1のリストを引数として渡して、最後の要素=たったひとつの要素である<code>1</code>が返されます。</p>

<p>最後の例では長さ0のリストを引数として渡します。この場合は例外が発生します。</p>

<h3>map/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>map(Fun, List1) &ndash;> List2</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A) &ndash;> B)</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>Takes a function from As to Bs, and a list of As and produces a list of Bs by applying the function to every element in the list. This function is used to obtain the return values. The evaluation order is implementation dependent.</p>

<p><a href="http://erlang.org/doc/man/lists.html#map-2">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>要素を返還する関数を引数に取ります。そしてリストの要素１つずつに関数を適用した結果が入ったリストが返されます。なお、実行順序は実装に依存しています。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="o">=:=</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]).</span>
</span><span class='line'><span class="p">[</span><span class="n">false</span><span class="p">,</span><span class="n">true</span><span class="p">,</span><span class="n">false</span><span class="p">,</span><span class="n">true</span><span class="p">,</span><span class="n">false</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>引数に偶数かどうか判定する関数を渡します。引数のリストは1から5までの整数ですので、<code>false</code>と<code>true</code>が繰り返されるリストが返ってきます。</p>

<h3>mapfoldl/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>mapfoldl(Fun, Acc0, List1) &ndash;> {List2, Acc1}</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A, AccIn) &ndash;> {B, AccOut})</li>
<li>Acc0 = Acc1 = AccIn = AccOut = term()</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>mapfoldl combines the operations of map/2 and foldl/3 into one pass.</p>

<p><a href="http://erlang.org/doc/man/lists.html#mapfoldl-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p><code>mapfoldl/3</code>関数は<code>map/2</code>関数と<code>foldl/3</code>関数を一つにまとめたような関数です。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">Multiply</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">({</span><span class="nv">R1</span><span class="p">,</span> <span class="nv">I1</span><span class="p">},</span> <span class="p">{</span><span class="nv">R2</span><span class="p">,</span> <span class="nv">I2</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="nv">R1</span> <span class="o">*</span> <span class="nv">R2</span> <span class="o">-</span> <span class="nv">I1</span> <span class="o">*</span> <span class="nv">I2</span><span class="p">,</span> <span class="nv">R1</span> <span class="o">*</span> <span class="nv">I2</span> <span class="o">+</span> <span class="nv">I1</span> <span class="o">*</span> <span class="nv">R2</span><span class="p">}</span> <span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="err">#</span><span class="nv">Fun</span><span class="o">&lt;</span><span class="n">erl_eval</span><span class="p">.</span><span class="mi">12</span><span class="p">.</span><span class="mi">17052888</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">mapfoldl</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Res</span> <span class="o">=</span> <span class="nv">Multiply</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">A</span><span class="p">),</span> <span class="p">{</span><span class="nv">Res</span><span class="p">,</span> <span class="nv">Res</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">}]).</span>
</span><span class='line'><span class="p">{[{</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">}],{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>複素数<code>{R, I}</code>に対して、掛け算をする関数<code>Multiply</code>を定義し、<code>lists:mapfoldl/3</code>で初期値<code>{1, 0}</code>から左から順繰りに掛け算をしていきます。返されたタプルの左要素には掛け算の経過が、タプルの右側の要素には最終的な掛け算の結果が返っています。</p>

<h3>mapfoldr/3</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>mapfoldr(Fun, Acc0, List1) &ndash;> {List2, Acc1}</h4>

<h4>Types</h4>

<ul>
<li>Fun = fun((A, AccIn) &ndash;> {B, AccOut})</li>
<li>Acc0 = Acc1 = AccIn = AccOut = term()</li>
<li>List1 = [A]</li>
<li>List2 = [B]</li>
<li>A = B = term()</li>
</ul>


<p>mapfoldr combines the operations of map/2 and foldr/3 into one pass.</p>

<p><a href="http://erlang.org/doc/man/lists.html#mapfoldr-3">参照元</a></p></blockquote>

<h4>Explain</h4>

<p><code>mapfoldr</code>関数は<code>map/2</code>関数と<code>foldr/3</code>関数を組み合わせた関数です。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">Multiply</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">({</span><span class="nv">R1</span><span class="p">,</span> <span class="nv">I1</span><span class="p">},</span> <span class="p">{</span><span class="nv">R2</span><span class="p">,</span> <span class="nv">I2</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>     <span class="p">{</span><span class="nv">R1</span> <span class="o">*</span> <span class="nv">R2</span> <span class="o">-</span> <span class="nv">I1</span> <span class="o">*</span> <span class="nv">I2</span><span class="p">,</span> <span class="nv">R1</span> <span class="o">*</span> <span class="nv">I2</span> <span class="o">+</span> <span class="nv">I1</span> <span class="o">*</span> <span class="nv">R2</span><span class="p">}</span> <span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="err">#</span><span class="nv">Fun</span><span class="o">&lt;</span><span class="n">erl_eval</span><span class="p">.</span><span class="mi">12</span><span class="p">.</span><span class="mi">17052888</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">mapfoldr</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Res</span> <span class="o">=</span> <span class="nv">Multiply</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">A</span><span class="p">),</span> <span class="p">{</span><span class="nv">Res</span><span class="p">,</span> <span class="nv">Res</span><span class="p">}</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>   <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">}]).</span>
</span><span class='line'><span class="p">{[{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">},{</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">}],{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先ほどと同じく複素数の計算をしています。返されたタプルの左側の順序が先ほどの<code>mapfoldl/3</code>関数と異なっていることがわかると思います。</p>

<h3>max/1</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>max(List) &ndash;> Max</h4>

<h4>Types</h4>

<ul>
<li>List = [T, &hellip;]</li>
<li>Max = T</li>
<li>T = term()</li>
</ul>


<p>Returns the first element of List that compares greater than or equal to all other elements of List.</p>

<p><a href="http://erlang.org/doc/man/lists.html#max-1">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>他のすべての要素より大きい最初の要素を返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">max</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">6</span><span class="p">]).</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>リストの中の最大値である<code>4</code>が返されます。</p>

<h3>member/2</h3>

<h4>Erlang公式ドキュメント</h4>

<blockquote><h4>member(Elem, List) &ndash;> boolean()</h4>

<h4>Types</h4>

<ul>
<li>Elem = T</li>
<li>List = [T]</li>
<li>T = term()</li>
</ul>


<p>Returns true if Elem matches some element of List, otherwise false.</p>

<p><a href="http://erlang.org/doc/man/lists.html#member-2">参照元</a></p></blockquote>

<h4>Explain</h4>

<p>指定した要素と一致する要素があれば<code>true</code>を、なければ<code>false</code>を返します。</p>

<h4>Example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">member</span><span class="p">({</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span> <span class="p">[{</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">d</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">}]).</span>
</span><span class='line'><span class="n">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">member</span><span class="p">({</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span> <span class="p">[{</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="mi">1</span><span class="p">},{</span><span class="n">a</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="n">d</span><span class="p">,</span><span class="mi">1</span><span class="p">}]).</span>
</span><span class='line'><span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の例では指定した要素<code>{a,1}</code>に一致する要素がリストにあるため<code>true</code>が返ってきます。</p>

<p>次の例では指定した要素<code>{a,1}</code>に一致する要素がリストにないため<code>false</code>が返ってきます。</p>

<h2>次回</h2>

<p>次回は次の式の結果をやっていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nn">lists</span><span class="p">:</span><span class="nf">sublist</span><span class="p">(</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">sort</span><span class="p">(</span>
</span><span class='line'>        <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span>
</span><span class='line'>            <span class="k">fun</span><span class="p">({</span><span class="nv">F</span><span class="p">,</span> <span class="nv">A</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="o">++</span>
</span><span class='line'>                <span class="s">&quot;/&quot;</span> <span class="o">++</span>
</span><span class='line'>                <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">A</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span><span class="p">,</span>
</span><span class='line'>            <span class="nn">lists</span><span class="p">:</span><span class="nf">module_info</span><span class="p">(</span><span class="n">exports</span><span class="p">))),</span>
</span><span class='line'>    <span class="mi">17</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">16</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>




<!-- admax -->


<script type="text/javascript" src="http://adm.shinobi.jp/s/d0f95faac716337846b3bcf82925c26e"></script>


<!-- admax -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40855644-1', 'github.io');
  ga('send', 'pageview');

</script>



]]></content>
  </entry>
  
</feed>
